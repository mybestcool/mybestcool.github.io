<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知行合一</title>
  
  <subtitle>致良知</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mybestcool.github.io/"/>
  <updated>2018-06-25T01:57:26.152Z</updated>
  <id>https://mybestcool.github.io/</id>
  
  <author>
    <name>Lucus Gu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>区块链跨链技术</title>
    <link href="https://mybestcool.github.io/2018/06/19/across-the-chain-tech/"/>
    <id>https://mybestcool.github.io/2018/06/19/across-the-chain-tech/</id>
    <published>2018-06-19T02:18:45.000Z</published>
    <updated>2018-06-25T01:57:26.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>无法跨链的区块链就如网站没有浏览器，互联网没有搜索引擎。</p><p>跨链技术是实现区块链价值互联的关键，它是把区块链从分散的孤岛中拯救出来的良药，是区块链向外拓展和连接的桥梁。</p><h2 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h2><p>基础的跨链满足以下5个步骤：</p><ol><li>在A链的用户A向在B链的用户B发起兑换请求</li><li>跨链协议锁定A链币</li><li>跨链协议锁定等值数量的B链币</li><li>将B链币发到用户B的钱包地址，同时拿走锁定的用户A的链币</li><li>在A链上用户A的币被转走，同时在B链上用户B得到等值的币</li></ol><p>根据这5个步骤，需要区块链5项能力</p><ol><li>便携式资产（portable assets）：资产可以多条链之间来回转移和使用</li><li>满足原子性交换（atomic swap）：跨链资产兑换是安全的而且同步发生的。（不同链上的两位用户可以发起两笔传输交易，要么在两个账本上一起执行，要么两个账本都不执行，即原子性）</li><li>带有跨链互通性，具备他链信息和事件的读取和验证能力（Cross-chain oracle issues）：在某些情况下，一个链（如A链）的智能合约执行机制可能是依赖另一个链（B链）的条件触发，所以A链要能获得B链的所有相关条件状态，即c具备他链信息和事件的读取和验证能力。</li><li>资产留置权（Asset encumbrance）：在某些情况下，相关联的两个链资产同时需要被锁定，如抵押品或者法院强制执行的扣押等。</li><li>跨链执行合约（General cross-chain contracts）：例如根据链A的股权证明在链B上分发股息等。</li></ol><h2 id="跨链技术主要有以下几种"><a href="#跨链技术主要有以下几种" class="headerlink" title="跨链技术主要有以下几种"></a>跨链技术主要有以下几种</h2><ul><li>公证人机制(notary schemes)</li><li>侧链/中继(sidechains/relays)</li><li>哈希锁定(hash-locking)</li><li>分布式私钥控制(distributed private key control)</li><li>公证人机制+侧链混合技术(notary schemes + sidechains mixing technology)</li></ul><p><img src="https://pic3.zhimg.com/80/v2-e75746efecaeb37fa548fe44ff11f5b2_hd.jpg" alt="img"></p><h2 id="公证技术：如瑞波Interledger协议-★★★"><a href="#公证技术：如瑞波Interledger协议-★★★" class="headerlink" title="公证技术：如瑞波Interledger协议 ★★★"></a>公证技术：如瑞波Interledger协议 ★★★</h2><p>在2012年，ILP由瑞波实验室提出，解决不同账本之间的协同。流程如下</p><ol><li>Alice是拥有A链的账户，Bob是拥有B链的货币，Cot是拥有A、B链的货币；Alice将向Bob进行一笔交易（如转账）</li><li>Alice通过其他通讯手段，得到Bob提供的一个“共享密码”以及Bob在ILP网络中的对应唯一地址（如bob.ripple.rHCvhtqhXuBvWt5g79gyXfpG8VcrvUm9E9）</li><li>Alice向Cot询价，Cot根据Alice的转账金额和市场行情算出总的交易额（包括交易费）</li><li>Alice根据ILP规定生成ILP包，指定目标目标地址为Cot，同时给予ILP包的私有内容和“共享密码”生成一个“条件原像”，对“条件原像”HASH生成交易托管所需要的“条件”</li><li>Alice在A链上发起一个托管交易（转账），托管条件为4所生成的条件，设置超时时间</li><li>Cot在A链上检查到一笔涉及自己的托管交易，同时收到Alice的ILP包；计算和校对需要交易的额度后，将ILP包目标地址修正为Bob，并在B链上发起一个托管操作，设定交易条件为Alice的交易条件，设定超时时间，超时时间小于5.的时间，然后将ILP包发送给Bob</li><li>Bob收到ILP包，用“公共密码”解出“条件原像”，用HASH校对“条件”；同时检测到B链上的托管交易，校对金额后，转入“条件原像”，确认收到交易的金额</li><li>Cot在B链检测到涉及自己的托管交易被确定，分析交易数据，得到“条件原像”；把“条件原像”输入到A链上，并确认交易，收到交易的金额和手续费</li><li>Alice在A链上检测到涉及自己的托管交易被确定，此次交易完成</li></ol><p><img src="https://pic4.zhimg.com/80/v2-1fdc73d2f73bd13ee7a3002e5f209667_hd.jpg" alt="img"></p><h2 id="侧链技术：BTC-Relay-★★"><a href="#侧链技术：BTC-Relay-★★" class="headerlink" title="侧链技术：BTC Relay ★★"></a>侧链技术：BTC Relay ★★</h2><p>BTC Relay 是在以太坊基金会支持下诞生并成长起来的，属于早期的侧链技术。它在以太坊上建立一个bitcoin轻钱包，用于操作bitcoin，并给以太坊智能合约提供操作bitcoin的接口，这样用合约就能完成BTC和ETH的交易。是非常简单的一种跨链技术。但它的交易费用特别高。</p><p><img src="https://pic3.zhimg.com/80/v2-3122a815cbd4cee9a31c002d466760da_hd.jpg" alt="img"></p><h2 id="中继技术：Polkadot-★★★★★-其他如Cosmos，tendermint团队开发"><a href="#中继技术：Polkadot-★★★★★-其他如Cosmos，tendermint团队开发" class="headerlink" title="中继技术：Polkadot ★★★★★ (其他如Cosmos，tendermint团队开发)"></a>中继技术：Polkadot ★★★★★ (其他如Cosmos，tendermint团队开发)</h2><p>Polkadot（Parity公司开发）将区块链共识分成两个部分：有效性和一致性。有效性的概念是比如我有10个比特币，我转给A是有效的，我转给B也可以是有效的。但一致性的概念就是我只能转给其中某一个人，即使我发出了两笔有效的交易，最终网络会共识出一条最长链来达成一致，另一个交易会被丢弃。更加概括性地讲就是有效性负责运算，一致性负责投票，一个是强CPU依赖的，一个是强出块权依赖的。</p><p>Polkadot 结构中核心有两个部分：中继链和平行链，中继链负责一致性，平行链负责有效性。中继链采用POS共识算法，将主要借鉴Honeybarger，还有Tendermint。平行链由很多固定身份的收集人管理，以收集交易手续费为激励，为中继链提供自己的块头和跨链交易相关的证明数据，这部分数据在Polkadot里称为平行链的候选块，将来由中继链的验证人随机选定。由于平行链也不一定真有一条链，所以这里的块也是泛指。中继链会分成两类，第一类是类似以太坊和比特币这样有自身共识系统的区块链，他们有自身的POW矿工来维持链的运转，他们不能直接作为平行链参与到Polkadot网络中来，而是需要新成立一些收集人组建转接桥系统，将以太坊区块的数据整理为中继链所需的格式，这个转接桥系统才是Polkadot的平行链。第二类是还没有出现的过的区块链系统，他们将来的出块人就是收集人，他们链区块的决定权是由中继链的验证人决定的，这类系统可能才真正是Polkadot所设想的未来链。</p><p><img src="https://pic1.zhimg.com/80/v2-82a57e53e49dc2b6cef370d054cd42cc_hd.jpg" alt="img"></p><h2 id="哈希锁定技术：Lighting-network-★★"><a href="#哈希锁定技术：Lighting-network-★★" class="headerlink" title="哈希锁定技术：Lighting network ★★"></a>哈希锁定技术：Lighting network ★★</h2><p>闪电网络基本原理：Alice在A链与Bob在B链进行一笔交易</p><ol><li>Alice在A链用密码H=HASH(S)锁定一笔资产，并设定时限，时限到来前，如果有人能交出S，这笔资产就转给他，否则这笔资产归还给Alice</li><li>Alice将H发给Bob</li><li>Bob在B链上用H锁定一笔资产，设定时限，小于1.的时限，时限到来前，如果有人能交出S，这笔资产就转给他，否则这笔资产归还给Bob</li><li>Alice在B链上交出S，得到Bob锁定的资产，同时B得到了S</li><li>Bob在A链上交出S，得到Alice锁定的资产</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/9076397-c921f29e7739af40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/381" alt="img"></p><h2 id="分布式私钥控制技术：FUSION-★★★-其他如国内开发的WanChain"><a href="#分布式私钥控制技术：FUSION-★★★-其他如国内开发的WanChain" class="headerlink" title="分布式私钥控制技术：FUSION ★★★ (其他如国内开发的WanChain)"></a>分布式私钥控制技术：FUSION ★★★ (其他如国内开发的WanChain)</h2><p>Fusion在原链上设立锁定帐号，作为原链上的公证人，用户向fusion发起lock-in请求，然后将原链上的通证交给锁定账户，fusion上的智能合约验证请求，确认原链上的交易后，在fusion链上创造等值原链通证的标记符号，交给用户，之后用户可以在fusion上交易其他链通证的标记符号，提现时，用户在fusion上发起lock-out请求，验证节点将提现的标记符号锁定，用对应链上的锁定账户向用户发起转账，确认转账后销毁fusion上的标记符号。</p><p>采用锁定账户作为公证人，不可避免的是锁定账户的密钥控制问题，fusion中采用的是所谓分布式密钥存储的安全方案，本质上就是秘密共享技术，具体可以参考Shamir的(k,n)门限秘密共享方案，简单的理解就类似多重签名技术，由n个验证节点分别持有一部分密钥，每个节点只能知道自己的密钥，然后锁定账户的任何操作都至少要有k个验证节点的密钥，因此只要且必须要有至少k个验证节点通过，锁定帐号才能将锁定的原链资产提现给用户。相较于中心化的交易所，n个验证节点事实上构成了一个多中心的结构，避免了单个中心被攻击的危害，同时不需要设计完全去中心化结构的技术难点。</p><p><img src="https://upload-images.jianshu.io/upload_images/9076397-d49b302a951eb099.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550" alt="img"></p><h2 id="混合技术：Ether-Universe-★★★★"><a href="#混合技术：Ether-Universe-★★★★" class="headerlink" title="混合技术：Ether Universe ★★★★"></a>混合技术：Ether Universe ★★★★</h2><p>以太宇宙分为主链和不同区块链上的子链，主链是整个生态体系中的最重要部分，其承载了整个平台交互逻辑，记录了所有交互信息，链上产生的代币用于支付每次跨链服务所消耗的 gas。子链则用于辅助主链来对其他区块链进行双向锚定。</p><p><img src="https://static.leiphone.com/uploads/new/article/740_740/201804/5ac475830d6fc.png?imageMogr2/format/jpg/quality/90" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;无法跨链的区块链就如网站没有浏览器，互联网没有搜索引擎。&lt;/p&gt;
&lt;p&gt;跨链技术是实现区块链价值互联的关键，它是把区块链从分散的孤岛中拯救出
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最近遇到的关于docker的问题</title>
    <link href="https://mybestcool.github.io/2018/06/15/problem-about-docker/"/>
    <id>https://mybestcool.github.io/2018/06/15/problem-about-docker/</id>
    <published>2018-06-15T05:29:52.000Z</published>
    <updated>2018-06-15T05:34:50.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题1：docker-v-与-onedrive-冲突"><a href="#问题1：docker-v-与-onedrive-冲突" class="headerlink" title="问题1：docker -v 与 onedrive 冲突"></a>问题1：docker -v 与 onedrive 冲突</h2><ul><li>问题现象</li></ul><p>在windows下docker用Ubuntu镜像生成容器，用-v映射到本地目录，如果这个目录也是onedrive包含的目录，那有可能导致onedrive一直卡在“正在更新文件”中</p><ul><li><p>解决办法</p><ul><li>停掉和删除容器</li><li>重设onedrive，键盘win+r，输入“%localappdata%\Microsoft\OneDrive\onedrive.exe /reset”</li><li>重启操作系统</li></ul></li><li><p>这种方法但失去了在容器上操作文件后能直接同步到onedrive的功能，暂时用以下办法代替</p><ul><li>目录copy一份到别的路径下，然后写一个脚本，按差异复制到onedrive目录</li></ul></li></ul><p>以下是同步脚本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> NOWDIR=%~dp0</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%NOWDIR%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> SRC=...</span><br><span class="line"><span class="built_in">set</span> DST=...</span><br><span class="line"></span><br><span class="line"><span class="built_in">xcopy</span> "<span class="variable">%SRC%</span>\server" "<span class="variable">%DST%</span>\server" /s /h /d /y /exclude:uncopy.txt</span><br></pre></td></tr></table></figure><p>以下是uncopy.txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*.so</span><br><span class="line">*.o</span><br><span class="line">*.a</span><br><span class="line">*.log</span><br><span class="line">*.dSYM</span><br><span class="line"></span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br><span class="line">*.rock</span><br><span class="line">*.rockspec</span><br><span class="line">.DS_Store</span><br><span class="line">*.pid</span><br></pre></td></tr></table></figure><ul><li>用系统的任务计划来执行脚本，把文件同步到onedrive下</li></ul><h2 id="问题2：docker-v映射目录后，容器中不生效"><a href="#问题2：docker-v映射目录后，容器中不生效" class="headerlink" title="问题2：docker -v映射目录后，容器中不生效"></a>问题2：docker -v映射目录后，容器中不生效</h2><ul><li><p>引起这个问题的原因是更新了操作系统的密码，解决办法如下</p><ul><li>打开docker设置，在sharedrives栏，reset credentials…，然后选择shared的盘符，重新输入系统密码</li><li>重新生成容器</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题1：docker-v-与-onedrive-冲突&quot;&gt;&lt;a href=&quot;#问题1：docker-v-与-onedrive-冲突&quot; class=&quot;headerlink&quot; title=&quot;问题1：docker -v 与 onedrive 冲突&quot;&gt;&lt;/a&gt;问题1：doc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>typescript_learning</title>
    <link href="https://mybestcool.github.io/2018/06/06/typescript-learning/"/>
    <id>https://mybestcool.github.io/2018/06/06/typescript-learning/</id>
    <published>2018-06-06T08:49:07.000Z</published>
    <updated>2018-06-06T08:49:34.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-转自legacy的gitbook"><a href="#TypeScript-转自legacy的gitbook" class="headerlink" title="TypeScript,转自legacy的gitbook"></a>TypeScript,转自<a href="https://ts.xcatliu.com" target="_blank" rel="noopener">legacy的gitbook</a></h1><h2 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p>tsc 对类型做静态检查，如果有错误，编译会报错，但会继续生成编译结果</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>原始数据类型</li></ol><ul><li>布尔值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li>null类型 和 undefined类型，他俩是所有类型的子类型，即可以赋值给其他类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>数值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 16 进制</span></span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> notANumber: <span class="built_in">number</span> = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> infinityNumber: <span class="built_in">number</span> = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><ul><li>字符串</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName: <span class="built_in">string</span> = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> myAge: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>.</span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123;myAge + 1&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure><ul><li>空值, 用于函数返回值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>任意类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><ul><li>联合类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>对象的类型</li></ol><ul><li>接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>可选属性，带?</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>任意属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用 [propName: string] 定义了任意属性取 string 类型的值。</p><p>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性</p><ul><li>只读属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure><p>上例中，使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。</p><p>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</p><ol start="3"><li>数组类型</li></ol><ul><li>基本数组 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><ul><li>泛型数组</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><ol start="4"><li>函数类型</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明（Function Declaration）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式（Function Expression）</span></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>类型断言</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>声明文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuery: <span class="function">(<span class="params"><span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br></pre></td></tr></table></figure><ol start="7"><li>内置对象</li></ol><ul><li><p>ECMAScript内置对象，在<a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">typescript核心库</a>中已经定义好了，还扩展了内置对象，如DOM、BOM等</p></li><li><p>其他第三方，如node，可以用npm来生成</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/node --save-dev</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ol><li>类型别名，关键词type</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串字面量类型，关键词type</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">'click'</span> | <span class="string">'scroll'</span> | <span class="string">'mousemove'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>), <span class="string">'scroll'</span>);  <span class="comment">// 没问题</span></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'world'</span>), <span class="string">'dbclick'</span>); <span class="comment">// 报错，event 不能为 'dbclick'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>元组，数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu[<span class="number">0</span>] = <span class="string">'Xcat Liu'</span>;</span><br><span class="line">xcatliu[<span class="number">1</span>] = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">xcatliu[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">xcatliu[<span class="number">1</span>].toFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>越界的元素,当赋值给越界的元素时，它类型会被限制为元组中每个类型的联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu = [<span class="string">'Xcat Liu'</span>, <span class="number">25</span>];</span><br><span class="line">xcatliu.push(<span class="string">'http://xcatliu.com/'</span>);</span><br><span class="line">xcatliu.push(<span class="literal">true</span>); <span class="comment">// 报错，不能push boolean类型</span></span><br></pre></td></tr></table></figure><ol start="4"><li>枚举，关键词enum</li></ol><ul><li>普通枚举</li></ul><p>枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Mon"</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Tue"</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sat"</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">0</span>] === <span class="string">"Sun"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">1</span>] === <span class="string">"Mon"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">2</span>] === <span class="string">"Tue"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">6</span>] === <span class="string">"Sat"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>常数枚举</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 外部枚举</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. 类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 属性与方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用 class 定义类，使用 constructor 定义构造函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过 new 生成新实例的时候，会自动调用构造函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> typescript</span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;this.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></span><br></pre></td></tr></table></figure><ul><li>继承</li></ul><p>使用 extends 关键字实现继承，子类中使用 super 关键字来调用父类的构造函数和方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name); <span class="comment">// 调用父类的 constructor(name)</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.sayHi(); <span class="comment">// 调用父类的 sayHi()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>); <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(c.sayHi()); <span class="comment">// Meow, My name is Tom</span></span><br></pre></td></tr></table></figure><ul><li>存取器</li></ul><p>使用 getter 和 setter 可以改变属性的赋值和读取行为：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Jack'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> name(value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'setter: '</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Kitty'</span>); <span class="comment">// setter: Kitty</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>; <span class="comment">// setter: Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure><ul><li>静态方法</li></ul><p>使用 static 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">static</span> isAnimal(a) &#123;</span><br><span class="line">        <span class="keyword">return</span> a <span class="keyword">instanceof</span> Animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line">Animal.isAnimal(a); <span class="comment">// true</span></span><br><span class="line">a.isAnimal(a); <span class="comment">// TypeError: a.isAnimal is not a function</span></span><br></pre></td></tr></table></figure><ul><li><p>public private 和 protected</p></li><li><p>抽象类</p></li></ul><p>abstract 用于定义抽象类和其中的抽象方法。</p><p>抽象类是不允许被实例化的;抽象类中的抽象方法必须被子类实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> sayHi() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Meow, My name is <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>类与接口</li></ol><ul><li>类继承接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Door &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SecurityDoor <span class="keyword">extends</span> Door <span class="keyword">implements</span> Alarm &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'SecurityDoor alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类继承多个接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Light &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm, Light &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light on'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOff() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口继承接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> LightableAlarm <span class="keyword">extends</span> Alarm &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口继承类</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>混合类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">    (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>namespace，之前叫module，内部使用export导出，引入的时候用全名或者import成别名</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TypeScript-转自legacy的gitbook&quot;&gt;&lt;a href=&quot;#TypeScript-转自legacy的gitbook&quot; class=&quot;headerlink&quot; title=&quot;TypeScript,转自legacy的gitbook&quot;&gt;&lt;/a&gt;TypeS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu命令行设置ipfs开发环境</title>
    <link href="https://mybestcool.github.io/2018/06/04/ipfs-dev-config/"/>
    <id>https://mybestcool.github.io/2018/06/04/ipfs-dev-config/</id>
    <published>2018-06-04T10:57:16.000Z</published>
    <updated>2018-06-04T11:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署一台Ubuntu服务器"><a href="#部署一台Ubuntu服务器" class="headerlink" title="部署一台Ubuntu服务器"></a>部署一台Ubuntu服务器</h2><h2 id="设置科学上网，因为ipfs已被墙"><a href="#设置科学上网，因为ipfs已被墙" class="headerlink" title="设置科学上网，因为ipfs已被墙"></a>设置科学上网，因为ipfs已被墙</h2><h3 id="购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址"><a href="#购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址" class="headerlink" title="购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址"></a>购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址</h3><h3 id="部署Ubuntu-SSR客户端"><a href="#部署Ubuntu-SSR客户端" class="headerlink" title="部署Ubuntu SSR客户端"></a>部署Ubuntu SSR客户端</h3><ol><li>下载ssr客户端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://onlyless.github.io/ssr</span><br><span class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 766 /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure><ol start="2"><li>配置ssr地址</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"server"</span> : <span class="string">"your serverip"</span>,</span><br><span class="line"><span class="attr">"server_port"</span> : yourport,</span><br><span class="line"><span class="attr">"password"</span> : <span class="string">"your password"</span>,</span><br><span class="line"><span class="attr">"method"</span> : <span class="string">"your method"</span>,</span><br><span class="line"><span class="attr">"protocol"</span> : <span class="string">"your protocol"</span>,</span><br><span class="line"><span class="attr">"obfs"</span> : <span class="string">"your obfs"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重启</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssr restart</span><br></pre></td></tr></table></figure><ol start="4"><li>配置开机启动， vim /etc/rc.local</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh -e</span><br><span class="line">#</span><br><span class="line"># rc.local</span><br><span class="line">#</span><br><span class="line"># This script is executed at the end of each multiuser runlevel.</span><br><span class="line"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="line"># value on error.</span><br><span class="line">#</span><br><span class="line"># In order to enable or disable this script just change the execution</span><br><span class="line"># bits.</span><br><span class="line">#</span><br><span class="line"># By default this script does nothing.</span><br><span class="line"></span><br><span class="line">sudo ssr start</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h3 id="安装Privoxy"><a href="#安装Privoxy" class="headerlink" title="安装Privoxy"></a>安装Privoxy</h3><ol><li><p>因为ssr是sock5代理，不接受http/https流量，使用的时候需要将其转化成http/https流量</p></li><li><p>安装Privoxy</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install privoxy</span><br></pre></td></tr></table></figure><ol start="3"><li>配置Privoxy，打开其配置文件/etc/privoxy/config，修改以下几个地方</li></ol><ul><li>找到4.1. listen-address，确认privoxy监听的端口号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#  Example:</span><br><span class="line">#</span><br><span class="line">#      Suppose you are running Privoxy on a machine which has the</span><br><span class="line">#      address 192.168.0.1 on your local private network</span><br><span class="line">#      (192.168.0.0) and has another outside connection with a</span><br><span class="line">#      different address. You want it to serve requests from inside</span><br><span class="line">#      only:</span><br><span class="line">#</span><br><span class="line">#        listen-address  192.168.0.1:8118</span><br><span class="line">#</span><br><span class="line">#      Suppose you are running Privoxy on an IPv6-capable machine and</span><br><span class="line">#      you want it to listen on the IPv6 address of the loopback</span><br><span class="line">#      device:</span><br><span class="line">#</span><br><span class="line">#        listen-address [::1]:8118</span><br><span class="line">#</span><br><span class="line">listen-address  localhost:8118</span><br><span class="line">#</span><br><span class="line">#  4.2. toggle</span><br><span class="line">#  ============</span><br><span class="line">#</span><br><span class="line">#  Specifies:</span><br><span class="line">#</span><br><span class="line">#      Initial state of &quot;toggle&quot; status</span><br><span class="line">#</span><br><span class="line">#  Type of value:</span><br><span class="line">#</span><br><span class="line">#      1 or 0</span><br><span class="line">#</span><br><span class="line">#  Default value:</span><br></pre></td></tr></table></figure><ul><li>找到5.2. 设置sock5转发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#      Unencrypted connections to systems in these address ranges</span><br><span class="line">#      will be as (un)secure as the local network is, but the</span><br><span class="line">#      alternative is that you can&apos;t reach the local network through</span><br><span class="line">#      Privoxy at all. Of course this may actually be desired and</span><br><span class="line">#      there is no reason to make these exceptions if you aren&apos;t sure</span><br><span class="line">#      you need them.</span><br><span class="line">#</span><br><span class="line">#      If you also want to be able to reach servers in your local</span><br><span class="line">#      network by using their names, you will need additional</span><br><span class="line">#      exceptions that look like this:</span><br><span class="line">#</span><br><span class="line">#       forward           localhost/     .</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br><span class="line">#  5.3. forwarded-connect-retries</span><br><span class="line">#  ===============================</span><br><span class="line">#</span><br><span class="line">#  Specifies:</span><br><span class="line">#</span><br></pre></td></tr></table></figure><ol start="4"><li>重启Privoxy</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/privoxy restart</span><br></pre></td></tr></table></figure><ol start="5"><li>编写两个bash脚本，start_proxy.sh，stop_proxy.sh；用source start_proxy.sh/stop_proxy.sh 来开启和关闭代理</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start_proxy.sh</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"127.0.0.1:8118"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"127.0.0.1:8118"</span></span><br><span class="line"></span><br><span class="line">git config --global http.proxy http://127.0.0.1:8118 <span class="comment"># 可以用sock5://127.0.0.1:1008</span></span><br><span class="line">git config --global https.proxy https://127.0.0.1:8118</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stop_proxy.sh</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=</span><br><span class="line"><span class="built_in">export</span> https_proxy=</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><ol start="6"><li>开始代理，测试是否可以穿墙</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> start_proxy.sh</span><br><span class="line">curl https://www.google.com <span class="comment"># 测试</span></span><br></pre></td></tr></table></figure><h2 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h2><ol><li>安装工具 git</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><ol start="2"><li>安装golang</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.10.2.linux-amd64.tar.gz</span><br><span class="line">tar -C /usr/<span class="built_in">local</span> -xzf go1.10.2.linux-amd64.tar.gz</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/go /usr/<span class="built_in">local</span>/go</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/gofmt /usr/<span class="built_in">local</span>/gofmt</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/godoc /usr/<span class="built_in">local</span>/godoc</span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个golang工作目录，比如~/gopath，编辑.bashrc，在文件最后添加以下内容；确保.profile 会调用.bashrc</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$HOME</span>/gopath"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><h2 id="下载编译源码"><a href="#下载编译源码" class="headerlink" title="下载编译源码"></a>下载编译源码</h2><ol><li>下载源码。虽然已经翻墙，但也不能直接编译，原因是ipfs使用的包管理工具gx不支持http代理。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u -d -v github.com/ipfs/go-ipfs</span><br></pre></td></tr></table></figure><ol start="2"><li><p>编译ipfs包管理工具GX</p><ol><li><p>下载GX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u -v -d github.com/whyrusleeping/gx</span><br><span class="line">go get -u -v -d github.com/whyrusleeping/gx-go</span><br></pre></td></tr></table></figure></li><li><p>修改 github.com/ipfs/go-ipfs-api/shell.go</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewShell</span><span class="params">(url <span class="keyword">string</span>)</span> *<span class="title">Shell</span></span> &#123;</span><br><span class="line">c := &amp;gohttp.Client&#123;</span><br><span class="line">Transport: &amp;gohttp.Transport&#123;</span><br><span class="line">Proxy: gohttp.ProxyFromEnvironment, <span class="comment">// 这里是添加的一行</span></span><br><span class="line">DisableKeepAlives: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NewShellWithClient(url, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译GX，编译完后可以在$(GOPATH)/bin目录找到gx和gx-go程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/whyrusleeping/gx</span><br><span class="line">go install github.com/whyrusleeping/gx-go</span><br></pre></td></tr></table></figure></li></ol></li><li><p>用gx下载所有的依赖包</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gx install --global</span><br></pre></td></tr></table></figure><ol start="4"><li>进入go-ipfs目录，编译ipfs，编译完后可以在$(GOPATH)/bin目录找到ipfs程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;部署一台Ubuntu服务器&quot;&gt;&lt;a href=&quot;#部署一台Ubuntu服务器&quot; class=&quot;headerlink&quot; title=&quot;部署一台Ubuntu服务器&quot;&gt;&lt;/a&gt;部署一台Ubuntu服务器&lt;/h2&gt;&lt;h2 id=&quot;设置科学上网，因为ipfs已被墙&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在docker中构建ubuntu开发环境</title>
    <link href="https://mybestcool.github.io/2018/05/19/docker-build-devubuntu/"/>
    <id>https://mybestcool.github.io/2018/05/19/docker-build-devubuntu/</id>
    <published>2018-05-19T05:19:06.000Z</published>
    <updated>2018-06-04T13:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol><li>宿主机环境windows，从<a href="https://store.docker.com/search?type=edition&amp;offering=community" target="_blank" rel="noopener">官网</a>下载docker的windows版本，安装完毕后切换到Linux Containers</li><li>镜像使用ubuntu 16.04</li></ol><h2 id="docker三大概念"><a href="#docker三大概念" class="headerlink" title="docker三大概念"></a>docker三大概念</h2><ol><li>容器Container：相当于虚拟机</li><li>镜像Image：相当于虚拟机的iso</li><li>仓库Repository：相当于github，官网仓库是hub.docker.com</li></ol><h2 id="构建一个镜像，镜像的脚本默认名字为Dockerfile"><a href="#构建一个镜像，镜像的脚本默认名字为Dockerfile" class="headerlink" title="构建一个镜像，镜像的脚本默认名字为Dockerfile"></a>构建一个镜像，镜像的脚本默认名字为Dockerfile</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=en_US.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update -y</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN apt-get -y install gcc \</span></span><br><span class="line"><span class="bash">g++ \</span></span><br><span class="line"><span class="bash">gdb \</span></span><br><span class="line"><span class="bash">automake \</span></span><br><span class="line"><span class="bash">autoconf \</span></span><br><span class="line"><span class="bash">libtool \</span></span><br><span class="line"><span class="bash">make \</span></span><br><span class="line"><span class="bash">cmake</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN apt-get -y install ssh \</span></span><br><span class="line"><span class="bash">ntp \</span></span><br><span class="line"><span class="bash">vim \</span></span><br><span class="line"><span class="bash">wget \</span></span><br><span class="line"><span class="bash">curl \</span></span><br><span class="line"><span class="bash">telnet</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN apt-get -y install git \</span></span><br><span class="line"><span class="bash">subversion \</span></span><br><span class="line"><span class="bash">doxygen \</span></span><br><span class="line"><span class="bash">lighttpd \</span></span><br><span class="line"><span class="bash">net-tools \</span></span><br><span class="line"><span class="bash">inetutils-ping</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN apt-get -y install python \</span></span><br><span class="line"><span class="bash">golang</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN apt-get -y install libbz2-dev \</span></span><br><span class="line"><span class="bash">libdb++-dev \</span></span><br><span class="line"><span class="bash">libssl-dev \</span></span><br><span class="line"><span class="bash">libdb-dev \</span></span><br><span class="line"><span class="bash">libssl-dev \</span></span><br><span class="line"><span class="bash">openssl \</span></span><br><span class="line"><span class="bash">libreadline-dev \</span></span><br><span class="line"><span class="bash">libcurl4-openssl-dev \</span></span><br><span class="line"><span class="bash">libncurses-dev \</span></span><br><span class="line"><span class="bash">autotools-dev \</span></span><br><span class="line"><span class="bash">build-essential \</span></span><br><span class="line"><span class="bash">libicu-dev \</span></span><br><span class="line"><span class="bash">python-dev</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN mkdir /var/run/sshd</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># change sshd listen port</span></span></span><br><span class="line"><span class="bash">RUN sed -i <span class="string">'s/Port[ ]*22/Port 36000/'</span> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"PasswordAuthentication yes"</span> &gt;&gt; /etc/ssh/sshd_config</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># add user</span></span></span><br><span class="line"><span class="bash">RUN mkdir /home/bingo</span></span><br><span class="line"><span class="bash">RUN useradd -s /bin/bash bingo</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"bingo:123456"</span> | chpasswd</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"bingo:123456"</span> | chpasswd</span></span><br><span class="line"><span class="bash">RUN chown -R bingo:bingo /home/bingo</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Container should expose ports.</span></span></span><br><span class="line"><span class="bash">EXPOSE 36000</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"/usr/sbin/sshd"</span>, <span class="string">"-D"</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个空目录，在其下建立一个名叫Dockerfile文件，输入以上内容</p></blockquote><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ubuntu:dev.16.04 .</span><br></pre></td></tr></table></figure><blockquote><p>如果制作过程中出错，删除相关的命令，重新输入上面的命令继续制作</p></blockquote><blockquote><p>制作出来的镜像大小大概在960m左右，用”docker image ls”查看</p></blockquote><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name dev-ubuntu -p 36000:36000 ubuntu:dev.16.04</span><br></pre></td></tr></table></figure><blockquote><p>-p 36000:36000 前面的36000为宿主机端口，后面为容器端口</p></blockquote><blockquote><p>docker启动的时候，需要把本容器也启动起来，带参数”–restart=always”</p></blockquote><blockquote><p>如果需要挂载本地磁盘，使用参数”-v /opt/projects:/home/bingo/“</p></blockquote><blockquote><p>docker端口映射等网络相关内容可以参考<a href="https://itbilu.com/linux/docker/Ey5dT-i2G.html" target="_blank" rel="noopener">这篇文章</a></p></blockquote><h2 id="ssh登录到容器"><a href="#ssh登录到容器" class="headerlink" title="ssh登录到容器"></a>ssh登录到容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 36000 bingo@127.0.0.1</span><br></pre></td></tr></table></figure><blockquote><p>“127.0.0.1” 指宿主机的ip</p></blockquote><blockquote><p>-p 36000 指向宿主机的port</p></blockquote><h2 id="推到仓库，供以后重复使用"><a href="#推到仓库，供以后重复使用" class="headerlink" title="推到仓库，供以后重复使用"></a>推到仓库，供以后重复使用</h2><ol><li><p>在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> 上创建一个账号</p></li><li><p>登录仓库</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><blockquote><p>按提示输入账号密码</p></blockquote><ol start="3"><li>编译，指向自己的用户名username</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t username/ubuntu:dev.16.04 .</span><br></pre></td></tr></table></figure><ol start="4"><li>发布到hub</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image push username/ubuntu:dev.16.04</span><br></pre></td></tr></table></figure><blockquote><p>发布后，就可以在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> 看到刚发布的镜像文件了</p></blockquote><ol start="5"><li>下次需要的时候，就可以用以下命令拉取</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull username/ubuntu:dev.16.04</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;宿主机环境windows，从&lt;a href=&quot;https://store.docker.com/search?type=edit
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bitshares-witness节点结构之入口</title>
    <link href="https://mybestcool.github.io/2018/05/11/bitshares-witness-structure-entrance/"/>
    <id>https://mybestcool.github.io/2018/05/11/bitshares-witness-structure-entrance/</id>
    <published>2018-05-11T06:18:28.000Z</published>
    <updated>2018-05-12T04:06:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入口分成三个部分"><a href="#入口分成三个部分" class="headerlink" title="入口分成三个部分"></a>入口分成三个部分</h2><ul><li><p>main函数入口</p></li><li><p>主循环入口</p></li><li><p>网络消息入口</p></li></ul><h2 id="main函数入口"><a href="#main函数入口" class="headerlink" title="main函数入口"></a>main函数入口</h2><ul><li>成员结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">    1. app:application                                     - 应用</span><br><span class="line">        1. map&lt;string, app::abstract_plugin&gt;                   - 所有插件， 分激活的和能够支持的</span><br><span class="line">            1. witness_plugin::witness_plugin                      - 见证人</span><br><span class="line">                1. witness private_keys                                - 见证人私钥</span><br><span class="line">                2. witness ids                                         - 见证人ids</span><br><span class="line">                3. witness block schedule                              - 区块产生调度器</span><br><span class="line">            2. debug_witness_plugin::debug_witness_plugin          - 见证人调试,监听区块链事件</span><br><span class="line">            3. account_history::account_history_plugin             - 账号历史事件，监听区块链事件，并记录到object_database中</span><br><span class="line">            4. elasticsearch::elasticsearch_plugin                 - ES插件</span><br><span class="line">            5. market_history::market_history_plugin               - 市场历史</span><br><span class="line">            6. delayed_node::delayed_node_plugin                   - 延时节点</span><br><span class="line">            7. snapshot_plugin::snapshot_plugin                    - 快照</span><br><span class="line">            8. es_objects::es_objects_plugin                       - ES对象</span><br><span class="line">            9. grouped_orders::grouped_orders_plugin               - 命令组</span><br><span class="line">        2. chain::database                                     - 区块链</span><br><span class="line">            1. object_database                                     - 对象索引管理，chain::database继承自object_database</span><br><span class="line">                1. index[256][256]                                     - 对象索引</span><br><span class="line">                    1. index = primary_index&lt;witness_index&gt;                - 以下为举例</span><br><span class="line">                        1. witness_index = generic_index&lt;witness_object, witness_multi_index_type&gt;;</span><br><span class="line">                            1. witness_object = multi_index_container&lt;witness_object, </span><br><span class="line">                                    indexed_by&lt;</span><br><span class="line">                                        ordered_unique&lt; tag&lt;by_id&gt;,member&lt;object, object_id_type, &amp;object::id&gt;&gt;,</span><br><span class="line">                                        ordered_unique&lt; tag&lt;by_account&gt;,member&lt;witness_object, account_id_type, &amp;witness_object::witness_account&gt;&gt;,</span><br><span class="line">                                        ordered_unique&lt; tag&lt;by_vote_id&gt;,member&lt;witness_object, vote_id_type, &amp;witness_object::vote_id&gt;&gt;</span><br><span class="line">                                    &gt; &gt;;</span><br><span class="line">            2. block_database                                      - 区块数据库</span><br><span class="line">                1. _blocks                                              - 实际区块数据</span><br><span class="line">                2. _block_num_to_pos                                    - 区块索引数据</span><br><span class="line">        3. net::node                                           - p2p节点</span><br><span class="line">        4. websocket_server                                    - ws连接，api再连接里面</span><br><span class="line">        5. websocket_tls_server                                - wss连接，api再连接里面</span><br><span class="line">            1. websocket_connection_ptr</span><br><span class="line">                1. websocket_api_connection</span><br><span class="line">                    1. app::login_api</span><br><span class="line">        6. api_access                                          - api接口控制</span><br><span class="line">    2. bpo::variables_map                                  - 配置</span><br><span class="line">        1. bpo::options_description                            - 入口配置:argc,argv</span><br><span class="line">        2. bpo::options_description                            - 文件配置:data/config.ini</span><br><span class="line">    3. <span class="built_in">exit</span> signal                                         - 退出信号</span><br></pre></td></tr></table></figure><ul><li>启动顺序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">    1. app:register_plugin&lt;&gt;*9                - 注册9个插件</span><br><span class="line">    2. app_options:<span class="built_in">read</span>                       - 读取入口函数配置参数</span><br><span class="line">    3. cfg_options:<span class="built_in">read</span>                       - 读取配置文件参数</span><br><span class="line">    4. app:initialize                         - 初始化</span><br><span class="line">    5. app:initialize_plugins                 - 初始化插件</span><br><span class="line">    6. app:startup                            - 启动</span><br><span class="line">        1. chain::database:open                 - 启动区块链</span><br><span class="line">            1. db version check                     - 链版本检查</span><br><span class="line">            2. object_database:open                 - 对象数据读取，对应本地的object_database目录</span><br><span class="line">            3. block_database::open                 - 区块数据读取，对应本地的database目录</span><br><span class="line">            4. init_genesis                         - 初始化创世数据</span><br><span class="line">            5. reindex                              - 索引检查</span><br><span class="line">        2. <span class="built_in">set</span> allowed_apis                     - ws/wss等api权限设置</span><br><span class="line">        3. reset_p2p_node                       - 启动p2p网络</span><br><span class="line">        4. reset_websocket_server               - 启动ws网络</span><br><span class="line">        5. reset_websocket_tls_server           - 启动wss网络</span><br><span class="line">    7. app:startup_plugins                    - 启动插件</span><br><span class="line">        1. witness_plugin::plugin_startup       - 启动witness插件</span><br><span class="line">            1. dschedule_production_loop            - 启动区块产生的循环</span><br><span class="line">                1. witness_plugin::maybe_produce_block  - 根据条件来确认是否产生区块</span><br><span class="line">    8. <span class="built_in">wait</span> <span class="built_in">exit</span> signal                       - 等待退出信息，如ctrl+c</span><br><span class="line">    9. app:shutdown_plugins                   - 关闭所有插件</span><br><span class="line">    10. app:shutdown                          - 关闭</span><br></pre></td></tr></table></figure><h2 id="主循环入口"><a href="#主循环入口" class="headerlink" title="主循环入口"></a>主循环入口</h2><ul><li><p>见证人插件，内部循环会调用函数，条件是node为见证人节点、时序轮到自己等</p><ul><li>witness_plugin::maybe_produce_block</li></ul></li><li><p>Delay节点插件，定时从见证人节点获取已经落地的数据</p><ul><li>delayed_node_plugin::mainloop</li></ul></li></ul><h2 id="网络消息入口"><a href="#网络消息入口" class="headerlink" title="网络消息入口"></a>网络消息入口</h2><ul><li><p>p2p网络消息接收点</p><ul><li>有20多个协议，但业务主要用到trx_message_type，其下面有47个操作类型，如transfer_operation,limit_order_create_operation,limit_order_cancel_operation等</li><li>application下的application_impl::handle_transaction 为trx_message_type类消息的接受点</li><li>此消息的处理在witness_plugin::maybe_produce_block中</li></ul></li><li><p>ws/wss, http/https网络消息接收点</p><ul><li>login_api                         - websocket_api_connection 注册 login_api和database_api 接口<ul><li>block_api</li><li><strong>database_api</strong>                - 默认</li><li><strong>network_broadcast_api</strong>       - 默认</li><li>network_node_api</li><li><strong>history_api</strong>                 - 默认</li><li><strong>crypto_api</strong>                  - 默认</li><li>asset_api</li><li><strong>orders_api</strong>                  - 默认</li><li>graphene::debug_witness::debug_api</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;入口分成三个部分&quot;&gt;&lt;a href=&quot;#入口分成三个部分&quot; class=&quot;headerlink&quot; title=&quot;入口分成三个部分&quot;&gt;&lt;/a&gt;入口分成三个部分&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;main函数入口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主循环入口&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bitshares反射解析</title>
    <link href="https://mybestcool.github.io/2018/05/09/bitshares-reflect/"/>
    <id>https://mybestcool.github.io/2018/05/09/bitshares-reflect/</id>
    <published>2018-05-09T13:48:28.000Z</published>
    <updated>2018-05-09T13:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>反射，关键在理解宏BOOST_PP_SEQ_FOR_EACH，分成以下两类<ul><li>成员反射<ul><li>原理：生成一个reflector&lt;T>类，把T的成员转移到reflector&lt;T>中，并提供visit(visitor&amp;)接口访问，访问的时候遍列每个成员，且调用visitor.operator(const char* name)</li><li>应用<ul><li>variant：即可以把T转移到variant中，也可以从variant转移出来</li><li>序列化：pack、unpack</li></ul></li></ul></li><li>接口反射<ul><li>原理：生成一个vtable&lt;T,Transform>类，把T的成员函数转移到vtable&lt;T,Transform>中，转移成成员，并提供visit(visitor&amp;&amp;)接口访问，访问的时候遍列每个成员，调用方法有两类，且都可以修改memb<ul><li>visitor.operator()( const char* name, std::function&lt;R(Args…)>&amp; memb, MemberPtr m )，memb为成员，m为vistor的类的成员函数&amp;OtherType::elem</li><li>visitor.operator()( const char* name, std::function&lt;R(Args…)>&amp; memb )</li><li>使用：api&lt;interfaceT> apit(realT)，<ul><li>内部生成vtable&lt;T,Transform>实例，使用api->访问vtable&lt;T,Transform>的实例的“虚拟函数”</li><li>构造的时候，会调用visitor.operator()( const char* name, std::function&lt;R(Args…)>&amp; memb, MemberPtr m ),接口的真实地址变更到realT上</li></ul></li></ul></li><li>应用<ul><li>网络RCP调用，参数和返回值需要转化成variant</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;反射，关键在理解宏BOOST_PP_SEQ_FOR_EACH，分成以下两类&lt;ul&gt;
&lt;li&gt;成员反射&lt;ul&gt;
&lt;li&gt;原理：生成一个reflector&amp;lt;T&gt;类，把T的成员转移到reflector&amp;lt;T&gt;中，并提供visit(visitor&amp;amp;)接
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BTS UI钱包搭建以及接入到私有链</title>
    <link href="https://mybestcool.github.io/2018/05/09/bitshares-install-uiwallet/"/>
    <id>https://mybestcool.github.io/2018/05/09/bitshares-install-uiwallet/</id>
    <published>2018-05-09T07:55:40.000Z</published>
    <updated>2018-05-09T13:39:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li>参考文章-<a href="https://steemit.com/bitshares/@cm-steem/bitshares-ui-customization-guide" target="_blank" rel="noopener">比特股钱包定制</a></li><li>参考文章-<a href="https://github.com/bitshares/bitshares-ui/blob/staging/README_zh.md" target="_blank" rel="noopener">官方帮助MD</a></li></ul><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>系统ubuntu16.04</li><li>检查是否已经安装nvm，没有则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>安装node</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install v6</span><br><span class="line">nvm use v6</span><br></pre></td></tr></table></figure><p>本地切换只针对当前命令行窗口有效，新打开命令行，需要重新切换v6</p><h2 id="源码下载和安裝"><a href="#源码下载和安裝" class="headerlink" title="源码下载和安裝"></a>源码下载和安裝</h2><ul><li>下载和安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bitshares/bitshares-ui.git</span><br><span class="line"><span class="built_in">cd</span> bitshares-ui</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li><p>安装中如果遇到问题</p><p>  先安装cnpm</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后用cnpm安装所有的包。如果只有”electron”和”electron-builder”无法下载，可暂时删除依赖。</p><ul><li>启动服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>成功的话，会看到以下提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack: Compiled succeedfully.</span><br></pre></td></tr></table></figure><p>浏览器中输入以下命令查看运行情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><h2 id="配置和源码修改"><a href="#配置和源码修改" class="headerlink" title="配置和源码修改"></a>配置和源码修改</h2><ul><li>替换掉所有的货币名，搜索所有代码替换，包括js和node_modules/bitsharesjs-ws</li><li>修改node_modules/bitsharesjs-ws的chainid，路径node_modules/bitsharesjs-ws/es/src/ChainConfig.js和node_modules/bitsharesjs-ws/cjs/src/ChainConfig.js</li><li>修改链的地址和水龙头地址，路径app\api\apiConfig.js</li><li>修改交易对等，路径app\stores\SettingsStore.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> topMarkets = &#123;</span><br><span class="line">    markets_4018d784: [ <span class="comment">// BTS MAIN NET</span></span><br><span class="line">        <span class="string">"OPEN.MKR"</span>, <span class="string">"BTS"</span>, <span class="string">"OPEN.ETH"</span>, <span class="string">"ICOO"</span>, <span class="string">"BTC"</span>, <span class="string">"OPEN.LISK"</span>, <span class="string">"BKT"</span>,</span><br><span class="line">        <span class="string">"OPEN.STEEM"</span>, <span class="string">"OPEN.GAME"</span>, <span class="string">"OCT"</span>, <span class="string">"USD"</span>, <span class="string">"CNY"</span>, <span class="string">"BTSR"</span>, <span class="string">"OBITS"</span>,</span><br><span class="line">        <span class="string">"OPEN.DGD"</span>, <span class="string">"EUR"</span>, <span class="string">"GOLD"</span>, <span class="string">"SILVER"</span>, <span class="string">"IOU.CNY"</span>, <span class="string">"OPEN.DASH"</span>,</span><br><span class="line">        <span class="string">"OPEN.USDT"</span>, <span class="string">"OPEN.EURT"</span>, <span class="string">"OPEN.BTC"</span>, <span class="string">"CADASTRAL"</span>, <span class="string">"BLOCKPAY"</span>, <span class="string">"BTWTY"</span>,</span><br><span class="line">        <span class="string">"OPEN.INCNT"</span>, <span class="string">"KAPITAL"</span>, <span class="string">"OPEN.MAID"</span>, <span class="string">"OPEN.SBD"</span>, <span class="string">"OPEN.GRC"</span>, <span class="string">"YOURASSET"</span>,</span><br><span class="line">        <span class="string">"YOYOW"</span>, <span class="string">"HERO"</span>, <span class="string">"RUBLE"</span></span><br><span class="line">    ],</span><br><span class="line">    markets_39f5e2ed: [ <span class="comment">// TESTNET</span></span><br><span class="line">        <span class="string">"PEG.FAKEUSD"</span>, <span class="string">"YOURASSET"</span>, <span class="string">"BTWTY"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bases = &#123;</span><br><span class="line">    markets_4018d784: [ <span class="comment">// BTS MAIN NET</span></span><br><span class="line">        <span class="string">"USD"</span>, <span class="string">"OPEN.BTC"</span>, <span class="string">"CNY"</span>, <span class="string">"BTS"</span>, <span class="string">"BTC"</span>, <span class="string">"YOURASSET"</span></span><br><span class="line">    ],</span><br><span class="line">    markets_39f5e2ed: [ <span class="comment">// TESTNET</span></span><br><span class="line">        <span class="string">"TEST"</span>, <span class="string">"YOURASSET"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> defaults = &#123;</span><br><span class="line">            unit: [</span><br><span class="line">                CORE_ASSET,</span><br><span class="line">                <span class="string">"USD"</span>,</span><br><span class="line">                <span class="string">"CNY"</span>,</span><br><span class="line">                <span class="string">"BTC"</span>,</span><br><span class="line">                <span class="string">"EUR"</span>,</span><br><span class="line">                <span class="string">"YOURASSET"</span></span><br><span class="line">            ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="水龙头服务搭建"><a href="#水龙头服务搭建" class="headerlink" title="水龙头服务搭建"></a>水龙头服务搭建</h2><ul><li>参考<a href="https://steemit.com/bitshares/@baidang/66din5" target="_blank" rel="noopener">搭建比特股的水龙头注册服务</a>，写的很详细，最后总结了一些问题的处理办法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考地址&quot;&gt;&lt;a href=&quot;#参考地址&quot; class=&quot;headerlink&quot; title=&quot;参考地址&quot;&gt;&lt;/a&gt;参考地址&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考文章-&lt;a href=&quot;https://steemit.com/bitshares/@cm-steem/bi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>重装系统备忘</title>
    <link href="https://mybestcool.github.io/2018/05/03/coder-tools/"/>
    <id>https://mybestcool.github.io/2018/05/03/coder-tools/</id>
    <published>2018-05-03T07:33:11.000Z</published>
    <updated>2018-05-09T13:47:28.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>系统安装</li></ol><ul><li>使用win10企业版，激活使用DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</li></ul><ol start="2"><li>软件安装</li></ol><ul><li><p>通用工具</p><ul><li>百度网盘 同步文件</li><li>OneDrive 同步文件</li><li>QQ拼音 输入法</li><li>Chrome 浏览器，同步收藏夹等</li><li>ShadowsocksR-4.6.1-win 科学上网</li><li>腾讯桌面管理 桌面管理和快速搜索</li><li>Colver 文件浏览器</li><li>winrar 压缩解压工具</li><li>notepad++ 文本工具</li><li>有道笔记和有道翻译</li></ul></li><li><p>沟通软件</p><ul><li>TIM</li><li>微信</li><li>钉钉</li></ul></li><li><p>办公软件</p><ul><li>wps office</li><li>xmind</li><li>foxmail</li></ul></li><li><p>开发辅助工具</p><ul><li>bcompare 对比工具</li><li>cmder 命令行工具</li><li>navicat for mysql mysql访问工具</li><li>mRemoteNG 远程工具</li></ul></li><li><p>开发语言和工具</p><ul><li>git 版本管理工具</li><li>golang</li><li>python 2.7</li><li>cmake</li><li>vscode + 插件</li><li>vs2013 + VA + 其他插件</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;系统安装&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;使用win10企业版，激活使用DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;软件安装&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通用工
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bitshares vs2013 x64位 编译</title>
    <link href="https://mybestcool.github.io/2018/05/02/bitshares-vs2013/"/>
    <id>https://mybestcool.github.io/2018/05/02/bitshares-vs2013/</id>
    <published>2018-05-02T12:02:49.000Z</published>
    <updated>2018-05-02T12:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>windows编译bitshares</p><ul><li>前提：安装好vs2013-update5、cmake、git工具、<a href="http://www.stack.nl/~dimitri/doxygen/download.html" target="_blank" rel="noopener">doxygen工具</a>（非必须）,环境变量PATH有对应的EXE</li><li><p>目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- D:\_workdir\source</span><br><span class="line">- bitshares</span><br><span class="line">- bitshares-core</span><br><span class="line">- dependencies</span><br><span class="line">- boost_1_57_0</span><br><span class="line">- source</span><br><span class="line">- openssl-1.0.1u</span><br><span class="line">- zlib-1.2.11</span><br><span class="line">- curl-7.59.0</span><br><span class="line">- bin</span><br><span class="line">- include</span><br><span class="line">- lib</span><br><span class="line">- ssl</span><br></pre></td></tr></table></figure></li><li><p>编译openssl</p><ul><li>下载安装<a href="https://www.activestate.com/activeperl/downloads" target="_blank" rel="noopener">activePerl</a>，注意环境变量PATH</li><li>下载安装<a href="https://www.nasm.us/pub/nasm/releasebuilds/2.13.03/win64/" target="_blank" rel="noopener">nasm</a>，注意环境变量PATH</li><li>下载<a href="https://www.openssl.org/source/old/1.0.1/" target="_blank" rel="noopener">openssl源码，版本最好选择1.0.1，切勿选择大于1.0.2的版本</a></li><li>打开vs2013 x64 本机工具命令提示，输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd D:\_workdir\source\dependencies\source\openssl-1.0.1u</span><br><span class="line">perl Configure VC-WIN64A --prefix=D:\_workdir\source\dependencies</span><br><span class="line">ms\do_win64a</span><br><span class="line">nmake -f ms\nt.mak</span><br><span class="line">nmake -f ms\nt.mak install</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编译zlib</p><ul><li>下载<a href="http://zlib.net/" target="_blank" rel="noopener">zlib源码，选择的是1.2.11版本</a></li><li>打开“contrib\vstudio\vc12\zlibvc.sln”，选择release和x64进行编译</li><li>编译成功后把“contrib\vstudio\vc12\x64\ZlibStatRelease\zlibstat.lib”复制到“dependencies\lib\zlib.lib”，把“D:_workdir\source\dependencies\source\zlib-1.2.11”的头文件“zlib.h、zconf.h”复制到“dependencies\include”目录</li></ul></li><li><p>编译curl</p><ul><li>下载<a href="">curl源码，选择的是7.59.0版本</a></li><li><p>打开vs2013 x64 本机工具命令提示，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\_workdir\source\dependencies\source\curl-7.59.0\winbuild</span><br><span class="line">nmake /f Makefile.vc mode=static VC=12 WITH_DEVEL=D:\_workdir\source\dependencies WITH_SSL=static WITH_ZLIB=static MACHINE=x64</span><br></pre></td></tr></table></figure></li><li><p>编译成功后把“dependencies\source\curl-7.59.0\builds\libcurl-vc12-x64-release-static-ssl-static-zlib-static-ipv6-sspi”的所有目录copy到“dependencies”下，libcurl.lib更名为curl.lib</p></li><li><p>修改curl.h头文件，在第109行加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define CURL_STATICLIB</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编译boost</p><ul><li>下载<a href="https://sourceforge.net/projects/boost/files/boost/1.57.0/" target="_blank" rel="noopener">1.57版本</a></li><li>打开vs2013 x64 本机工具命令提示，输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd D:\_workdir\source\dependencies\boost_1_57_0</span><br><span class="line">.\bootstrap.bat</span><br><span class="line">b2 stage --address-model=64 --toolset=msvc-12.0 --threading=muti --link=static</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编译bitshares</p><ul><li><p>下载源码，切换到最新版本。打开vs2013 x64 本机工具命令提示，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd D:\_workdir\source\bitshares</span><br><span class="line">git clone https://github.com/bitshares/bitshares-core</span><br><span class="line">cd bitshares-core</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">rem git checkout 2.0.180425 </span><br><span class="line">rem 注释掉这句，这个版本缺少一个文件</span><br></pre></td></tr></table></figure></li><li><p>重启系统，确保以上的PATH都生效</p></li><li><p>设置环境脚本setenv_x64.bat，放到bitshares-core目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">set GRA_ROOT=D:\_workdir\source\bitshares\bitshares-core</span><br><span class="line">set OPENSSL_ROOT=D:\_workdir\source\dependencies</span><br><span class="line">set OPENSSL_ROOT_DIR=%OPENSSL_ROOT%</span><br><span class="line">set OPENSSL_INCLUDE_DIR=%OPENSSL_ROOT%\include</span><br><span class="line">set BOOST_ROOT=D:\_workdir\source\dependencies\boost_1_57_0</span><br><span class="line">set PATH=%BOOST_ROOT%\stage\lib;%PATH%</span><br></pre></td></tr></table></figure></li><li><p>为了兼容windows版本，进行相应修改，见<a href="#2">以下内容</a></p></li><li><p>打开vs2013 x64 本机工具命令提示，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd D:\_workdir\source\bitshares\bitshares-core</span><br><span class="line">setenv_x64.bat</span><br><span class="line">cmake-gui</span><br></pre></td></tr></table></figure></li><li><p>配置cmake工程，</p><ul><li>设置source目录为：D:_workdir\source\bitshares\bitshares-core</li><li>设置输出目录为：D:_workdir\source\bitshares\bitshares-core\x64</li><li>点击Configure，在弹出框中，<ul><li>第一个下拉框 Specify the generator for this project 选 Visual Studio 12 2013 Win64</li><li>第二个输入框 Optional toolset to use (argument to -T) 留空</li><li>下面的单选框，选 Use default native compilers</li></ul></li><li>点 Finish ，然后等一会， Generate 按钮会亮起</li><li>点 Generate ，然后等一会， Open Project 按钮会亮起</li><li>点 Open Project ，会打开 Visual Studio</li></ul></li><li>开始编译，有可能遇到bigobj问题，再进行相应修改</li></ul></li></ul></li><li><p><span id="2">为兼容windows版本，需对bitshares源码进行以下相关修改</span></p><ul><li><p>bitshares源码修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/CMakeLists.txt b/CMakeLists.txt</span><br><span class="line">index 5e91e80b..e11f4c20 100644</span><br><span class="line">--- a/CMakeLists.txt</span><br><span class="line">+++ b/CMakeLists.txt</span><br><span class="line">@@ -2,6 +2,10 @@</span><br><span class="line">project( BitShares )</span><br><span class="line">cmake_minimum_required( VERSION 2.8.12 )</span><br><span class="line"></span><br><span class="line">+if(POLICY CMP0054)</span><br><span class="line">+  cmake_policy(SET CMP0054 NEW)</span><br><span class="line">+endif()</span><br><span class="line">+</span><br><span class="line">set( BLOCKCHAIN_NAME &quot;BitShares&quot; )</span><br><span class="line"></span><br><span class="line">set( CLI_CLIENT_EXECUTABLE_NAME graphene_client )</span><br><span class="line">diff --git a/libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp b/libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp</span><br><span class="line">index 2d381308..0d18e8b8 100644</span><br><span class="line">--- a/libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp</span><br><span class="line">+++ b/libraries/chain/include/graphene/chain/protocol/fee_schedule.hpp</span><br><span class="line">@@ -54,7 +54,7 @@ namespace graphene &#123; namespace chain &#123;</span><br><span class="line">FC_ASSERT( itr != parameters.end() );</span><br><span class="line">return itr-&gt;get&lt;account_create_operation::fee_parameters_type&gt;();</span><br><span class="line">&#125;</span><br><span class="line">-      typename account_create_operation::fee_parameters_type&amp; get(flat_set&lt;fee_parameters&gt;&amp; parameters)const</span><br><span class="line">+      account_create_operation::fee_parameters_type&amp; get(flat_set&lt;fee_parameters&gt;&amp; parameters)const</span><br><span class="line">&#123;</span><br><span class="line">auto itr = parameters.find( account_create_operation::fee_parameters_type() );</span><br><span class="line">FC_ASSERT( itr != parameters.end() );</span><br><span class="line">diff --git a/tests/cli/main.cpp b/tests/cli/main.cpp</span><br><span class="line">index b78bb835..a8a11023 100644</span><br><span class="line">--- a/tests/cli/main.cpp</span><br><span class="line">+++ b/tests/cli/main.cpp</span><br><span class="line">@@ -38,8 +38,12 @@</span><br><span class="line">#include &lt;fc/rpc/websocket_api.hpp&gt;</span><br><span class="line">#include &lt;fc/rpc/cli.hpp&gt;</span><br><span class="line"></span><br><span class="line">+#if defined _WINDOWS_ || defined WIN32</span><br><span class="line">+#include &quot;winsock2.h&quot;</span><br><span class="line">+#else</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/ip.h&gt;</span><br><span class="line">+#endif</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;boost/filesystem/path.hpp&gt;</span><br><span class="line">@@ -109,9 +113,14 @@ int get_available_port()</span><br><span class="line">sin.sin_family = AF_INET;</span><br><span class="line">sin.sin_port = 0;</span><br><span class="line">sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);</span><br><span class="line">-   if (bind(socket_fd, (struct sockaddr*)&amp;sin, sizeof(struct sockaddr_in)) == -1)</span><br><span class="line">+   if (::bind(socket_fd, (struct sockaddr*)&amp;sin, sizeof(struct sockaddr_in)) == -1)</span><br><span class="line">return -1;</span><br><span class="line">+</span><br><span class="line">+#if defined _WINDOWS_  || defined WIN32</span><br><span class="line">+   int len = sizeof(sin);</span><br><span class="line">+#else</span><br><span class="line">socklen_t len = sizeof(sin);</span><br><span class="line">+#endif</span><br><span class="line">if (getsockname(socket_fd, (struct sockaddr *)&amp;sin, &amp;len) == -1)</span><br><span class="line">return -1;</span><br><span class="line">return sin.sin_port;</span><br></pre></td></tr></table></figure></li><li><p>fc 源码修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/CMakeLists.txt b/CMakeLists.txt</span><br><span class="line">index c5ed733..4c957fe 100644                                                     </span><br><span class="line">--- a/CMakeLists.txt                                                              </span><br><span class="line">+++ b/CMakeLists.txt                                                              </span><br><span class="line">@@ -4,6 +4,10 @@                                                                  </span><br><span class="line">PROJECT( fc )                              </span><br><span class="line">CMAKE_MINIMUM_REQUIRED( VERSION 2.8.12 )     </span><br><span class="line"></span><br><span class="line">+if(POLICY CMP0054)                       </span><br><span class="line">+  cmake_policy(SET CMP0054 NEW)     </span><br><span class="line">+endif()                                       </span><br><span class="line">+ </span><br><span class="line">MESSAGE(STATUS &quot;Configuring project fc located in: $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&quot;)</span><br><span class="line">SET( CMAKE_AUTOMOC OFF )        </span><br><span class="line"></span><br><span class="line">diff --git a/src/asio.cpp b/src/asio.cpp</span><br><span class="line">index 1313ed7..f22da17 100644</span><br><span class="line">--- a/src/asio.cpp</span><br><span class="line">+++ b/src/asio.cpp</span><br><span class="line">@@ -106,11 +106,11 @@ namespace fc &#123;</span><br><span class="line">&#123;</span><br><span class="line">fc::thread::current().set_name(&quot;asio&quot;);</span><br><span class="line"></span><br><span class="line">-                 BOOST_SCOPE_EXIT(void)</span><br><span class="line">-                 &#123;</span><br><span class="line">-                   fc::thread::cleanup();</span><br><span class="line">-                 &#125;</span><br><span class="line">-                 BOOST_SCOPE_EXIT_END</span><br><span class="line">+                                //BOOST_SCOPE_EXIT(void)</span><br><span class="line">+                                //&#123;</span><br><span class="line">+                                       // fc::thread::cleanup();</span><br><span class="line">+                                //&#125;</span><br><span class="line">+                                //BOOST_SCOPE_EXIT_END</span><br><span class="line"></span><br><span class="line">while (!io-&gt;stopped())</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure></li><li><p>以下cpp文件添加“/bigobj”编译属性，可能不同机器不一样，最终按编译提示来处理</p><ul><li>项目app_test<ul><li>bitshares-core\tests\app\main.cpp</li></ul></li><li>项目chain_bench<ul><li>bitshares-core\tests\common\database_fixture.cpp</li></ul></li><li>项目chain_test<ul><li>bitshares-core\tests\common\database_fixture.cpp</li></ul></li><li>项目cli_test<ul><li>bitshares-core\tests\cli\main.cpp</li></ul></li><li>项目cli_wallet<ul><li>bitshares-core\programs\cli_wallet\main.cpp</li></ul></li><li>项目performance_test<ul><li>bitshares-core\tests\common\database_fixture.cpp</li></ul></li><li>项目witness_node<ul><li>bitshares-core\programs\witness_node\main.cpp</li></ul></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;windows编译bitshares&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提：安装好vs2013-update5、cmake、git工具、&lt;a href=&quot;http://www.stack.nl/~dimitri/doxygen/download.html&quot; ta
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>比特股环境部署-私链</title>
    <link href="https://mybestcool.github.io/2018/04/27/bitshares-deploy/"/>
    <id>https://mybestcool.github.io/2018/04/27/bitshares-deploy/</id>
    <published>2018-04-27T07:25:23.000Z</published>
    <updated>2018-05-03T06:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取可执行文件"><a href="#获取可执行文件" class="headerlink" title="获取可执行文件"></a><strong>获取可执行文件</strong></h2><ul><li>windows<ul><li>从<a href="https://github.com/bitshares/bitshares-core/releases" target="_blank" rel="noopener">github</a>下载可执行文件即可</li></ul></li><li>其他系统<ul><li>从<a href="https://github.com/bitshares/bitshares-core" target="_blank" rel="noopener">github</a>下载源码，根据其<a href="https://github.com/bitshares/bitshares-core/wiki" target="_blank" rel="noopener">wiki</a>的要求进行编译</li></ul></li></ul><h2 id="执行文件结构简介"><a href="#执行文件结构简介" class="headerlink" title="执行文件结构简介"></a><strong>执行文件结构简介</strong></h2><p><img src="https://steemitimages.com/DQmYMJGg6USuGY3DmMkbZT6rGwWcnBDKqLCUk7jxoec45kX/1.png" alt="image"></p><ul><li>witness_node<ul><li>通过 P2P 方式连接到 BTS 网络，从网络接收最新区块，向网络广播本地签署的交易包</li><li>通过 websocket + http rpc 的方式提供 API 供其他程序调用</li></ul></li><li>delayed_node<ul><li>通过 websocket 方式连接到 witness_node ，只包含不可回退的区块</li><li>通常情况下最新区块比 witness_node 落后一分钟，异常时可能会落后很多，但可保证不可回退</li><li>通过 websocket + http rpc 的方式提供 API 供其他程序调用，API清单与 witness_node 相同，但无法使用交易广播功能</li></ul></li><li>cli_wallet<ul><li>通过 websocket 方式连接到 witness_node 和 delayed_node 其中之一</li><li>管理钱包文件，钱包文件里包含经过加密的用户私钥，一个钱包文件可以包含多个私钥</li><li>提供交易签名功能，签名后通过 witness_node 向外广播</li><li>通过 http rpc 的方式提供 API 供其他程序调用</li><li>推荐交易所使用一个连接到 delayed_node 的 cli_wallet 来监测用户充值，使用另一个连接到 witness_node 的 cli_wallet 来处理用户提现请求</li></ul></li></ul><h2 id="私有链部署"><a href="#私有链部署" class="headerlink" title="私有链部署"></a><strong>私有链部署</strong></h2><h3 id="witness-node-部署"><a href="#witness-node-部署" class="headerlink" title="witness_node 部署"></a><strong>witness_node 部署</strong></h3><ol><li>生成创世块的json<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./witness_node --create-genesis-json &quot;my-genesis.json&quot;</span><br></pre></td></tr></table></figure></li></ol><p>工作目录下会生成一个文件：my-genesis.json</p><ol start="2"><li>启动见证人节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">witness_node -d data --genesis-json my-genesis.json --seed-nodes &quot;[]&quot;</span><br></pre></td></tr></table></figure></li></ol><ul><li>工作目录下会生成一个目录：data，结构为blockchain目录、logs目录、p2p目录、config.ini配置文件。</li><li>退出程序尽量不要强制关闭，按ctrl-c，等其优雅退出。数据损坏有可能需要重建索引（启动的时候使用–replay-blockchain参与）</li></ul><ol start="3"><li>配置config.ini，以下参数也可作为见证人节点的启动参数<ul><li>–rpc-endpoint rpc监听端口，配置成”127.0.0.1:8090”（配置文件中不带引号）</li><li>–enable-stale-production 让本节点无视区块链数据的时间，无论如何都生成区块数据，配置成”true”</li><li>–witness-id（启动参数时可写作-w） 本节点控制的witness列表，(1.6.0-9)是默认的withness</li><li>–seed-nodes 要连接的peer列表(测试环境务必传此参数，不传的话会走代码里hardcode的正式网的peer列表，会导致测试节点去跟正式网络同步数据)(没有种子节点，一般用户等一年也不一定能连上网络。见证人对网络连接的要求更高，所以，必须与完整数据的种子节点相连，否则数据不完整的钱包会制造分叉)。配置成”[]”</li><li>–genesis-json 创世块的数据文件,配置成”my-genesis.json”</li><li>–track-account 参数的意思是我们只关心特别指定的账户的历史交易信息，其他账户的历史交易信息我不需要。这样就可以大大节省内存开支。</li></ul></li><li>再次启动见证人节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">witness_node -d data</span><br></pre></td></tr></table></figure></li></ol><p>参数-d data 与 –data-dir data是一样的</p><h3 id="delayed-node-部署"><a href="#delayed-node-部署" class="headerlink" title="delayed_node 部署"></a><strong>delayed_node 部署</strong></h3><ol><li>与 witness_node 雷同</li></ol><h3 id="cli-wallet-部署"><a href="#cli-wallet-部署" class="headerlink" title="cli_wallet 部署"></a><strong>cli_wallet 部署</strong></h3><ol><li>启动钱包节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cli_wallet --chain-id=&quot;97f304dce6fe30cccbdef37cd7899d349297a78ba483375adc3982016ef40c63&quot; -s ws://127.0.0.1:8090 -w my-wallet.json</span><br></pre></td></tr></table></figure></li></ol><ul><li>-s 或 –server-rpc-endpoint witness_node的地址和端口 </li><li>–chain-id 指的是服务的chain-id，可以不带此参数执行一次命令，程序的报错信息会显示这个id；witness_node启动成功后也会打印出这个id</li><li>-w 或 –wallet-file 指的是钱包文件</li></ul><ol start="2"><li>cli_wallet 钱包命令</li></ol><ul><li><p>创建钱包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new &gt;&gt;&gt; set_password 1111</span><br><span class="line">set_password 1111</span><br><span class="line">null</span><br><span class="line">locked &gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>解锁钱包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">locked &gt;&gt;&gt; unlock 1111</span><br><span class="line">unlock 1111</span><br><span class="line">null</span><br><span class="line">unlocked &gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>钱包导入用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; import_key nathan 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>nathan是在创世文件中定义的帐户名称，5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3是对应的私钥，在data目录下的config.ini中可以查到</p><ul><li>导入余额<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; import_balance nathan [&quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot;] true</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>导入的余额在创世文件中有配置，在initial_balances中，其中owner是指帐号nathan的地址。一个帐号包含三块内容，如nathan帐号{“private_key”:”5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3”,”public_key”:”BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV”,”address”:”BTSFAbAx7yuxt725qSZvfwWqkdCwp9ZnUama”}，而这三个由一组brain_priv_key（16个有序的英文单词）生成。</p><ul><li>查看账户信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; get_account nathan</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>查看账户余额</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; list_account_balances nathan</span><br></pre></td></tr></table></figure></li><li><p>升级会员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; upgrade_account nathan true</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>由于已知的缓存问题，您需要在这个阶段重新启动CLI，否则它将不知道nathan已经升级了。按Ctrl-C命令停止钱包，然后再次使用相同的命令之前启动它。</p></blockquote><blockquote><p>然后用get_account nathan查看，看到”membership_expiration_date”已经从”1970-01-01T00:00:00” 变成了 “1969-12-31T23:59:59”，意味着升级成功了。</p><ul><li>创建帐号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">locked &gt;&gt;&gt; suggest_brain_key</span><br><span class="line">suggest_brain_key</span><br><span class="line">&#123;</span><br><span class="line">  &quot;brain_priv_key&quot;: &quot;BECURSE VALGOID DEFROCK GODKIN SWITHER WORTH SUIFORM DAKER IPSEAND UPPERER PSALM UNCAST DOTTILY BEFRIZ SCUT BRONC&quot;,</span><br><span class="line">  &quot;wif_priv_key&quot;: &quot;5KZmzKmP8869Tw26nBTtYzGM4vW55mH9R9ZTeK9wPiTeX495rbn&quot;,</span><br><span class="line">  &quot;pub_key&quot;: &quot;BTS7KuKh66CdWb1pTRg414ocVXGDQLnrRtJDd4srevt6MRmQPd8Gg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>首先生成新账户的信息。 通过使用suggest_brain_key命令来完成它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; create_account_with_brain_key &quot;BECURSE VALGOID DEFROCK GODKIN SWITHER WORTH SUIFORM DAKER IPSEAND UPPERER PSALM UNCAST DOTTILY BEFRIZ SCUT BRONC&quot; alpha nathan nathan true</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>创建帐号的创建者有两个条件，1.必须是终生会员身份（LTM）；2.有足够的余额提供注册费用</p><ul><li>转账<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; transfer nathan alpha 2000000000 BTS &quot;here is some cash&quot; true</span><br></pre></td></tr></table></figure></li></ul></blockquote><ol start="3"><li>其他钱包<ul><li>网页钱包<ul><li>官方钱包:<a href="https://wallet.bitshares.org" target="_blank" rel="noopener">https://wallet.bitshares.org</a></li><li>Transwiser支持钱包： <a href="https://bts.transwiser.com" target="_blank" rel="noopener">https://bts.transwiser.com</a></li><li>DACPLAY支持钱包：<a href="https://bitshares.dacplay.org" target="_blank" rel="noopener">https://bitshares.dacplay.org</a></li><li>比特帝国支持钱包：<a href="https://bit.btsabc.org" target="_blank" rel="noopener">https://bit.btsabc.org</a></li><li>OpenLedger支持钱包：<a href="https://bitshares.openledger.info" target="_blank" rel="noopener">https://bitshares.openledger.info</a></li></ul></li><li>客户端钱包<ul><li>官方钱包:<a href="https://bitshares.org/download/" target="_blank" rel="noopener">https://bitshares.org/download/</a></li></ul></li><li>命令行钱包<ul><li>witness_node</li><li>curl:curl -d ‘{“jsonrpc”: “2.0”, “method”: “info”, “params”: [], “id”: 1}’ <a href="http://localhost:8090" target="_blank" rel="noopener">http://localhost:8090</a> <a href="http://127.0.0.1:8093/rpc" target="_blank" rel="noopener">http://127.0.0.1:8093/rpc</a></li></ul></li></ul></li></ol><h3 id="添加新的witness-node"><a href="#添加新的witness-node" class="headerlink" title="添加新的witness_node"></a><strong>添加新的witness_node</strong></h3><ol><li>使用get_dev_key创建见证人帐号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">programs/genesis_util/get_dev_key BTS w1</span><br></pre></td></tr></table></figure></li></ol><p>运行以上命令会生成一对秘钥对和地址</p><blockquote><p>[{“private_key”:”5JjzogP6V1TciYQHthBLPnmj5cyrYLfwfoDeY6rpG4mcNUd7hDq”,”public_key”:”BTS6WqFcNmb8DA8SG2HJDL23TzSKk67HrCf6qTeqXhbCcohi11epm”,”address”:”BTSMZq4SyNoFGraCNuV5ZjbJHMvcYBLSV3rM”},</p></blockquote><blockquote><p>如果要修改创世文件的密钥对，修改以下字段initial_accounts、initial_balances、initial_witness_candidates（见证人）、initial_committee_candidates（委员会）</p></blockquote><ol start="2"><li>使用cli_wallet创建见证人帐号</li></ol><p>使用cli_wallet创建一个帐号w2，保证其有一定余额，并将其升级成终生会员。记录公钥私钥。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">locked &gt;&gt;&gt; suggest_brain_key</span><br><span class="line">unlocked &gt;&gt;&gt; create_account_with_brain_key &quot;BECURSE VALGOID DEFROCK GODKIN SWITHER WORTH SUIFORM DAKER IPSEAND UPPERER PSALM UNCAST DOTTILY BEFRIZ SCUT BRONC&quot; w2 nathan nathan true</span><br><span class="line">unlocked &gt;&gt;&gt; transfer nathan w2 2000000000 BTS &quot;here is some cash&quot; true</span><br><span class="line">unlocked &gt;&gt;&gt; upgrade_account nathan true</span><br></pre></td></tr></table></figure></p><blockquote><p>详细见 cli_wallet 命令</p></blockquote><ol start="3"><li>成为见证人-配置创世文件（对应1）</li></ol><p>修改创世文件的对应的字段，如initial_accounts、initial_balances、initial_witness_candidates（见证人）、initial_committee_candidates（委员会）</p><ol start="4"><li>成为见证人-admin帐号使用客户端申请（对应2）<br>在cli_wallet客户端中，创建witness对象，参考<a href="https://github.com/cryptonomex/graphene/wiki/CLI-Wallet-Cookbook" target="_blank" rel="noopener">wiki</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; create_witness w2 &quot;http://url-to-proposal&quot; true //url-to-proposal可为空</span><br></pre></td></tr></table></figure></li></ol><p>在cli_wallet客户端中，用admin帐号投票<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; vote_for_witness admin w2 true true</span><br></pre></td></tr></table></figure></p><blockquote><p>投票成功之后，等待下次maintenance（通常是第二天0点）就可以看到我们的witness已经进入列表了，使用以下命令查询witness列表（get_global_properties）</p></blockquote><ol start="4"><li>配置和启动<ul><li>把公钥和私钥配置到data/config.ini文件中（private-key = [PublicKey, WIF private key]）</li><li>将witness-id加入config.ini(witness-id = “1.6.12”)</li><li>重启witness节点,注意seed-nodes的配置</li></ul></li></ol><h3 id="网页钱包部署"><a href="#网页钱包部署" class="headerlink" title="网页钱包部署"></a>网页钱包部署</h3><ol><li><a href="https://www.jianshu.com/p/72396c43c906" target="_blank" rel="noopener">Web钱包搭建</a></li><li><a href="https://www.jianshu.com/p/a89b3835d4e8" target="_blank" rel="noopener">水龙头服务搭建</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;获取可执行文件&quot;&gt;&lt;a href=&quot;#获取可执行文件&quot; class=&quot;headerlink&quot; title=&quot;获取可执行文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;获取可执行文件&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;windows&lt;ul&gt;
&lt;li&gt;从&lt;a href=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ethereum-theory</title>
    <link href="https://mybestcool.github.io/2018/04/19/ethereum-theory/"/>
    <id>https://mybestcool.github.io/2018/04/19/ethereum-theory/</id>
    <published>2018-04-19T14:12:27.000Z</published>
    <updated>2018-04-19T14:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区块链核心理论"><a href="#区块链核心理论" class="headerlink" title="区块链核心理论"></a>区块链核心理论</h2><ul><li><a href="https://www.youtube.com/watch?v=bBC-nXj3Ng4" target="_blank" rel="noopener">账本-信任+密码学=加密货币（视频地址）</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="noopener">区块链入门教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/01/bitcoin-tutorial.html" target="_blank" rel="noopener">比特币入门教程</a></li></ul><h3 id="账本（Ledger）"><a href="#账本（Ledger）" class="headerlink" title="账本（Ledger）"></a>账本（Ledger）</h3><ol><li>账本记录如：<ul><li>A pays B ￥40</li><li>C pays A ￥60</li><li>……</li></ul></li><li>记录可伪造，所以需要加签名<ul><li><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">非对称加密</a>：公钥（pk）和私钥（sk）</li><li>用户帐号：Acc(pk)=Account</li><li>签名：Sign(Message,sk)=Signature，将签名放到账本记录上</li><li>签名验证：Verify(Message,Signature,pk) = T/F，公钥解密签名，得到的Message HASH值并与账本记录Message做HASH比较。</li><li>签名使用AES-256</li></ul></li><li>记录可复制<ul><li>给每条记录添加一个唯一编号</li></ul></li><li>不足扣则不记录</li><li>最终账本记录如下：<ul><li><ol><li>A pays B ￥40 (A’s Signature)</li></ol></li><li><ol start="2"><li>C pays A ￥60 (C’s Signature)</li></ol></li></ul></li></ol><h3 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h3><ol><li>P2P 网络</li><li>工作量证明机制（PoW,Proof of Work）<ol><li>算法：SHA256(Message,RandomValue)=HashValue,改变Message的一小部份，则HashValue完全不一样，它具有散列性和不可预测性，且无法逆向。HashValue长度256位。</li><li>工作量：当RandomValue不同时，HashValue完全不一样，而区块链协议要求算出的区块的HashValue前30位为0（即尝试10E次），且随着时间，这个值会变大，则更加难易计算。 </li><li>P2P网络中的所有节点信任这个算法，这算法即共识算法。那么这个按此算法产生的区块整个网络都认可。</li><li>区块创建者会得到一笔奖励，起初是50，后续逐渐减半减少，减少到0为止。以BTC举例<ul><li>09.01 - 12.11     50BTC</li><li>12.11 - 16.07     25BTC</li><li>16.07 - 20.02     12.5BTC</li><li>20.02 - 23.09     6.25BTC      </li></ul></li><li>区块产生时间：<ul><li>BTC：10min</li><li>ETH：15sec</li><li>XRP：3.5sec</li><li>LTC：2.5min</li></ul></li></ol></li><li>账本一旦写入不能被修改。<ol><li>所有区块使用默克尔树连接在一起，新的区块在后面，则导致整个区块不能修改。</li></ol></li><li>当有两个或者多个节点创建出区块时，都添加到上一区块上，导致区块分叉。分叉后以区块链长的分支为准，同时取消掉其他分支。</li><li>伪造账单，会导致区块链分叉。但如果算力小于整个网络的50%，那么最终会被正确的区块链取消。</li></ol><h2 id="以太坊核心概念"><a href="#以太坊核心概念" class="headerlink" title="以太坊核心概念"></a>以太坊核心概念</h2><ul><li><a href="http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html" target="_blank" rel="noopener">以太坊开发入门</a></li><li><a href="https://www.youtube.com/watch?v=66SaEDzlmP4" target="_blank" rel="noopener">V神演讲-25分钟理解以太坊</a></li><li><a href="https://ethfans.org/posts/Ethereum-in-25-minites-vision-2017-1" target="_blank" rel="noopener">对应中文翻译-上</a></li><li><a href="https://ethfans.org/posts/25-minutes-in-Ethereum-vision-2017-2" target="_blank" rel="noopener">对应中文翻译-下</a></li><li>以太坊HASH算法：<a href="https://ethereum.stackexchange.com/questions/550/which-cryptographic-hash-function-does-ethereum-use" target="_blank" rel="noopener">KECCAK-256</a></li><li>分叉协议：GHOST协议(GHOST protocol)=(Greedy Heaviest Observed Subtree)</li></ul><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><ol><li>一个合约是一个帐号，它成为消息的目标，那么合约就会被调用。调用者可以是外部帐号，也可以是其他合约帐号。</li><li>合约代码运行在EVM上，并分布到整个网络每个节点</li><li>合约代码一旦发布，不可变，且永久存在</li><li>合约代码过程中状态的存储，是不可变的</li><li>智能合约开发语言：<ol><li><a href="https://solidity.readthedocs.io/en/latest/" target="_blank" rel="noopener">Solidity</a>,类JS语言，其开发的合约可以用<a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">Remix IDE</a>快速验证。官方推荐。</li><li>LLL，类Lisp语言，与<a href="https://github.com/ethereum/solidity" target="_blank" rel="noopener">Solidity</a>同一仓库</li><li><a href="https://github.com/ethereum/serpent/tree/develop" target="_blank" rel="noopener">Serpent</a>，类Python语言</li></ol></li><li><a href="https://github.com/ConsenSys/smart-contract-best-practices" target="_blank" rel="noopener">智能合约最佳实践</a></li></ol><h3 id="DApp"><a href="#DApp" class="headerlink" title="DApp"></a>DApp</h3><ol><li>定义：相当于C/S或B/S结构中的S端，一部分放在以太坊上，由运行于以太坊网络上一个或多个智能合约的组成；另一部分可以是我们现在意义上的服务端。</li><li>DApp并不把所有的状态都存储在区块链上，也不把所有的计算都放在区块链上，不然话费的Gas量太大。只把大家需要信任的东西放到区块链上。</li></ol><h3 id="DApp客户端"><a href="#DApp客户端" class="headerlink" title="DApp客户端"></a>DApp客户端</h3><ol><li>定义：相当于C/S或B/S结构中的C端或者B端。区别在于它们可能与区块链交互，也有可能与我们自己服务端交互。目前大多数的客户端用JS编写，因为可以运行在浏览器中。当然也可以用其他语言来编写。nodejs中有meteor工具来辅助开发。</li></ol><h3 id="DApp浏览器"><a href="#DApp浏览器" class="headerlink" title="DApp浏览器"></a>DApp浏览器</h3><ol><li>用来让DApp客户端（常常使用JS与以太坊的智能合约进行交互）的使用更加容易。</li><li>主要目的：<ol><li>提供到一个以太坊节点的连接（或者连接到一个本地节点或者远程节点），和一个方便的切换不同节点（甚至是不同的网络）。</li><li>提供一个帐户（或者一个钱包）来方便用户与DApp交互。</li></ol></li><li>目前有哪些浏览器<ol><li><a href="https://github.com/ethereum/mist" target="_blank" rel="noopener">Mist</a>是以太坊官方的DApp浏览器。一个漂亮的界面来与以太坊节点交互，与智能合约发、收交易。</li><li><a href="https://status.im/" target="_blank" rel="noopener">Status</a>是一个手机上可以使用的DApp浏览器.</li><li><a href="https://metamask.io/" target="_blank" rel="noopener">MetaMask</a>是一个Google浏览器扩展，把Chrome变成了一个DApp浏览器。它的核心特性是注入以太坊提供的js客户端库web3，到每一个界面，来让DApp连接到MetaMask提供的以太坊节点服务。不过这个Chrome扩展，可以允许你管理你的钱包，以及连接到不同的以太坊网络（译者注：包括本地的开发网络）。</li><li><a href="https://parity.io/parity.html" target="_blank" rel="noopener">Parity</a>是一个以太坊客户端（也是一个全节点的实现），集成到了Web浏览器，并使之成为一个DApp浏览器</li></ol></li></ol><h3 id="GAS"><a href="#GAS" class="headerlink" title="GAS"></a>GAS</h3><ol><li>定义：以太坊上每一次计算和存储所需要的费用，这个费用用gas来支付。它是用来衡量在一个具体计算中要求的费用单位。gas price就是你愿意在每个gas上花费Ether的数量，以“gwei”进行衡量。“Wei”是Ether的最小单位，1Ether=10^18Wei，1gwei=1,000,000,000 Wei。gas limit代表用户愿意花费在gas上费用的最大值。<br><img src="https://lilymoana.github.io/asset/eth_price.png" alt="image"></li><li>作用：<ol><li>防止死循环（因为以太坊的智能合约是图灵完备的）</li><li>防止以太坊超负荷</li><li>Gas限制是比特币上区块大小限制的对应物.目前的Gas上限是6.7百万gwei</li></ol></li></ol><h3 id="账户（对应以太坊白皮书）"><a href="#账户（对应以太坊白皮书）" class="headerlink" title="账户（对应以太坊白皮书）"></a>账户（对应以太坊白皮书）</h3><ol><li>账户分类：<ol><li>外部账户：被用户（私钥）控制的账户</li><li>合约账户：是由运行在区块链自身上的代码（合约）来控制的，即被整个区块链控制。</li></ol></li><li>账户状态：<ul><li>State consists of key value mapping addressed to account objects</li><li>Every account objest contains 4 pieces of data:<ul><li>Nonce:如果账户是一个外部拥有账户，nonce代表从此账户地址发送的交易序号。如果账户是一个合约账户，nonce代表此账户创建的合约序号</li><li>Balance:此地址拥有Wei的数量。1Ether=10^18Wei</li><li>Code hash(code = empty string for private key-controlled accounts ):此账户EVM代码的hash值。对于合约账户，就是被Hash的代码并作为codeHash保存。对于外部拥有账户，codeHash域是一个空字符串的Hash值</li><li>Storage trie root:Merkle Patricia树的根节点Hash值。Merkle树会将此账户存储内容的Hash值进行编码，默认是空值</li></ul></li></ul></li><li>账户之间的关系</li></ol><ul><li>消息由外部帐号发起，合约账户不能成为消息的发起者<br><img src="https://lilymoana.github.io/asset/eth_transationset.png" alt="image"></li></ul><h3 id="Coin和Token"><a href="#Coin和Token" class="headerlink" title="Coin和Token"></a>Coin和Token</h3><ol><li>Coin，是区块链的原生货币，有自己的区块链，如BTC、LTC</li><li>Token，特定的资产或者某种效力，通常以现有的一个区块链为基础。大多数的以太坊的ERC20/ERC23代币都是协议代币</li><li>两者都是Cryptocurrencies</li></ol><h3 id="网络，节点，区块"><a href="#网络，节点，区块" class="headerlink" title="网络，节点，区块"></a>网络，节点，区块</h3><ol><li>网络<ol><li>Mainnet-以太坊主网，通常是所有客户端的默认网络。</li><li>Ropsten - 以太坊使用工作量证明的主测试网络。这个网络，因为低的计算量，容易遭到DDOS攻击，分片，或者其它问题。垃圾邮件攻击后被暂时放弃，最近才恢复使用。</li><li>Kovan-parity客户端组成的测试网络，使用授权证明来提升对垃圾邮件攻击的抗扰度，并且持续4秒的阻塞时间。</li><li>Rinkeby-geth客户端组成的测试网络，使用集团共识，尽管计算量低，但是对恶意行为者更有弹性。</li></ol></li><li>节点<ol><li>定义：为区块链网络中的一台电脑（简单理解的话，再详细点是指那个区块链进程）存放了整个区块链的数据。节点分成全节点（有完整的数据）和轻节点。可以通过geth来运行一个全节点（官方的节点，go语言），或者parity来运行一个轻节点。</li></ol></li><li>区块<ol><li>区块包含：<ol><li>区块头<ul><li>parentHash：父区块头的Hash值（这也是使得区块变成区块链的原因）</li><li>ommerHash：当前区块ommers列表的Hash值</li><li>beneficiary：接收挖此区块费用的账户地址</li><li>stateRoot：状态树根节点的Hash值</li><li>transactionsRoot：包含此区块所有交易的Merkle树的根节点Hash值</li><li>receiptsRoot：包含此区块所有交易收据的Merkle树的根节点Hash值</li><li>logsBloom：由日志信息组成的一个Bloom过滤器 (一种数据结构)</li><li>difficulty： 此区块的难度级别</li><li>number：当前区块的计数（创世纪块的区块序号为0，对于每个后续区块，区块序号都增加1）</li><li>gasLimit：每个区块的当前gas limit</li><li>gasUsed： 此区块中交易所用的总gas量</li><li>timestamp：此区块成立时的unix的时间戳</li><li>extraData：与此区块相关的附加数据</li><li>mixHash：一个Hash值，当与nonce组合时，证明此区块已经执行了足够的计算</li><li>nonce：一个Hash值，当与mixHash组合时，证明此区块已经执行了足够的计算<br><img src="https://lilymoana.github.io/asset/eth_blockheaders.png" alt="image"></li></ul></li><li>关于包含在此区块中的交易集信息</li><li>与当前区块的ommers相关的一些列其他区块头</li></ol></li></ol></li></ol><h3 id="开发工具和开发库"><a href="#开发工具和开发库" class="headerlink" title="开发工具和开发库"></a>开发工具和开发库</h3><ol><li>发布框架<ol><li><a href="http://truffleframework.com/docs/getting_started" target="_blank" rel="noopener">Truffle框架</a> &amp; <a href="https://blog.zeppelin.solutions/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05" target="_blank" rel="noopener">Truffle教程</a></li><li><a href="https://github.com/iurimatias/embark-framework" target="_blank" rel="noopener">Embark框架</a></li></ol></li><li>去中心化的智能合约包管理资源库<ol><li><a href="https://www.ethpm.com/registry" target="_blank" rel="noopener">ETHP</a> &amp; <a href="https://github.com/ethereum/EIPs/issues/190" target="_blank" rel="noopener">使用教程</a></li></ol></li><li>反编译智能合约/Disassembly<ol><li>可以通过<a href="https://github.com/comaeio/porosity" target="_blank" rel="noopener">prosity</a>来反编译以太坊智能合约的字节码，可以使用<a href="https://github.com/Arachnid/evmdis" target="_blank" rel="noopener">evmdis</a>来Disassembly。</li></ol></li><li><a href="https://github.com/ethereum/go-ethereum/wiki/Whisper-Overview" target="_blank" rel="noopener">Whisper</a>是一个集成进以太坊的消息系统。它允许DApp发布小量的信息来进行非实时的消息通信。使用ssh协议。<a href="https://github.com/ethereum/meteor-dapp-whisper-chat-client" target="_blank" rel="noopener">一个使用Whisper协议实现一个聊天客户端的例子</a></li><li><a href="https://openzeppelin.org/" target="_blank" rel="noopener">Open Zeppelin</a>是一系列经过审查的，最佳的智能合约实践，你可以继承并应用于你自己的DApp中。<a href="https://github.com/OpenZeppelin/zeppelin-solidity" target="_blank" rel="noopener">github学习资源</a></li></ol><h3 id="应用项目"><a href="#应用项目" class="headerlink" title="应用项目"></a>应用项目</h3><ol><li><a href="https://github.com/slockit/DAO/" target="_blank" rel="noopener">去中心自动化组织</a></li><li><a href="https://aragon.one/" target="_blank" rel="noopener">Aragon</a>设计一个根据智能合约逻辑运作的公司，重点是创建一个可以接受投资，处理会计，支付雇员，分配股权，正如我们现在知道的完成每天的公司的业务。他们也实现了漂亮的DApp客户端来让他们的协议使用起来更为简单。</li><li><a href="https://ipfs.io/" target="_blank" rel="noopener">IPFS</a>（星际文件系统）是一个协议，用来分发文件。</li><li><a href="https://filecoin.io/" target="_blank" rel="noopener">FileCoin</a>是Protocol Lab为创建一个去中心化的基于IPFS的存储市场的努力结果，也就是向整个网络提供存储资源的激励层</li><li><a href="https://swap.tech/" target="_blank" rel="noopener">Swarm</a>是一个去中心化的存储网络，集成于以太坊生态系统</li><li><a href="https://augur.net/" target="_blank" rel="noopener">Augur</a>是一个去中心化的预测市场，让大家对于某个现实世界的事件进行对赌</li><li><a href="https://gnosis.pm/" target="_blank" rel="noopener">Gnosis</a>与Augur有类似的理念，也是一个去中心化的预测市场</li><li><a href="https://golem.network/" target="_blank" rel="noopener">Golem</a>是一个分布式的算力市场</li><li>0xProject创建了一个交换代币的协议，以及一个DApp来实现这个协议。<br>10.<a href="https://district0x.io/" target="_blank" rel="noopener">district0x</a>是一个更高层级的去中心化的市场和社区。 </li><li><a href="https://www.uport.me/" target="_blank" rel="noopener">uPort</a>在解决去中心化的身份识别问题。</li></ol><h3 id="一些公司"><a href="#一些公司" class="headerlink" title="一些公司"></a>一些公司</h3><ol><li>ConsenSys（有点像共识Consensus，但作为一个公司名称;它很聪明，巧妙的把u改成了s，但我一般念为“con-SEn-SIS”，避免读错）是一个“风险投资和产品工作室”。他们是一个（其实非常大）伞形组织，它赞助了一大堆项目和核心组件的开发。值得一提的是，它们资助了Truffle，Infura，MetaMask，Gnosis和uPort。</li><li>Zeppelin Solutions在上面我们有提到过，他也审查智能合约代码，提供咨询服务。他们的<a href="https://blog.zeppelin.solutions/" target="_blank" rel="noopener">博客</a>质量相当高。</li><li>Protocol Labs是一群让人印象深刻的人，致力于IPFS，FileCoin，lip2p以及IPLD等其它项目的开发。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;区块链核心理论&quot;&gt;&lt;a href=&quot;#区块链核心理论&quot; class=&quot;headerlink&quot; title=&quot;区块链核心理论&quot;&gt;&lt;/a&gt;区块链核心理论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bBC
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>以太坊白皮书学习记录</title>
    <link href="https://mybestcool.github.io/2018/04/17/ethereum-wp/"/>
    <id>https://mybestcool.github.io/2018/04/17/ethereum-wp/</id>
    <published>2018-04-17T14:26:01.000Z</published>
    <updated>2018-04-19T14:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太币白皮书中文文档</a></p><h2 id="比特币的核心概念"><a href="#比特币的核心概念" class="headerlink" title="比特币的核心概念"></a>比特币的核心概念</h2><h3 id="作为状态转换系统的比特币"><a href="#作为状态转换系统的比特币" class="headerlink" title="作为状态转换系统的比特币"></a>作为状态转换系统的比特币</h3><ol><li><p>转换函数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPLY(S,TX) ­&gt; S&apos; or ERROR</span><br></pre></td></tr></table></figure><ul><li>转换函数解析：<ol><li>交易的每个输入：<ul><li>如果引用的UTXO不存在于现在的状态中（S），返回错误提示</li><li>如果签名与UTXO所有者的签名不一致，返回错误提示</li></ul></li><li>如果所有的UTXO输入面值总额小于所有的UTXO输出面值总额，返回错误提示</li><li>返回新状态S’,新状态S’中移除了所有的输入UTXO，增加了所有的输出UTXO</li></ol></li></ul></li><li><p>状态结构（UTXO:未花费的交易输出，unspent transaction outputs）,包含一个面值和所有者（由20个字节的本质上是密码学公钥的地址所定义[1]）。一笔交易包括一个或多个输入和一个或多个输出。每个输入包含一个对现有UTXO的引用和由与所有者地址相对应的私钥创建的密码学签名。每个输出包含一个新的加入到状态中的UTXO。</p></li></ol><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><ol><li>区块<ol><li>网络中的节点不断尝试把交易结果打包成“区块”</li><li>区块大约每十分钟产生一块</li><li>每个区块包含：时间戳、随机数、对上一个区块的引用（即hash值）、上一区块生成以来发生的所有交易列表。核对规则如下：<ul><li>检查区块引用的上一个区块是否存在且有效</li><li>检查区块的时间戳是否晚于以前的区块的时间戳，而且早于未来2小时</li><li>检查区块的工作量证明是否有效</li><li>将上一个区块的最终状态赋于S[0]</li><li>假设TX是区块的交易列表，包含n笔交易。对于属于0……n-1的所有i,进行状态转换S[i+1] = APPLY(S[i],TX[i])。如果任何一笔交易i在状态转换中出错，退出程序，返回错误。</li><li>返回正确，状态S[n]是这一区块的最终状态</li></ul></li></ol></li><li>矿工的作用和奖励<ol><li>使用共识算法“工作量证明”，即不停的创建区块，并设置区块的随机值等随机手段，然后hash这个区块，得出hash值是否小于2^190(190是随着比特币的增长，不断变小的值)，即为创建区块成功。创建区块者可以得到25BTC的奖励</li><li>矿工将交易打包到区块链。交易中的输入往往大于输出，差额部分就作为“交易费用”付给矿工。</li></ol></li></ol><h3 id="默克尔树"><a href="#默克尔树" class="headerlink" title="默克尔树"></a>默克尔树</h3><ol><li>定义：默克尔树是一种二叉树，由一组叶节点、一组中间节点和一个根节点构成。最下面的大量的叶节点包含基础数据，每个中间节点是它的两个子节点的哈希，根节点也是由它的两个子节点的哈希，代表了默克尔树的顶部。</li><li>特点：允许区块的数据可以零散地传送。节点可以从一个源下载区块头，从另外的源下载与其有关的树的其它部分，而依然能够确认所有的数据都是正确的</li></ol><h3 id="比特币智能合约的问题"><a href="#比特币智能合约的问题" class="headerlink" title="比特币智能合约的问题"></a>比特币智能合约的问题</h3><ol><li>缺少图灵完备</li><li>价值盲</li><li>缺少状态</li><li>区块链盲</li></ol><h2 id="以太坊的核心概念"><a href="#以太坊的核心概念" class="headerlink" title="以太坊的核心概念"></a>以太坊的核心概念</h2><h3 id="以太坊账户"><a href="#以太坊账户" class="headerlink" title="以太坊账户"></a>以太坊账户</h3><ol><li>以太坊状态：是由被称为“账户”的对象和在两个帐号之间转移价值和信息的状态转换构成</li><li>以太坊账户包含四个部分：<ol><li>随机数，用于确定每笔交易只能被处理一次的计数器</li><li>账户目前的以太币余额</li><li>账户的合约代码，如果有的话</li><li>账户的存储，默认为空</li></ol></li><li>分成两类账户：外部所有账户（私钥控制）、合约账户（合约代码控制）</li></ol><h3 id="消息和交易"><a href="#消息和交易" class="headerlink" title="消息和交易"></a>消息和交易</h3><ol><li>消息，类似于比特币的交易，但有三点不同<ol><li>以太坊的消息可以由外部实体或者合约创建，然而比特币的交易只能从外部创建</li><li>以太坊消息可以选择包含数据</li><li>如果以太坊消息的接受者是合约账户，可以选择进行回应，这意味着以太坊消息也包含函数概念</li></ol></li><li>交易是指存储的从外部账户发出的消息的签名数据包，包含<ol><li>to：消息的接收者</li><li>v,r,s:用于确认发送者的签名</li><li>value:从发送者转移到接收者Wei的数量。在合约创建交易中，value作为新建合约账户的开始余额</li><li>data（可选域，只有在消息通信中存在）:消息通信中的输入数据(也就是参数)。例如，如果智能合约就是一个域名注册服务，那么调用合约可能就会期待输入参数：域名和IP地址</li><li>STARTGAS值:发送者愿意为执行交易支付gas数量的最大值。此值设置之后在任何计算完成之前就会被提前扣掉</li><li>GASPRICE值:发送者愿意支付执行交易所需的每个gas的Wei数量</li><li>nonce：发送者发送交易数的计数</li><li>init（只有在合约创建交易中存在）：用来初始化新合约账户的EVM代码片段。init值会执行一次，然后就会被丢弃。当init第一次执行的时候，它返回一个账户代码体，也就是永久与合约账户关联的一段代码。</li></ol></li><li>创建合约有单独的交易类型和相应的消息类型；合约的地址是基于账号随机数和交易数据的哈希计算出来的</li></ol><h3 id="以太坊状态转换函数"><a href="#以太坊状态转换函数" class="headerlink" title="以太坊状态转换函数"></a>以太坊状态转换函数</h3><ol><li><p>状态转换函数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPLY(S,TX) ­&gt; S&apos; or ERROR</span><br></pre></td></tr></table></figure><ul><li>转换函数解析：<ol><li>检查交易的格式是否正确（即有正确数值）、签名是否有效和随机数是否与发送者账户的随机数匹配。如否，返回错误</li><li>计算交易费用:fee=STARTGAS * GASPRICE，并从签名中确定发送者的地址。从发送者的账户中减去交易费用和增加发送者的随机数。如果账户余额不足，返回错误</li><li>设定初值GAS = STARTGAS，并根据交易中的字节数减去一定量的瓦斯值</li><li>从发送者的账户转移价值到接收者账户。如果接收账户还不存在，创建此账户。如果接收账户是一个合约，运行合约的代码，直到代码运行结束或者瓦斯用完。</li><li>如果因为发送者账户没有足够的钱或者代码执行耗尽瓦斯导致价值转移失败，恢复原来的状态，但是还需要支付交易费用，交易费用加至矿工账户。</li><li>否则，将所有剩余的瓦斯归还给发送者，消耗掉的瓦斯作为交易费用发送给矿工</li></ol></li></ul></li></ol><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><ol><li>以太坊虚拟机：EVM</li><li>可以访问三种数据空间：堆栈、内存、合约的长期存储</li></ol><h3 id="区块链和挖矿"><a href="#区块链和挖矿" class="headerlink" title="区块链和挖矿"></a>区块链和挖矿</h3><ol><li>每个区块：不仅包含交易记录和最近的状态，还包含区块序号和难度值。核对规则如下<ol><li>检查区块引用的上一个区块是否存在和有效</li><li>检查区块的时间戳是否比引用的上一个区块大，而且小于15分钟</li><li>检查区块序号、难度值、 交易根，叔根和瓦斯限额（许多以太坊特有的底层概念）是否有效</li><li>检查区块的工作量证明是否有效</li><li>将S[0]赋值为上一个区块的STATE_ROOT</li><li>将TX赋值为区块的交易列表，一共有n笔交易。对于属于0……n-1的i，进行状态转换S[i+1] = APPLY(S[i],TX[i])。如果任何一个转换发生错误，或者程序执行到此处所花费的瓦斯（gas）超过了GASLIMIT，返回错误。</li><li>用S[n]给S_FINAL赋值, 向矿工支付区块奖励</li><li>检查S_FINAL是否与STATE_ROOT相同。如果相同，区块是有效的。否则，区块是无效的</li></ol></li><li>矿工的奖励，同比特币</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li>代币系统</li><li>金融衍生品和价值稳定的货币</li><li>身份和信誉系统</li><li>去中心化存储</li><li>去中心化资质组织</li><li>其他<ol><li>储蓄钱包</li><li>作物保险</li><li>一个去中心化的数据发布器</li><li>云计算</li><li>点对点赌博</li><li>预测市场</li><li>链上去中心化市场</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6&quot; target=&quot;_
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>区块链概况</title>
    <link href="https://mybestcool.github.io/2018/04/17/blockchain/"/>
    <id>https://mybestcool.github.io/2018/04/17/blockchain/</id>
    <published>2018-04-17T14:24:38.000Z</published>
    <updated>2018-04-19T14:07:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区块链的一些概念"><a href="#区块链的一些概念" class="headerlink" title="区块链的一些概念"></a>区块链的一些概念</h2><h3 id="区块链三要素"><a href="#区块链三要素" class="headerlink" title="区块链三要素"></a>区块链三要素</h3><ul><li>共享帐本</li><li>共识算法<ol><li>工作量证明机制（PoW,Proof of Work）</li><li>股权证明机制（PoS，Proof of Stake）</li><li>委托股权证明机制（DPos，Delegated Proof of Stake）</li><li>瑞波共识机制(Ripple Consensus)</li><li>实用拜占庭容错算法（Practical Byzantine Fault Tolerance）</li><li>恒星共识协议(Stellar Consensus Protocol)</li></ol></li><li>P2P网络</li></ul><h3 id="区块链类型"><a href="#区块链类型" class="headerlink" title="区块链类型"></a>区块链类型</h3><ul><li>公有链</li><li>私有链</li><li>联盟链</li></ul><h3 id="区块链应用方式"><a href="#区块链应用方式" class="headerlink" title="区块链应用方式"></a>区块链应用方式</h3><ul><li>密码学货币（Crypto Currency）</li><li>分布式账本（DTL，Distributed Ledger Technology）</li><li>智能合约（Smart Contract）</li></ul><h2 id="第一代区块链技术"><a href="#第一代区块链技术" class="headerlink" title="第一代区块链技术"></a>第一代区块链技术</h2><ul><li>bitcoin（比特币）– 推荐<ul><li>功能：密码学货币、几乎没有智能合约</li><li>类型：公有链</li><li>共识算法：工作量证明机制</li><li>开发语言：c++</li><li>状态：目前应用度高、扩展性差</li></ul></li></ul><h2 id="第二代区块链技术"><a href="#第二代区块链技术" class="headerlink" title="第二代区块链技术"></a>第二代区块链技术</h2><ul><li>bitshares（比特股）<ul><li>开发者：BM</li><li>功能：分布式账本，受限的智-能合约</li><li>类型：主要是公有链</li><li>共识算法：委托授权的权益证明机制</li><li>开发语言：c++</li><li>状态：没有形成核心团队</li></ul></li><li>ripple（瑞波币）<ul><li>功能：分布式账本，目前不支持智能合约</li><li>类型：主要是公有链</li><li>共识机制：瑞波共识机制</li><li>开发语言：c++</li><li>状态：致力于与银行合作</li></ul></li><li>HyperLedger（超级账本）<ul><li>功能：分布式账本、智能合约</li><li>类型：主要是联盟链</li><li>共识机制：实用拜占庭容错算法</li><li>开发语言：go、python</li><li>状态：致力于与金融行业</li></ul></li><li>ethereum（以太坊）– 推荐<ul><li>开发者：V神</li><li>功能：分布式账本、智能合约</li><li>类型：主要是公有链</li><li>共识算法：工作量证明机制，以后改成权益证明机制</li><li>开发语言：go</li><li>状态：目前应用度高、有明确规划<ul><li>myetherwallet 钱包：<a href="https://www.myetherwallet.com" target="_blank" rel="noopener">https://www.myetherwallet.com</a></li><li>eth交易历史查询：<a href="https://etherscan.io/" target="_blank" rel="noopener">https://etherscan.io/</a></li></ul></li></ul></li></ul><h2 id="第三代区块链技术"><a href="#第三代区块链技术" class="headerlink" title="第三代区块链技术"></a>第三代区块链技术</h2><ul><li>EOS – 推荐<ul><li>开发者：BM</li><li>类型：公有链</li><li>共识算法：DPOS，百万TPS</li><li>特点：<ul><li>可以跨链、角色权限管理</li><li>交易免费、EOS代币保值（DAPP的计算资源由其拥有的EOS代币量决定）</li><li>开发dapp简易</li></ul></li><li>状态<ul><li>目前还没有开发完成，但已在以太坊发币</li><li>EOS官网：<a href="http://eos.io" target="_blank" rel="noopener">http://eos.io</a></li><li>EOS代币发行历史查看：<a href="http://eoschart.com/?lang=zh" target="_blank" rel="noopener">http://eoschart.com/?lang=zh</a></li></ul></li><li>购买方式<ol><li>在加密货币平台上，如OTCBTC上用支付宝购买一些ETH，100rmb左右</li><li>使用chrome浏览器，安装MetaMask，并注册帐号</li><li>将从OTCBTC平台上购买的货币转移到MetaMask帐号</li><li>在EOS官网众筹EOS币，到第二天取出EOS币，并转移到MetaMask帐号</li></ol></li></ul></li><li>IOTA</li><li>Cardano</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;区块链的一些概念&quot;&gt;&lt;a href=&quot;#区块链的一些概念&quot; class=&quot;headerlink&quot; title=&quot;区块链的一些概念&quot;&gt;&lt;/a&gt;区块链的一些概念&lt;/h2&gt;&lt;h3 id=&quot;区块链三要素&quot;&gt;&lt;a href=&quot;#区块链三要素&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mongodb学习总结</title>
    <link href="https://mybestcool.github.io/2018/04/03/mongodbstudy/"/>
    <id>https://mybestcool.github.io/2018/04/03/mongodbstudy/</id>
    <published>2018-04-03T10:43:09.000Z</published>
    <updated>2018-04-03T10:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><pre><code>https://www.mongodb.com/http://docs.mongoing.com/index.htmlhttp://www.mongodb.org.cn/</code></pre><h2 id="mongo的安装"><a href="#mongo的安装" class="headerlink" title="mongo的安装"></a>mongo的安装</h2><pre><code>1. 下载社区版本 https://www.mongodb.com/download-center?jmp=navcommunity2. 安装目录下有哪些程序</code></pre><table><thead><tr><th>程序</th><th>说明</th><th>使用说明</th></tr></thead><tbody><tr><td>mongo</td><td>mongo客户端</td><td>默认连接local：27017 用–help查看帮助</td></tr><tr><td>mongod</td><td>mongo服务器</td><td>要先建立dbpath才能启动，可以用命令行创建，也可以根据服务器的配置来创建（一般配置systemLog和stroage:dbPath，使用yaml格式）。用mongod –install（-f configpath）在windows下注册成服务</td></tr><tr><td>mongodump</td><td>数据库备份</td><td>mongodump -h dbhost -d dbname -o dbdirectory</td></tr><tr><td>mongorestore</td><td>数据库恢复</td><td>mongorestore -h <hostname>&lt;:port&gt; -d dbname <path></path></hostname></td></tr><tr><td>mongoexport</td><td>集合备份</td><td>mongoexport -d test -c students -o students.dat</td></tr><tr><td>mongoimport</td><td>集合恢复</td><td>mongoimport -d test -c students students.dat</td></tr><tr><td>mongofiles</td><td>存取文件</td><td>mongofiles put E:xxx.data/mongofiles get E:xxx.data</td></tr><tr><td>mongooplog</td><td>oplog重放</td><td>mongooplog –port 20001 -u* –authenticationDatabase=admin –from=172.16.201.73:27017</td></tr><tr><td>mongoperf</td><td>独立检查mongoDB的I/O性能工具</td><td></td></tr><tr><td>mongos</td><td>集群工具</td><td></td></tr><tr><td>mongostat</td><td>状态监控工具</td><td></td></tr><tr><td>mongotop</td><td>性能监控工具</td><td></td></tr></tbody></table><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><table><thead><tr><th>操作类型</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>增</td><td>insert</td><td></td></tr><tr><td>删</td><td>remove</td><td></td></tr><tr><td>查</td><td>find</td><td>更加复杂的有条件查询：比较查询操作符，逻辑查询操作符，元素查询操作符，评价查询查询操作，Geospatia查询操作符，数组查询操作符，位查询操作符</td></tr><tr><td>改</td><td>update</td><td>字段更新操作符，数组更新操作符，位更新操作符</td></tr><tr><td>聚合</td><td></td><td>group查询操作符，管道聚合阶段</td></tr></tbody></table><table><thead><tr><th>大类</th><th>说明</th></tr></thead><tbody><tr><td>Collection</td><td><a href="https://docs.mongodb.com/manual/reference/method/#collection" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/method/#collection</a></td></tr><tr><td>Replication</td><td>…</td></tr><tr><td>Cursor</td><td>…</td></tr><tr><td>Sharding</td><td>…</td></tr><tr><td>Database</td><td>…</td></tr><tr><td>Subprocess</td><td>…</td></tr><tr><td>Query Plan Cache</td><td>… </td></tr><tr><td>Constructors</td><td>…</td></tr><tr><td>Bulk Write Operation</td><td>… </td></tr><tr><td>Connection</td><td>…</td></tr><tr><td>User Management</td><td>…  </td></tr><tr><td>Native</td><td>…</td></tr><tr><td>Role Management</td><td>… </td></tr></tbody></table><h2 id="理论学习（基本概念）"><a href="#理论学习（基本概念）" class="headerlink" title="理论学习（基本概念）"></a>理论学习（基本概念）</h2><ol><li><p>基本类型</p><p> 对应bjson的格式</p></li></ol><table><thead><tr><th>类型</th><th>类型</th><th>编号</th></tr></thead><tbody><tr><td>Double</td><td>双精度</td><td>1</td></tr><tr><td>String</td><td>字符串</td><td>2</td></tr><tr><td>Object</td><td>对象</td><td>3</td></tr><tr><td>Array</td><td>数组</td><td>4</td></tr><tr><td>Binary data</td><td>二进制对象</td><td>5</td></tr><tr><td>Object id</td><td>对象id</td><td>7</td></tr><tr><td>Boolean</td><td>布尔值</td><td>8</td></tr><tr><td>Date</td><td>日期</td><td>9</td></tr><tr><td>Null</td><td>未定义</td><td>10</td></tr><tr><td>Regular Expression</td><td>正则表达式</td><td>11</td></tr><tr><td>JavaScript</td><td>JavaScript代码</td><td>13</td></tr><tr><td>Symbol</td><td>符号</td><td>14</td></tr><tr><td>JavaScript (with scope)</td><td>JavaScript代码(带范围)</td><td>15</td></tr><tr><td>32-bit integer</td><td>32 位整数</td><td>16</td></tr><tr><td>Timestamp</td><td>时间戳</td><td>17</td></tr><tr><td>64-bit integer</td><td>64 位整数</td><td>18</td></tr><tr><td>Min key</td><td>最小键</td><td>255</td></tr><tr><td>Max key</td><td>最大键</td><td>127</td></tr></tbody></table><ol start="2"><li><p>文档：是mongodb中数据的基本单元（类似于关系数据库的行，但比行要复杂），多个键及其关联的值放在一起就是文档。mongodb文件存储格式为bjson。</p><ul><li>示例{“firstName”:”egger”,”lastName”:”wong”}</li><li>文档中的健/值是有序的</li><li>文档中的值不仅可以是在双引号里的字符串，还可以是其他的类型，包括文档</li><li>mongodb区分类型和大小写</li><li>mongodb的文档不能有重复的键</li><li>文档的键是字符串，除了少数情况，键可以使用任意的utf-8字符<ul><li>键不能含有\0，这个表示键的结束</li><li>.和$有特别的意义，只能在特定的环境下使用</li><li>以下划线”_”开头的键是保留的（非严格要求）</li></ul></li><li><p>每个文档都有一个objectid，由客户端驱动生成，由”_id”表示</p><p>  ObjectId占用12字节的存储空间，每个字节两位十六进制数字，是一个24位的字符串。由“时间戳” 、“机器名”、“PID号”和“计数器”组成。使用机器名的好处是在分布式环境中能够避免单点计数的性能瓶颈。使用PID号的好处是支持同一机器内运行多个mongod实例。最终采用时间戳和计数器的组合来保证唯一性</p><ul><li>时间戳 4个字节。从标准纪元开始，单位为秒</li><li>机器名　　3个字节。所在主机的唯一标识符。通常是机器主机名的散列值，机器名通过Md5加密后取前三个字节</li><li>PID　　2个字节。为了确保在同一台机器上并发的多个进程产生的Objectld是唯一的，所以加上进程标识符(PID).注意到每次重启mongod进程后PID号通常会发生变化就可以了</li><li>计数器　　3个字节，表示的取值范围就是256<em>256</em>256=16777216。一个自动增加的计数器，确保相同进程同一秒产生的Obj ectld也是不一样的同一秒钟最多允许每个进程拥有2563 (16 777 216)不同的Objectld</li></ul></li></ul></li></ol><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>时间戳</td><td></td><td></td><td></td><td>机器名</td><td></td><td></td><td>PID</td><td></td><td>计数器</td><td></td><td></td></tr></tbody></table><ol start="3"><li><p>集合：指一组文档（类似于关系数据库的表），可以看成没有模式的表</p><ul><li>集合是无模式的，文档的格式可以不一样。如{“name”:”egger”}，{“age”:18}可以在一个集合中。一般来说，这种情况还是推荐改成多个集合<ul><li>把各种各样的模式的文档混在一起，对开发和维护都会产生麻烦</li><li>在几个查询速度上会折损</li><li>创建索引的时候，会附加结构，尤其是唯一索引，模式一样会更加高效</li></ul></li><li>命名，用utf-8字符串来表示集合，有下列要求<ul><li>集合名不能有空字符串</li><li>集合名不能含有\0，这个表示集合名的结束</li><li>集合名不能以”system.”开头，这个是为系统集合保留的前缀</li><li>用户创建的集合名不能呢个含有保留字符</li></ul></li><li><p>子集合</p><p>  组织集合的一种惯例是使用”.”字符分开的按命名空间划分的子集合。在MongoDB中使用子集合来组织数据是很好的方法。</p><p>  例如，一个个人信息可能包含两个集合，分别是person.name和person.age。这样做的目的只是为了使组织结构更好些，也就是说person这个集合（这里根本就不需要存在）及其子集合没有任何关系。把数据库的名字放到集合名前面，得到就是集合的完全限定名，称为命名空间。命名空间的长度不得超过121字节，在实际使用当中应该小于100字节。</p><p>  很多MongoDB工具中都包含子集合。</p><ul><li>GridFS是一种存储大文件的协议，使用子集合来存储文件的元数据，这样就与内容块分开了</li><li>MongoDB的Web控制台通过子集合的方式将数据组织在DBTOP部分.</li><li>绝大多数驱动程序都提供语法糖，为访问指定集合的子集合提供方便。</li></ul></li></ul></li><li><p>数据库</p><p> MongoDB中多个集合可以组成一个数据库。mongodb的单个实例可以容纳多个独立的数据库，每个都有自己的集合和权限，不同的数据库放在不同的文件中。</p><p> 数据库也通过名字来标识。为满足以下条件的utf-8字符串</p><ul><li>不能是空字符串</li><li>不得含有’ ‘（空格)、.、$、/、\和\0 (空宇符)</li><li>应全部小写</li><li><p>最多64个字节</p><p>有一些数据库名是保留的，可以直接访问这些特殊作用的数据库</p></li><li><p>admin</p><p>  从权限的角度来看，这是“root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</p></li><li><p>local</p><p>  这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</p></li><li><p>config</p><p>  当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p></li></ul></li></ol><h2 id="客户端驱动"><a href="#客户端驱动" class="headerlink" title="客户端驱动"></a>客户端驱动</h2><pre><code>待补充</code></pre><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><pre><code>http://shift-alt-ctrl.iteye.com/blog/2255580</code></pre><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><pre><code>待补充</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;https://www.mongodb.com/

http://docs.mongoing.com/ind
      
    
    </summary>
    
    
      <category term="mongodb" scheme="https://mybestcool.github.io/tags/mongodb/"/>
    
  </entry>
  
</feed>
