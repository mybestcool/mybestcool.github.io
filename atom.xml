<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知行合一</title>
  
  <subtitle>致良知</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mybestcool.github.io/"/>
  <updated>2019-04-12T07:56:04.072Z</updated>
  <id>https://mybestcool.github.io/</id>
  
  <author>
    <name>Lucus Gu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>游戏中微信支付的接入</title>
    <link href="https://mybestcool.github.io/2019/04/12/weixinpay/"/>
    <id>https://mybestcool.github.io/2019/04/12/weixinpay/</id>
    <published>2019-04-12T07:55:18.000Z</published>
    <updated>2019-04-12T07:56:04.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android接入，参考文献"><a href="#android接入，参考文献" class="headerlink" title="android接入，参考文献"></a>android接入，<a href="https://www.jianshu.com/p/f577ab65f731" target="_blank" rel="noopener">参考文献</a></h2><ul><li>流程：<ol><li>客户端向自己的服务端申请订单，服务端同步到微信服务端</li><li>客户端收到订单后，调起微信进行支付</li><li>等微信返回后，会通知客户端，然后根据结果向自己的服务端请求相关信息</li><li>同时服务端会接受微信服务端的支付成功失败通知，也可以向微信服务端查询支付情况</li></ol></li><li>android的sdk已经升级过，从sdk变成了opensdk，下载<a href="https://dl.bintray.com/wechat-sdk-team/maven/com/tencent/mm/opensdk/wechat-sdk-android-without-mta" target="_blank" rel="noopener">wechat-sdk-android-without-mta-x.x.xjar</a>或者<a href="https://dl.bintray.com/wechat-sdk-team/maven/com/tencent/mm/opensdk/wechat-sdk-android-with-mta" target="_blank" rel="noopener">wechat-sdk-android-with-mta-x.x.xjar</a></li><li><p>引入微信支付依赖，android studio的build.gradle文件中，添加如下依赖即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">   compile &apos;com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置WXPayEntryActivity，从<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=11_1" target="_blank" rel="noopener">官网demo</a>中copy一个来即可，必须放到app包下新建一个wxapi包里面</p></li><li><p>AndroidManifest.xml中注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--wx pay所需权限--&gt;</span><br><span class="line">&lt;uses-permission   android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;/&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--wx pay--&gt;</span><br><span class="line">&lt;activity</span><br><span class="line">        android:name=&quot;.wxapi.WXPayEntryActivity&quot;</span><br><span class="line">        android:exported=&quot;true&quot;</span><br><span class="line">        android:launchMode=&quot;singleTop&quot;&gt;</span><br><span class="line">&lt;activity/&gt;</span><br></pre></td></tr></table></figure></li><li><p>发送支付信息给服务端，自定义处理</p></li><li><p>跳转微信进行支付，java代码大致如下，需要注意的是需要运行到UI主线程，不然Toast.makeText等操作会崩溃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wxPay</span><span class="params">(<span class="keyword">final</span> String orderJson)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mAppActivity.runOnUiThread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                JSONObject json = <span class="keyword">new</span> JSONObject(orderJson); </span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != json)&#123;</span><br><span class="line">                    PayReq req = <span class="keyword">new</span> PayReq();</span><br><span class="line">                    req.appId= APP_ID; <span class="comment">//json.getString("appid");</span></span><br><span class="line">                    req.partnerId= json.optString(<span class="string">"partnerid"</span>);</span><br><span class="line">                    req.prepayId= json.optString(<span class="string">"prepayid"</span>);</span><br><span class="line">                    req.nonceStr= json.optString(<span class="string">"noncestr"</span>);</span><br><span class="line">                    req.timeStamp= json.optString(<span class="string">"timestamp"</span>);</span><br><span class="line">                    req.packageValue= json.optString(<span class="string">"package"</span>);</span><br><span class="line">                    req.sign= json.optString(<span class="string">"sign"</span>);</span><br><span class="line">                    <span class="comment">//req.extData= json.optString("extdata"); // optional</span></span><br><span class="line">                    Toast.makeText(mAppActivity, <span class="string">"正在打开微信"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    </span><br><span class="line">                    mWXAPI.sendReq(req);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Toast.makeText(mAppActivity, <span class="string">"生成订单失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                Toast.makeText(mAppActivity, <span class="string">"支付失败"</span>+e.getMessage(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>微信客户端回调支付结果处理，微信会自动回调到继续IWXAPIEventHandler的WXPayEntryActivity::public void onResp(BaseResp resp)，如果在cocos上调用，同样要注意让回调运行在GLThread中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onWXResp</span><span class="params">(BaseResp resp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resp <span class="keyword">instanceof</span> SendAuth.Resp) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (resp <span class="keyword">instanceof</span> SendMessageToWX.Resp) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// com.tencent.mm.opensdk.constants.ConstantsAPI;</span></span><br><span class="line">    <span class="comment">// resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (resp <span class="keyword">instanceof</span> PayResp) &#123;</span><br><span class="line">        <span class="keyword">final</span> PayResp payResp = (PayResp)resp;</span><br><span class="line">        <span class="keyword">if</span> (payResp.errCode == <span class="number">0</span>) &#123;</span><br><span class="line">            mAppActivity.runOnGLThread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    onWXpaySuccess(<span class="string">"支付成功"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> String resultStatus;</span><br><span class="line">            <span class="keyword">if</span> (payResp.errCode == -<span class="number">2</span>) &#123;</span><br><span class="line">                resultStatus = <span class="string">"您取消了支付"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resultStatus = <span class="string">"支付失败"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mAppActivity.runOnGLThread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    onWXpayFail(resultStatus);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ios接入，参考文献"><a href="#ios接入，参考文献" class="headerlink" title="ios接入，参考文献"></a>ios接入，<a href="https://www.jianshu.com/p/8930b4496023" target="_blank" rel="noopener">参考文献</a></h2><ul><li>接入流程跟android是一样的，区别的是，一般ios游戏为了上AppStore，一般不接带支付功能的sdk，所以用微信去除支付功能的sdk</li><li><p>将解压的微信OpenSDK文件夹拷贝到项目文件夹下，并导入开发环境中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">libWeChatSDK.a</span><br><span class="line">WechatAuthSDK.h</span><br><span class="line">WXApi.h</span><br><span class="line">WXApiObject.h</span><br></pre></td></tr></table></figure></li><li><p>并根据官方文档导入依赖库</p></li><li>添加URL Schemes, 点击项目名称,点击“Info”选项卡,在“URL Types”选项中,点击“+”, 在“URL Schemes”中输入微信的注册码</li><li><p>使用URLScheme调起weixin</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">void wxPay(const std::string&amp; orderJson, const std::function&lt;void(bool, const std::string&amp;)&gt;&amp; callback)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> output = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 隐藏微信地址</span></span><br><span class="line">    Base64Decode(<span class="string">"d2VpeGluOi8vYXBwL3d4NWI5YmZkZGFiNGZiZjQyNi9wYXkvPw=="</span>, &amp;output);</span><br><span class="line">    </span><br><span class="line">    rapidjson::Document document;</span><br><span class="line">    document.Parse(orderJson.c_str());</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> partnerid, prepayid, noncestr, timestamp, package, sign, extdata;</span><br><span class="line">    <span class="keyword">bool</span> bfirst = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( document.HasMember(<span class="string">"extdata"</span>) ) &#123;</span><br><span class="line">        rapidjson::Value&amp; v = document[<span class="string">"extdata"</span>];</span><br><span class="line">        <span class="keyword">if</span> (v.IsString()) &#123;</span><br><span class="line">            extdata = v.GetString();</span><br><span class="line">            <span class="keyword">if</span> (!extdata.empty()) &#123;</span><br><span class="line">                output += <span class="string">"extData="</span> + extdata;</span><br><span class="line">                bfirst = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( document.HasMember(<span class="string">"noncestr"</span>) ) &#123;</span><br><span class="line">        rapidjson::Value&amp; v = document[<span class="string">"noncestr"</span>];</span><br><span class="line">        <span class="keyword">if</span> (v.IsString()) &#123;</span><br><span class="line">            noncestr = v.GetString();</span><br><span class="line">            <span class="keyword">if</span> (noncestr.empty()) &#123; callback(<span class="literal">false</span>, <span class="string">"支付失败"</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span> ( bfirst ) &#123;</span><br><span class="line">                bfirst = <span class="literal">false</span>;</span><br><span class="line">                output += <span class="string">"nonceStr="</span> + noncestr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                output += <span class="string">"&amp;nonceStr="</span> + noncestr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( document.HasMember(<span class="string">"package"</span>) ) &#123;</span><br><span class="line">        rapidjson::Value&amp; v = document[<span class="string">"package"</span>];</span><br><span class="line">        <span class="keyword">if</span> (v.IsString()) &#123;</span><br><span class="line">            package = v.GetString();</span><br><span class="line">            package = package.replace(package.find(<span class="string">"="</span>), <span class="number">1</span>, <span class="string">"\%\%3D"</span>);</span><br><span class="line">            <span class="keyword">if</span> (package.empty()) &#123; callback(<span class="literal">false</span>, <span class="string">"支付失败"</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">            output += <span class="string">"&amp;package="</span> + package;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( document.HasMember(<span class="string">"partnerid"</span>) ) &#123;</span><br><span class="line">        rapidjson::Value&amp; v = document[<span class="string">"partnerid"</span>];</span><br><span class="line">        <span class="keyword">if</span> (v.IsString()) &#123;</span><br><span class="line">            partnerid = v.GetString();</span><br><span class="line">            <span class="keyword">if</span> (partnerid.empty()) &#123; callback(<span class="literal">false</span>, <span class="string">"支付失败"</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">            output += <span class="string">"&amp;partnerId="</span> + partnerid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( document.HasMember(<span class="string">"prepayid"</span>) ) &#123;</span><br><span class="line">        rapidjson::Value&amp; v = document[<span class="string">"prepayid"</span>];</span><br><span class="line">        <span class="keyword">if</span> (v.IsString()) &#123;</span><br><span class="line">            prepayid = v.GetString();</span><br><span class="line">            <span class="keyword">if</span> (prepayid.empty()) &#123; callback(<span class="literal">false</span>, <span class="string">"支付失败"</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">            output += <span class="string">"&amp;prepayId="</span> + prepayid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( document.HasMember(<span class="string">"timestamp"</span>) ) &#123;</span><br><span class="line">        rapidjson::Value&amp; v = document[<span class="string">"timestamp"</span>];</span><br><span class="line">        <span class="keyword">if</span> (v.IsString()) &#123;</span><br><span class="line">            timestamp = v.GetString();</span><br><span class="line">            <span class="keyword">if</span> (timestamp.empty()) &#123; callback(<span class="literal">false</span>, <span class="string">"支付失败"</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">            output += <span class="string">"&amp;timeStamp="</span> + timestamp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( document.HasMember(<span class="string">"sign"</span>) ) &#123;</span><br><span class="line">        rapidjson::Value&amp; v = document[<span class="string">"sign"</span>];</span><br><span class="line">        <span class="keyword">if</span> (v.IsString()) &#123;</span><br><span class="line">            sign = v.GetString();</span><br><span class="line">            <span class="keyword">if</span> (sign.empty()) &#123; callback(<span class="literal">false</span>, <span class="string">"支付失败"</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line">            output += <span class="string">"&amp;sign="</span> + sign;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    output += <span class="string">"&amp;signType=SHA1"</span>;</span><br><span class="line"></span><br><span class="line">    setWXpayCallback(callback);</span><br><span class="line">    NSString * pUrl = [NSString stringWithUTF8String:output.c_str()];</span><br><span class="line">    NSURL* url = [NSURL URLWithString:pUrl];</span><br><span class="line">    [[UIApplication sharedApplication] openURL:url];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>等待微信回调，头文件中App继承WXApiDelegate，sdk会回调到openURL，但并不会回调到onResp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url</span><br><span class="line">&#123;</span><br><span class="line">    return [WXApi handleOpenURL:url delegate:self];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NOTE: 9.0以后使用新API接口</span><br><span class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;NSString*, id&gt; *)options</span><br><span class="line">&#123;</span><br><span class="line">    if ([url.absoluteString rangeOfString:APP_ID].length) &#123;</span><br><span class="line">        auto callback = getWXpayCallback();</span><br><span class="line">        if ( callback ) &#123;</span><br><span class="line">            // 微信支付，微信回调的时候回回传ret参数，这样来区分支付知否成功</span><br><span class="line">            NSArray *array = [url.absoluteString componentsSeparatedByString:@&quot;ret=&quot;];</span><br><span class="line">            NSInteger ret = [array.lastObject integerValue];</span><br><span class="line">            // 调起微信结果返回</span><br><span class="line">            // ret: 0成功支付 -2取消支付 -1其他原因</span><br><span class="line">            if ( ret == 0 ) &#123;</span><br><span class="line">                callback(true, &quot;支付成功&quot;);</span><br><span class="line">            &#125; else if ( ret==-2 ) &#123;</span><br><span class="line">                callback(false, &quot;您取消了支付&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                callback(false, &quot;支付失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            setWXpayCallback(nullptr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        return [WXApi handleOpenURL:url delegate:self];</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;android接入，参考文献&quot;&gt;&lt;a href=&quot;#android接入，参考文献&quot; class=&quot;headerlink&quot; title=&quot;android接入，参考文献&quot;&gt;&lt;/a&gt;android接入，&lt;a href=&quot;https://www.jianshu.com/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cocos2dx最近遇到的一些注意点</title>
    <link href="https://mybestcool.github.io/2019/04/04/cocos2dx-xx/"/>
    <id>https://mybestcool.github.io/2019/04/04/cocos2dx-xx/</id>
    <published>2019-04-04T06:33:56.000Z</published>
    <updated>2019-04-04T06:37:54.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><ol><li>Android下异步加载文件的时候会崩溃，CCFileUtils-android.cpp:286<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Director::getInstance()-&gt;getEventDispatcher()-&gt;dispatchCustomEvent(EVENT_BEFORE_READ_FILE);</span></span><br><span class="line"><span class="comment">// 这样修改还是有线程安全的风险，但不会崩溃了</span></span><br><span class="line">EngineDataManager::onBeforeReadFile();</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>cc.XMLHttpRequest 在ios下对”{}[]”进行了URL转义，会导致服务器无法识别（Java spring可以识别）</li><li><p>打包资源如果需要修改资源后缀名，那么需要注意Android对assets目录下文件的压缩行为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* these formats are already compressed, or don't compress well */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* kNoCompressExt[] = &#123;</span><br><span class="line">    <span class="string">".jpg"</span>, <span class="string">".jpeg"</span>, <span class="string">".png"</span>, <span class="string">".gif"</span>,</span><br><span class="line">    <span class="string">".wav"</span>, <span class="string">".mp2"</span>, <span class="string">".mp3"</span>, <span class="string">".ogg"</span>, <span class="string">".aac"</span>,</span><br><span class="line">    <span class="string">".mpg"</span>, <span class="string">".mpeg"</span>, <span class="string">".mid"</span>, <span class="string">".midi"</span>, <span class="string">".smf"</span>, <span class="string">".jet"</span>,</span><br><span class="line">    <span class="string">".rtttl"</span>, <span class="string">".imy"</span>, <span class="string">".xmf"</span>, <span class="string">".mp4"</span>, <span class="string">".m4a"</span>,</span><br><span class="line">    <span class="string">".m4v"</span>, <span class="string">".3gp"</span>, <span class="string">".3gpp"</span>, <span class="string">".3g2"</span>, <span class="string">".3gpp2"</span>,</span><br><span class="line">    <span class="string">".amr"</span>, <span class="string">".awb"</span>, <span class="string">".wma"</span>, <span class="string">".wmv"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>打包资源如果需要修改资源后缀名，那么需要注意像骨骼动画等plist和图片是同一个名字，cocos对这些处理不同平台有不一样的表现</p></li><li>打包资源如果需要修改资源后缀名，声音文件需要特别注意，cocos不是根据文件头判断当前文件是什么格式，而是通过后缀名</li><li>在cocos内部，加载lua脚本，需要注意是否是重新加载<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 不会重新加载，需要对<span class="built_in">package</span>.<span class="built_in">loaded</span>、<span class="built_in">package</span>.<span class="built_in">preload</span>删除已经加载的模块</span><br><span class="line">engine-&gt;executeString(<span class="string">"require 'lobby.main'"</span>);</span><br><span class="line"># 会重新加载</span><br><span class="line">engine-&gt;executeString(<span class="string">"require 'lobby/main'"</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>网页引用js生效问题<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.10.0/jquery.min.js"</span> /&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 生效 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.10.0/jquery.min.js"</span>&gt;</span><span class="undefined"> </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Bug&quot;&gt;&lt;a href=&quot;#Bug&quot; class=&quot;headerlink&quot; title=&quot;Bug&quot;&gt;&lt;/a&gt;Bug&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Android下异步加载文件的时候会崩溃，CCFileUtils-android.cpp:286&lt;figure clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos7.5下安装sendmail</title>
    <link href="https://mybestcool.github.io/2019/03/05/sendmail-deploy/"/>
    <id>https://mybestcool.github.io/2019/03/05/sendmail-deploy/</id>
    <published>2019-03-05T06:09:46.000Z</published>
    <updated>2019-03-05T06:11:01.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sendmail简介"><a href="#sendmail简介" class="headerlink" title="sendmail简介"></a>sendmail简介</h2><ul><li><a href="http://www.sendmail.org" target="_blank" rel="noopener">Sendmail</a>是一种多用途、支持多种协议的跨网络电子邮件发送代理软件，由艾瑞克·欧曼（Eric Allman）所开发，于1983年随着BSD 4.1c首次发行。</li><li>其他同类软件：postfix、qmail</li><li>客户端工具MUA：mailx(<a href="http://heirloom.sourceforge.net/mailx.html" target="_blank" rel="noopener">http://heirloom.sourceforge.net/mailx.html</a>)</li></ul><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># sendmail服务端</span><br><span class="line">yum -y install sendmail sendmail-cf m4</span><br><span class="line">systemctl start sendmail.service</span><br><span class="line"># mail客户端</span><br><span class="line">yum -y install mailx</span><br><span class="line"># 支持smtp认证</span><br><span class="line">yum -y install saslauthd</span><br><span class="line">systemctl start saslauthd</span><br></pre></td></tr></table></figure></li><li><p>sendmail配置</p></li></ul><ol><li><p>更换主机名，假设我们的机器名为mymail(本文为mymail)，域名为mymail.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname mymail</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/hosts</p><blockquote><blockquote><p>127.0.0.1  mymail mymail.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">127.0.0.1   mymail mymail.com</span><br><span class="line">::1         mymail mymail.com</span><br></pre></td></tr></table></figure></blockquote></blockquote></li><li><p>修改/etc/mail/sendmail.mc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 修改配置项，将下面两行的dnl去掉</span><br><span class="line">dnl TRUST_AUTH_MECH(\`EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN&apos;)dnl</span><br><span class="line">dnl define(\`confAUTH_MECHANISMS&apos;, \`EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN&apos;)dnl</span><br><span class="line"># 将127.0.0.1改为0.0.0.0，意思是任何主机都可以访问Sendmail服务</span><br><span class="line">DAEMON_OPTIONS(\`Port=smtp, Addr=127.0.0.1, Name=MTA&apos;)dnl</span><br></pre></td></tr></table></figure></li></ol><p>生成Sendmail的配置文件：</p><blockquote><blockquote><p>m4 /etc/mail/sendmail.mc &gt; /etc/mail/sendmail.cf</p><ol start="4"><li>将域名加入到local-host-names文件，修改/etc/mail/local-host-names<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mymail.com</span><br></pre></td></tr></table></figure></li></ol></blockquote></blockquote><ol start="5"><li><p>修改/etc/mail/submit.cf，找到行 #Dj$w.Foo.COM，修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># my official domain name</span><br><span class="line"># ... define this only if sendmail cannot automatically determine your domain</span><br><span class="line">#Dj$w.Foo.COM</span><br><span class="line">Djmimvp.com</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/mail/acess，添加域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connect: mymail.com           RELAY</span><br></pre></td></tr></table></figure></li></ol><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makemap hash access.db &lt; access</span><br></pre></td></tr></table></figure></p><ol start="7"><li>添加域名MX记录</li><li>sendmail可以直接使用 “-r <a href="mailto:account@domain.com" target="_blank" rel="noopener">account@domain.com</a>” 参数来以任意源地址发送邮件，但目前主流的邮箱都会将源地址和反向解析IP进行比较，如果解析不到或是解析的IP不匹配，轻则将邮件直接归为SPAM，严重的就直接拒绝接收。</li><li>重启sendmail生效<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sendmail.service</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试和测试"><a href="#调试和测试" class="headerlink" title="调试和测试"></a>调试和测试</h2><ul><li><p>邮件目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 邮件执行文件</span><br><span class="line">/usr/sbin/sendmail</span><br><span class="line">/usr/bin/mail</span><br><span class="line"></span><br><span class="line"># 邮件配置目录</span><br><span class="line">/etc/mail/...</span><br><span class="line"></span><br><span class="line"># 邮件日志目录</span><br><span class="line">/var/log/mail*</span><br><span class="line"></span><br><span class="line"># 未发送邮件列表，可用mailq查看邮件列表</span><br><span class="line">/var/spool/mqueue/*</span><br></pre></td></tr></table></figure></li><li><p>建立邮件账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser mailA -p Pass</span><br></pre></td></tr></table></figure></li><li><p>在本机上测试，使用xmail工具给mailA发邮件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello mymail.com&quot; | mail -v -s &quot;Title&quot; mailA@mymail.com</span><br></pre></td></tr></table></figure></li><li><p>用其他转发邮箱测试，</p><ol><li><p>配置/etc/mail.rc，以下以163邮箱示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set from=my163mail@163.com</span><br><span class="line">set smtp=smtps://smtp.163.com:465</span><br><span class="line">set ssl-verify=ignore</span><br><span class="line">set nss-config-dir=/root/.certs</span><br><span class="line">set smtp-auth-user=my163mail@163.com</span><br><span class="line">set smtp-auth-password=my163mailpassword</span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure></li><li><p>导入证书，分别是qq证书和163证书示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo -n | openssl s_client -connect smtp.qq.com:465 | sed -ne &apos;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&apos; &gt; ~/.certs/qq.crt</span><br><span class="line">certutil -A -n &quot;GeoTrust Global CA&quot; -t &quot;C,,&quot; -d ~/.certs -i ~/.certs/qq.crt</span><br><span class="line">certutil -A -n &quot;GeoTrust SSL CA&quot; -t &quot;C,,&quot; -d ~/.certs -i ~/.certs/qq.crt</span><br><span class="line">certutil -L -d .certs</span><br><span class="line">certutil -A -n &quot;GeoTrust SSL CA - G3&quot; -t &quot;Pu,Pu,Pu&quot; -d ~/.certs/ -i ~/.certs/qq.crt</span><br></pre></td></tr></table></figure></li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo -n | openssl s_client -connect smtp.163.com:465 | sed -ne &apos;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&apos; &gt; ~/.certs/163.crt</span><br><span class="line">certutil -A -n &quot;GeoTrust Global CA&quot; -t &quot;C,,&quot; -d ~/.certs -i ~/.certs/163.crt</span><br><span class="line">certutil -A -n &quot;GeoTrust SSL CA&quot; -t &quot;C,,&quot; -d ~/.certs -i ~/.certs/163.crt</span><br><span class="line">certutil -L -d /root/.certs</span><br><span class="line">certutil -A -n &quot;GeoTrust SSL CA - G3&quot; -t &quot;Pu,Pu,Pu&quot; -d ~/.certs/ -i ~/.certs/163.crt</span><br></pre></td></tr></table></figure><ol start="3"><li>发送邮件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello mymail.com&quot; | mail -v -s &quot;Title&quot; tomail@163.com</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sendmail简介&quot;&gt;&lt;a href=&quot;#sendmail简介&quot; class=&quot;headerlink&quot; title=&quot;sendmail简介&quot;&gt;&lt;/a&gt;sendmail简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sendmail.org
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AdultVideoScript7.0搭建教程</title>
    <link href="https://mybestcool.github.io/2019/03/05/avs7-deploy/"/>
    <id>https://mybestcool.github.io/2019/03/05/avs7-deploy/</id>
    <published>2019-03-05T06:09:33.000Z</published>
    <updated>2019-03-08T03:31:51.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AVS环境要求"><a href="#AVS环境要求" class="headerlink" title="AVS环境要求"></a>AVS环境要求</h2><ul><li>PHP：建议版本5.6，虽然官方说7.0完全支持PHP7了，但是实际上并不是如此。所以如果不想踩坑，还是老老实实用5.6吧。</li><li>MYSQL</li><li>Nginx/Apache</li><li>官方文档<ul><li>Linux Server</li><li>Apache Web Server <ul><li>Support for AcceptPathInfo</li><li>Support for MultiViews (or mod_rewrite which is slower)</li></ul></li><li>MySQL / MySQLi</li><li>PHP 5.x / 7.x (mod_php/CGI) <ul><li>Support for GD2 Library</li><li>Support for MySQL / MySQLi</li><li>Support for Curl</li></ul></li><li>Recommended PHP Configuration<ul><li>safe_mode off</li><li>open_basedir off</li><li>max_execution_time 7200</li><li>max_input_time 7200</li><li>memory_limit (with 1MB more then the maximum video upload size)</li><li>post_max_size (maximum video upload size)</li><li>upload_max_size (maximum video upload size)</li><li>exec() should be allowed</li></ul></li><li>PHP CLI 5.x (see above + register_argc_argv ON)</li><li>FFmpeg (Recommended Version: 3+)</li></ul></li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>一台干净的Ubuntu服务器</li><li><p>安装宝塔</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh</span><br><span class="line"><span class="comment"># 完成后打开管理页面：http://ip:8888</span></span><br><span class="line"><span class="comment"># 安装AVS的环境：PHP5.6、Mysql、Nginx（建议使用）、phpmyadmin</span></span><br></pre></td></tr></table></figure></li><li><p>安装视频插件ffmpeg，官方推荐3.x版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">wget https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-3.3.4-64bit-static.tar.xz</span><br><span class="line">tar -xJf ffmpeg-3.3.4-64bit-static.tar.xz</span><br><span class="line"><span class="built_in">cd</span> ffmpeg-3.3.4-64bit-static</span><br><span class="line">cp ffmpeg /usr/bin</span><br><span class="line">cp ffprobe /usr/bin</span><br></pre></td></tr></table></figure></li><li><p>下载好<a href="https://lala.im/wp-content/uploads/2018/09/AVS7.0.zip" target="_blank" rel="noopener">AVS代码</a>，根据AVS环境文档配置</p></li></ul><h2 id="安装网站"><a href="#安装网站" class="headerlink" title="安装网站"></a>安装网站</h2><ul><li>在宝塔后台建立一个网站，点击网站=&gt;添加站点，按要求添加，其中建立数据库avs7，记录好相应的账号密码</li><li><p>在此站点下增加伪动态配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">set $rule_1 1$rule_1;</span><br><span class="line">&#125;</span><br><span class="line">if (!-d $request_filename)&#123;</span><br><span class="line">set $rule_1 2$rule_1;</span><br><span class="line">&#125;</span><br><span class="line">if ($rule_1 = &quot;21&quot;)&#123;</span><br><span class="line">rewrite /.* /loader.php last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入avs的sql脚本sql/avs.sql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt;use avs7</span><br><span class="line">mysql&gt;<span class="built_in">source</span> sql/avs.sql</span><br></pre></td></tr></table></figure></li><li><p>源码修改，源码在upload目录，按以下要求修改</p><ol><li>Edit include/config.paths.php and set $config[‘BASE_URL’] to your site’s url.</li><li>OPTIONAL: If you use a subdirectory for your installion set $config[‘RELATIVE’] to your subdirectory (eg: $config[‘RELATIVE’] = ‘/subdirectory’)!</li><li>OPTIONAL: If you use a subdirectory for your installation edit loader.php and set $relative to your subdirectory (eg: $relative = ‘/subdirectory’)!</li><li>Create a database. Edit include/config.db.php and set the database information (name, user and password).</li><li>Import the sql dump from sql/avs.sql in your database (most likely using phpMyAdmin).</li><li>Upload all files and folders from /upload to your server.</li><li><p>Chmod following files and directories to 0777. You can also fix the file/directory permissions from the admin panel: Settings &gt; General &gt; System Check</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/include/config.local.php</span><br><span class="line">/cache/frontend</span><br><span class="line">/cache/backend</span><br><span class="line">/images/logo</span><br><span class="line">/images/notice_images</span><br><span class="line">/images/notice_images/thumbs</span><br><span class="line">/media/albums</span><br><span class="line">/media/categories/game</span><br><span class="line">/media/categories/album</span><br><span class="line">/media/categories/video</span><br><span class="line">/media/csv</span><br><span class="line">/media/games/swf</span><br><span class="line">/media/games/tmb</span><br><span class="line">/media/games/tmb/orig</span><br><span class="line">/media/photos</span><br><span class="line">/media/photos/tmb</span><br><span class="line">/media/player/logo</span><br><span class="line">/media/users</span><br><span class="line">/media/users/orig</span><br><span class="line">/media/videos/tmb</span><br><span class="line">/media/videos/vid</span><br><span class="line">/media/videos/h264</span><br><span class="line">/templates/backend/default/analytics/analytics.tpl </span><br><span class="line">/templates/emails</span><br><span class="line">/templates/emails/*.tpl</span><br><span class="line">/templates/frontend/(your_template)/static/*.tpl</span><br><span class="line">/tmp/albums</span><br><span class="line">/tmp/avatars</span><br><span class="line">/tmp/downloads</span><br><span class="line">/tmp/logs</span><br><span class="line">/tmp/sessions</span><br><span class="line">/tmp/thumbs</span><br><span class="line">/tmp/uploader</span><br><span class="line">/aembed.sh</span><br></pre></td></tr></table></figure></li><li><p>Go to <a href="http://www.domain.com/siteadmin" target="_blank" rel="noopener">www.domain.com/siteadmin</a> (login using: admin/admin) and start configuring your website.</p></li><li>You can use the Google Video Sitemap generator using the link: <a href="http://www.yourdomain.com/sitemap.php" target="_blank" rel="noopener">http://www.yourdomain.com/sitemap.php</a></li><li>Enable non-www to www redirection (domain.com to <a href="http://www.domain.com" target="_blank" rel="noopener">www.domain.com</a>) by editing the .htaccess file and replacing “domain.com” with your domain name.</li></ol></li><li>访问站点<br>后台地址<a href="http://xx.com/siteadmin，用户名和密钥都是admin，进入后咱们访问Settings-General-System" target="_blank" rel="noopener">http://xx.com/siteadmin，用户名和密钥都是admin，进入后咱们访问Settings-General-System</a> Check，检查环境能否满意。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>这个程序的模板默认会在前台调用一个Google的js，我们需要替换改成国内的地址，不然你的站点在国内打开会非常慢。<br>修复路径：templates/frontend/主题名/header.tpl，将里面的：<a href="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js改为：https://cdn.bootcss.com/jquery/1.11.1/jquery.min.js" target="_blank" rel="noopener">https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js改为：https://cdn.bootcss.com/jquery/1.11.1/jquery.min.js</a></li><li>如果提示open_basedir有问题，那么注释掉网站目录下.user.ini中open_basedir</li><li><p>修改classes/email.class.php:4，添加其他头依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use PHPMailer\PHPMailer\PHPMailer;</span><br><span class="line">if ( !class_exists(&apos;PHPMailer&apos;) ) &#123;</span><br><span class="line">    require $config[&apos;BASE_DIR&apos;]. &apos;/include/phpmailer/PHPMailer.php&apos;;</span><br><span class="line">    require $config[&apos;BASE_DIR&apos;]. &apos;/include/phpmailer/SMTP.php&apos;;</span><br><span class="line">    require $config[&apos;BASE_DIR&apos;]. &apos;/include/phpmailer/Exception.php&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题模板会调用google的js脚本，需要将他们替换掉，主题目录templates/frontend/主题名，</p><ul><li>替换embed.tpl、enter.tpl、header.tpl、view.tpl中的”<a href="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;为&quot;https://cdn.bootcss.com/jquery/1.11.1/jquery.min.js" target="_blank" rel="noopener">https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;为&quot;https://cdn.bootcss.com/jquery/1.11.1/jquery.min.js</a><br>“</li><li>替换feedback.tpl、invite.tpl、<br>grep: img: Is a directory中的”<a href="https://www.google.com/recaptcha/api.js&quot;为&quot;https://www.recaptcha.net/recaptcha/api.js&quot;" target="_blank" rel="noopener">https://www.google.com/recaptcha/api.js&quot;为&quot;https://www.recaptcha.net/recaptcha/api.js&quot;</a></li><li>替换modules/captcha/recaptchalib.php中的”<a href="https://www.google.com/recaptcha/api/siteverify&quot;为&quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;" target="_blank" rel="noopener">https://www.google.com/recaptcha/api/siteverify&quot;为&quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;</a></li></ul></li><li>配置include/config.local.php的recaptcha_site_key和recaptcha_secret_key</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AVS环境要求&quot;&gt;&lt;a href=&quot;#AVS环境要求&quot; class=&quot;headerlink&quot; title=&quot;AVS环境要求&quot;&gt;&lt;/a&gt;AVS环境要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PHP：建议版本5.6，虽然官方说7.0完全支持PHP7了，但是实际上并不是如此。所以如
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP环境部署</title>
    <link href="https://mybestcool.github.io/2019/02/25/phpenv/"/>
    <id>https://mybestcool.github.io/2019/02/25/phpenv/</id>
    <published>2019-02-25T05:27:01.000Z</published>
    <updated>2019-02-25T05:28:21.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu系统下手动安装PHP环境"><a href="#Ubuntu系统下手动安装PHP环境" class="headerlink" title="Ubuntu系统下手动安装PHP环境"></a>Ubuntu系统下手动安装PHP环境</h2><ul><li><p>安装php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装php</span></span><br><span class="line">apt-get install php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装cgi以及启动器</span></span><br><span class="line">apt-get install php-cgi</span><br><span class="line">apt-get install spawn-fcgi(或者php-fpm，管理php-cgi的工具)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装一些库</span></span><br><span class="line">apt-get install php-curl</span><br><span class="line">apt-get install php-mbstring</span><br><span class="line">apt-get install php-gd </span><br><span class="line">apt-get install php-mcrypt</span><br><span class="line">apt-get install php-xml</span><br><span class="line">apt-get install php-mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动cgi</span></span><br><span class="line">spawn-fcgi -a 127.0.0.1 -p 9000 -C 10 -u www-data -f /usr/bin/php-cgi</span><br></pre></td></tr></table></figure></li><li><p>安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br><span class="line"></span><br><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure></li><li><p>安装mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br><span class="line"></span><br><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></li></ul><h2 id="PHP其他集成环境"><a href="#PHP其他集成环境" class="headerlink" title="PHP其他集成环境"></a>PHP其他集成环境</h2><h3 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h3><ul><li>WAMP，简单易用</li><li>phpStudy，专业好用</li><li>UPUPW，专业好用*</li><li>APMServ </li></ul><h3 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h3><ul><li>LNMP 和 LAMP</li><li>AppServ</li><li>WDCP</li></ul><h3 id="其他工具包"><a href="#其他工具包" class="headerlink" title="其他工具包"></a>其他工具包</h3><ul><li><p>OneinStack一键安装包，可以快速安装LNMP、LAMP、LNMT等环境，具体我们可以根据实际的安装进程组合，而且可以一键快速给网站部署Let’s Encrypt免费SSL证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget screen curl python <span class="comment">#for CentOS/Redhat</span></span><br><span class="line"><span class="comment"># apt-get -y install wget screen curl python #for Debian/Ubuntu</span></span><br><span class="line">wget http://mirrors.linuxeye.com/oneinstack-full.tar.gz</span><br><span class="line">tar xzf oneinstack-full.tar.gz</span><br><span class="line"><span class="built_in">cd</span> oneinstack</span><br><span class="line">screen -S oneinstack</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></li><li><p>宝塔</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu系统下手动安装PHP环境&quot;&gt;&lt;a href=&quot;#Ubuntu系统下手动安装PHP环境&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu系统下手动安装PHP环境&quot;&gt;&lt;/a&gt;Ubuntu系统下手动安装PHP环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信支付证书生成</title>
    <link href="https://mybestcool.github.io/2019/02/25/wxpaycert/"/>
    <id>https://mybestcool.github.io/2019/02/25/wxpaycert/</id>
    <published>2019-02-25T02:43:14.000Z</published>
    <updated>2019-02-25T02:43:50.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信支付证书"><a href="#微信支付证书" class="headerlink" title="微信支付证书"></a>微信支付证书</h2><ul><li><p>微信有三个证书：</p><ul><li>客户端公钥证书：apiclient_cert.pem，需要服务端生成</li><li>客户端私钥证书：apiclient_key.pem，需要服务端生成</li><li>服务端CA证书：rootca.pem，2018年3月6日前生成证书时自带，后续不在提供了，原因是绝大部分操作系统已内置了此证书</li></ul></li><li><p>证书生成方法</p><ul><li>登陆微信商户号</li><li>到账户中心-&gt;API安全</li><li>在API证书下生成证书或者更换证书</li><li>生成证书请求</li><li>下载并安装证书工具，用证书请求生成证书，妥善保管证书，因无法二次下载（私钥证书必须私有的，微信也不存客户端私钥证书，那自然公钥证书也不需要存了）</li><li>生成以下文件<ul><li>apiclient_cert.p12，某些软件环境下使用的格式，如java系</li><li>apiclient_cert.pem、apiclient_key.pem，另外一些软件环境下使用的格式，如c++、go、php等</li><li>证书使用说明.txt，一些说明</li></ul></li></ul></li><li><p>到其他<a href="https://pan.baidu.com/s/1SiKuCj5QvD-XYmjTAC24hw" target="_blank" rel="noopener">网站下载</a>(密码：2wym)一个微信服务端CA证书</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微信支付证书&quot;&gt;&lt;a href=&quot;#微信支付证书&quot; class=&quot;headerlink&quot; title=&quot;微信支付证书&quot;&gt;&lt;/a&gt;微信支付证书&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;微信有三个证书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端公钥证书：apiclient_cert.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>win32下cocos对接duilib</title>
    <link href="https://mybestcool.github.io/2018/11/28/cocos-duilib/"/>
    <id>https://mybestcool.github.io/2018/11/28/cocos-duilib/</id>
    <published>2018-11-28T09:37:27.000Z</published>
    <updated>2018-11-28T10:49:58.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>由于需要将cocos的程序在win32下运行，但cocos使用的是系统本身窗口，从游戏角度来说，这个是比较不能接受的。那么肯定需要重绘窗口，简单来说有两种方案：</p><ul><li>使用mfc的窗口，重绘来实现</li><li>使用例如duilib接管ui来实现</li></ul><p>从后续开发简易度来说，使用duilib会比较好些，这里也使用了这个方案。</p><p>本文参考了以下方案</p><p><a href="https://www.cnblogs.com/GuyaWeiren/p/4600937.html" target="_blank" rel="noopener">强行在MFC窗体中渲染Cocos2d-x 3.6</a></p><h2 id="Duilib接入步骤"><a href="#Duilib接入步骤" class="headerlink" title="Duilib接入步骤"></a>Duilib接入步骤</h2><ol><li>准备工作</li></ol><ul><li>下载cocos和对应win32开发工具vs2013，建议使用vs2013，因为下面几个工具确定可以用它来编译</li><li>下载<a href="https://github.com/glfw/glfw/releases/" target="_blank" rel="noopener">glfw</a>，cocos是使用它接管跨平台的窗口创建和管理的，方便对接opengl。需要注意的是，找对cocos对应glfw版本。</li><li>下载并安装<a href="https://cmake.org/files/" target="_blank" rel="noopener">cmake</a>，建议下载最新版本。</li><li>下载并编译<a href="https://github.com/duilib/duilib" target="_blank" rel="noopener">duilib</a></li></ul><ol start="2"><li>修改GLFW源码</li></ol><ul><li>进入glfw源码目录，打开cmakegui，source code处选择下下来的glfw解压的文件夹，build the binaries选择生成解决方案的文件夹，然后生成对应VS版本的解决方案</li><li>进入build the binaries选择生成解决方案的文件夹，打开vs解决方案</li><li><p>打开win32_windows.c，修改createWindow函数，注释处均为修改的地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加三个参数 HWND parent, int px, int py，表示父窗口是谁，以及对应位置</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">createWindow</span><span class="params">(_GLFWwindow* window, <span class="keyword">const</span> _GLFWwndconfig* wndconfig, HWND parent, <span class="keyword">int</span> px, <span class="keyword">int</span> py)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xpos, ypos, fullWidth, fullHeight;</span><br><span class="line">    WCHAR* wideTitle;</span><br><span class="line">    DWORD style = getWindowStyle(window);</span><br><span class="line">    DWORD exStyle = getWindowExStyle(window);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有父窗口，修改窗口属性</span></span><br><span class="line"><span class="keyword">if</span> (parent)</span><br><span class="line">&#123;</span><br><span class="line">style = WS_CHILDWINDOW | WS_VISIBLE;</span><br><span class="line">exStyle = WS_EX_APPWINDOW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (window-&gt;monitor)</span><br><span class="line">    &#123;</span><br><span class="line">        GLFWvidmode mode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> This window placement is temporary and approximate, as the</span></span><br><span class="line">        <span class="comment">//       correct position and size cannot be known until the monitor</span></span><br><span class="line">        <span class="comment">//       video mode has been set</span></span><br><span class="line">        _glfwPlatformGetMonitorPos(window-&gt;monitor, &amp;xpos, &amp;ypos);</span><br><span class="line">        _glfwPlatformGetVideoMode(window-&gt;monitor, &amp;mode);</span><br><span class="line">        fullWidth  = mode.width;</span><br><span class="line">        fullHeight = mode.height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        xpos = CW_USEDEFAULT;</span><br><span class="line">        ypos = CW_USEDEFAULT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parent==<span class="literal">NULL</span> &amp;&amp; wndconfig-&gt;maximized)</span><br><span class="line">            style |= WS_MAXIMIZE;</span><br><span class="line"></span><br><span class="line">        getFullWindowSize(style, exStyle,</span><br><span class="line">                          wndconfig-&gt;width, wndconfig-&gt;height,</span><br><span class="line">                          &amp;fullWidth, &amp;fullHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有父窗口，修改窗口位置</span></span><br><span class="line"><span class="keyword">if</span> (parent)</span><br><span class="line">&#123;</span><br><span class="line">xpos = px;</span><br><span class="line">ypos = py;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    wideTitle = _glfwCreateWideStringFromUTF8Win32(wndconfig-&gt;title);</span><br><span class="line">    <span class="keyword">if</span> (!wideTitle)</span><br><span class="line">    &#123;</span><br><span class="line">        _glfwInputError(GLFW_PLATFORM_ERROR,</span><br><span class="line">                        <span class="string">"Win32: Failed to convert window title to UTF-16"</span>);</span><br><span class="line">        <span class="keyword">return</span> GLFW_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window-&gt;win32.handle = CreateWindowExW(exStyle,</span><br><span class="line">                                           _GLFW_WNDCLASSNAME,</span><br><span class="line">                                           wideTitle,</span><br><span class="line">                                           style,</span><br><span class="line">                                           xpos, ypos,</span><br><span class="line">                                           fullWidth, fullHeight,</span><br><span class="line">   parent, <span class="comment">// No parent window</span></span><br><span class="line">                                           <span class="literal">NULL</span>, <span class="comment">// No window menu</span></span><br><span class="line">                                           GetModuleHandleW(<span class="literal">NULL</span>),</span><br><span class="line">                                           <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(wideTitle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开win32_windows.c，修改_glfwPlatformCreateWindow函数，对接createWindow函数的参数，并修改对应的头文件internal.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> _glfwPlatformCreateWindow(_GLFWwindow* window,</span><br><span class="line">                              <span class="keyword">const</span> _GLFWwndconfig* wndconfig,</span><br><span class="line">                              <span class="keyword">const</span> _GLFWctxconfig* ctxconfig,</span><br><span class="line">                              <span class="keyword">const</span> _GLFWfbconfig* fbconfig,</span><br><span class="line">  HWND parent, <span class="keyword">int</span> px, <span class="keyword">int</span> py)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> (!createWindow(window, wndconfig, parent, px, py))</span><br><span class="line">        <span class="keyword">return</span> GLFW_FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> (!createWindow(window, wndconfig, parent, px, py))</span><br><span class="line">                    <span class="keyword">return</span> GLFW_FALSE;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>glfw3.h，修改接口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了兼容，保留老接口</span></span><br><span class="line"><span class="function">GLFWAPI GLFWwindow* <span class="title">glfwCreateWindow</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* title, GLFWmonitor* monitor, GLFWwindow* share)</span></span>;</span><br><span class="line"><span class="comment">// 增加新接口</span></span><br><span class="line"><span class="function">GLFWAPI GLFWwindow* <span class="title">glfwCreateWindowEx</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* title, GLFWmonitor* monitor, GLFWwindow* share, </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">intptr_t</span> parent, <span class="keyword">int</span> px, <span class="keyword">int</span> py)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>windows.h，修改接口实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">GLFWAPI GLFWwindow* <span class="title">glfwCreateWindow</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* title, GLFWmonitor* monitor, GLFWwindow* share)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> glfwCreateWindowEx(width, height, title, monitor, share, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GLFWAPI GLFWwindow* <span class="title">glfwCreateWindowEx</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">const</span> <span class="keyword">char</span>* title,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     GLFWmonitor* monitor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     GLFWwindow* share,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">intptr_t</span> parent, <span class="keyword">int</span> px, <span class="keyword">int</span> py)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Open the actual window and create its context</span></span><br><span class="line"><span class="keyword">if</span> (!_glfwPlatformCreateWindow(window, &amp;wndconfig, &amp;ctxconfig, &amp;fbconfig, (HWND)parent, px, py))</span><br><span class="line">    &#123;</span><br><span class="line">        glfwMakeContextCurrent((GLFWwindow*) previous);</span><br><span class="line">        glfwDestroyWindow((GLFWwindow*) window);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新编译，然后glfw3.h和glfw3.lib复制到Cocos2dx\external\glfw3\include\win32和E:\daclient\Cocos2dx\external\glfw3\prebuilt\win32目录下</p></li></ul><ol start="3"><li>修改对应的cocos源码</li></ol><ul><li><p>cocos是使用glfwCreateWindow创建窗口的，找到对应位置，在CCGLViewImpl-desktop.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加了三个参数，对应调用此函数的地方也要做响应修改</span></span><br><span class="line"><span class="keyword">bool</span> GLViewImpl::initWithRect(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; viewName, Rect rect, <span class="keyword">float</span> frameZoomFactor, <span class="keyword">bool</span> resizable, </span><br><span class="line">HWND parent, <span class="keyword">int</span> px, <span class="keyword">int</span> py)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉标题栏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)</span></span><br><span class="line">glfwWindowHint(GLFW_DECORATED, GL_FALSE); <span class="comment">// 这个样式实际上去掉了系统提供的默认标题栏。所有窗口区域都为客户区</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> neededWidth = rect.size.width * _frameZoomFactor;</span><br><span class="line">    <span class="keyword">int</span> neededHeight = rect.size.height * _frameZoomFactor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// glfwCreateWindowEx替换glfwCreateWindow</span></span><br><span class="line">_mainWindow = glfwCreateWindowEx(neededWidth, neededHeight, _viewName.c_str(), _monitor, <span class="literal">nullptr</span>, </span><br><span class="line">(<span class="keyword">intptr_t</span>)parent, px, py);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>cocos的Application::getInstance()-&gt;run();会阻塞线程，但之后线程会被duilib主窗口接管，所以渲染主循环会放到时钟中去，那么需要将run函数拆分。找到CCApplication-win32.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增三个函数</span></span><br><span class="line"><span class="keyword">int</span> Application::loopinit()</span><br><span class="line">&#123;</span><br><span class="line">PVRFrameEnableControlWindow(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">initGLContextAttrs();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize instance and cocos2d.</span></span><br><span class="line"><span class="keyword">if</span> (!applicationDidFinishLaunching())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> director = Director::getInstance();</span><br><span class="line"><span class="keyword">auto</span> glview = director-&gt;getOpenGLView();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retain glview to avoid glview being released in the while loop</span></span><br><span class="line">glview-&gt;retain();</span><br><span class="line">_loopinit = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Application::looponce()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!_loopinit) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> director = Director::getInstance();</span><br><span class="line"><span class="keyword">auto</span> glview = director-&gt;getOpenGLView();</span><br><span class="line"></span><br><span class="line">director-&gt;mainLoop();</span><br><span class="line">glview-&gt;pollEvents();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Application::loopfini()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!_loopinit) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> director = Director::getInstance();</span><br><span class="line"><span class="keyword">auto</span> glview = director-&gt;getOpenGLView();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (glview-&gt;isOpenGLReady())</span><br><span class="line">&#123;</span><br><span class="line">director-&gt;end();</span><br><span class="line">director-&gt;mainLoop();</span><br><span class="line">director = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">glview-&gt;release();</span><br><span class="line">_loopinit = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>引入duilib，根据duilib的例子，创建duilib窗口，建议把duilib相关的内容放到单独的cpp文件，不与cocos的文件有牵扯，容易出类库包含不兼容问题。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// duilib窗口对应函数</span></span><br><span class="line"><span class="function">HWND <span class="title">DuiWinCreate</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DuiWinShow</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DuiWinRun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>duilib窗口的<a href="https://github.com/duilib/duilib/blob/master/%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8.xml" target="_blank" rel="noopener">属性配置</a></p><p>duilib库有一些bug，如Dialog的domodel返回值错误;PostQuitMessage(0L)有时候不能退出</p><ol start="5"><li>修改主工程</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DuiWin.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AppDelegate.h"</span></span></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USE_WIN32_CONSOLE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_LOOPTIMER101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明时钟回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> CALLBACK <span class="title">WinSunTimerProc</span><span class="params">(HWND hWnd, UINT nMsg, UINT nTimerid, DWORD dwTime)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个完整的窗口需要经过四个步骤：设计一个窗口类；注册窗口类；创建窗口；显示及更新窗口</span></span><br><span class="line"><span class="keyword">int</span> WINAPI _tWinMain(HINSTANCE hInstance,</span><br><span class="line">                       HINSTANCE hPrevInstance,</span><br><span class="line">                       LPTSTR    lpCmdLine,</span><br><span class="line">                       <span class="keyword">int</span>       nCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">HICON hIcon = ::LoadIcon(hInstance, MAKEINTRESOURCE(MAINICON));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_WIN32_CONSOLE</span></span><br><span class="line">    AllocConsole();</span><br><span class="line">    freopen(<span class="string">"CONIN$"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"CONOUT$"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    freopen(<span class="string">"CONOUT$"</span>, <span class="string">"w"</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">HWND hwnd = DuiWinCreate(hInstance);</span><br><span class="line"></span><br><span class="line">AppDelegate app;</span><br><span class="line">app.m_parent = hwnd;</span><br><span class="line">Application::getInstance()-&gt;loopinit();</span><br><span class="line">SetTimer(hwnd, CC_LOOPTIMER, <span class="number">1</span>, WinSunTimerProc);</span><br><span class="line"></span><br><span class="line">DuiWinShow();</span><br><span class="line">DuiWinRun();</span><br><span class="line"></span><br><span class="line">KillTimer(hwnd, CC_LOOPTIMER);</span><br><span class="line">Application::getInstance()-&gt;loopfini();</span><br><span class="line"><span class="comment">/*AppDelegate app;</span></span><br><span class="line"><span class="comment">app.m_parent = NULL;</span></span><br><span class="line"><span class="comment">Application::getInstance()-&gt;run();*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_WIN32_CONSOLE</span></span><br><span class="line">    FreeConsole();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> CALLBACK <span class="title">WinSunTimerProc</span><span class="params">(HWND hWnd, UINT nMsg, UINT nTimerid, DWORD dwTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nTimerid == CC_LOOPTIMER)</span><br><span class="line">&#123;</span><br><span class="line">Application::getInstance()-&gt;looponce();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应创建窗口的地方</span></span><br><span class="line"><span class="keyword">bool</span> AppDelegate::applicationDidFinishLaunching()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)</span></span><br><span class="line">glview = GLViewImpl::createWithRect(<span class="string">"168game"</span>, Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1280</span>, <span class="number">720</span>), <span class="number">1.0f</span>, <span class="literal">false</span>, HWND(m_parent),<span class="number">0</span>, <span class="number">24</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>至此已经对接完成，本方案不会影响ios和android包的实现。</p></li><li><p>其他</p></li></ol><ul><li>显示应用在系统状态的图片，加载一个mfc资源，使用HICON hIcon = ::LoadIcon(hInstance, MAKEINTRESOURCE(MAINICON));即可</li><li>使用自定义鼠标cur，似乎不能实现，duilib使用的是系统鼠标，并做一些自动切换</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;由于需要将cocos的程序在win32下运行，但cocos使用的是系统本身窗口，从游戏角度来说，这个是比较不能接受的。那么肯定需要重绘窗口，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>以太坊私有节点部署</title>
    <link href="https://mybestcool.github.io/2018/09/17/geth-private-node/"/>
    <id>https://mybestcool.github.io/2018/09/17/geth-private-node/</id>
    <published>2018-09-17T07:50:45.000Z</published>
    <updated>2018-09-17T09:26:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作，参考上一篇文章"><a href="#准备工作，参考上一篇文章" class="headerlink" title="准备工作，参考上一篇文章"></a>准备工作，参考上一篇文章</h2><ul><li>已经准备好服务器</li><li>已经安装好<a href="https://ethereum.github.io/go-ethereum/downloads/" target="_blank" rel="noopener">geth工具链</a></li></ul><h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><ul><li>以太坊支持两种共识机制：POW和POA，使用POW没有足够的算力，会丧失自主权，所以私链一般使用POA</li><li>总体结构为：1个bootnode、3个挖矿节点、2个rpc节点<ul><li>1个bootnode，挖矿节点和rpc节点都从bootnode进入到私有链中，比直接去相互连接更加方便</li><li>3个挖矿节点，可以容错一个节点停机，因为需要半数以上的节点存活才能继续挖矿</li><li>2个rpc节点，也是为了容错</li></ul></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li><p>启动bootnode节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成bootnode的key，会在当前目录下生成string对应的私钥文件</span></span><br><span class="line">bootnode -genkey string</span><br><span class="line"><span class="comment"># 启动bootnode，string指向key filename</span></span><br><span class="line">bootnode -nodekey string</span><br><span class="line"><span class="comment"># 启动后会看到有关bootnode的日志，如“enode://xxxxxxx@ip:port”</span></span><br></pre></td></tr></table></figure></li><li><p>生成一批帐号，3个帐号用来挖矿，1个存储货币，以及用于其他业务帐号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下创建帐号，根据提示输入钱包密码，在本地会在keystore目录下生成一个UTC--xxx的钱包文件</span></span><br><span class="line">./geth account new</span><br></pre></td></tr></table></figure></li><li><p>生成创世配置，使用以太坊自带的puppeth工具，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">puppeth</span><br><span class="line"><span class="comment"># 配置配置名字，如输入x_poa就会生成x_poa.json文件</span></span><br><span class="line"><span class="comment"># 设置共识机制POA，对应关键词是“clique”</span></span><br><span class="line"><span class="comment"># 配置networkid</span></span><br><span class="line"><span class="comment"># 允许挖矿的帐号地址</span></span><br><span class="line"><span class="comment"># 配置发行货币量，以及货币存到哪个帐号上</span></span><br></pre></td></tr></table></figure></li><li><p>启动挖矿节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化节点</span></span><br><span class="line">geth --datadir /miner0.d init x_poa.json</span><br><span class="line"><span class="comment"># 启动节点</span></span><br><span class="line">geth --datadir /miner0.d --networkid 1024 --bootnodes enode://83789b30dd3d091bad865c1ab14c12bf28eabf7babe291965e2e9beffaa79f2e55fb2e63f5ff8f7f25483fe85b8803d0101dbf87b11e46e614d6ddc7100955c2@172.20.0.56:30301 --unlock 0x6df176a7f059223715121d7cd3c75b87f46cdca2 --password node0.d/.password --mine --minerthreads=1 --gasprice 1 console</span><br></pre></td></tr></table></figure></li><li><p>启动RPC节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化节点</span></span><br><span class="line">geth --datadir /node0.d init x_poa.json</span><br><span class="line"><span class="comment"># 启动节点</span></span><br><span class="line">./geth --datadir /node0.d --networkid 1024 --bootnodes enode://83789b30dd3d091bad865c1ab14c12bf28eabf7babe291965e2e9beffaa79f2e55fb2e63f5ff8f7f25483fe85b8803d0101dbf87b11e46e614d6ddc7100955c2@172.20.0.56:30301 --rpc --rpcaddr 0.0.0.0 --rpccorsdomain * --rpcapi eth,net,web3 --ws --wsaddr 0.0.0.0 --wsorigins * --wsapi eth,net,web3 --ipcdisable --gasprice 1 console</span><br></pre></td></tr></table></figure></li></ol><h2 id="POA共识添加和删除旷工"><a href="#POA共识添加和删除旷工" class="headerlink" title="POA共识添加和删除旷工"></a>POA共识添加和删除旷工</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看挖矿节点</span></span><br><span class="line">admin.peers()</span><br><span class="line"><span class="comment"># 投票添加节点，半数以上添加，方可加入</span></span><br><span class="line">clique.propose(signer_address，<span class="literal">true</span>)</span><br><span class="line"><span class="comment"># 投票删除节点，半数以上删除，方可删除</span></span><br><span class="line">clique.discard(signer_address)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作，参考上一篇文章&quot;&gt;&lt;a href=&quot;#准备工作，参考上一篇文章&quot; class=&quot;headerlink&quot; title=&quot;准备工作，参考上一篇文章&quot;&gt;&lt;/a&gt;准备工作，参考上一篇文章&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;已经准备好服务器&lt;/li&gt;
&lt;li&gt;已经安装好&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>以太坊全节点部署</title>
    <link href="https://mybestcool.github.io/2018/09/17/geth-full-node/"/>
    <id>https://mybestcool.github.io/2018/09/17/geth-full-node/</id>
    <published>2018-09-17T07:37:25.000Z</published>
    <updated>2018-09-17T07:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>目前有三类节点是使用最多的，go-ethereum(55%)、parity(22%)、ethereumjs-devp2p(15%)，go-ethereum是官方版本，且占比最大，这里就选择go-ethereum来部署</p><h2 id="为什么要部署全节点"><a href="#为什么要部署全节点" class="headerlink" title="为什么要部署全节点"></a>为什么要部署全节点</h2><p>以太坊有两种节点：全节点、轻节点。全节点存储区块链的全部状态，需要350G的存储空间和8G以上的内存。轻节点只存储最小量的状态，只下载区块头和与其交易相关的默克尔树“分支”，它只需要几百M存储空间和128-512M内存。当发起转账、合约部署的时候，轻节点是不能独立完成的，他需要借助其他全节点以他的名义来操作。这一切本省并没有什么问题，但当遇到交易量急剧上升，区块链升级的时候，它会找不到合适的全节点给它使用。因此我们再业务上使用的时候，建议使用全节点。</p><h2 id="在Linux上部署"><a href="#在Linux上部署" class="headerlink" title="在Linux上部署"></a>在Linux上部署</h2><ul><li><p>从<a href="https://geth.ethereum.org/downloads/" target="_blank" rel="noopener">官网</a>下载合适的版本（建议选择带tools的版本），并解压到/usr/local/bin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@blockchain-server01 data]<span class="comment"># tar -xzvf geth-alltools-linux-amd64-1.8.15-89451f7c -C /usr/local/bin/ -f</span></span><br><span class="line">[root@blockchain-server01 data]<span class="comment"># geth version</span></span><br><span class="line">Geth</span><br><span class="line">Version: 1.8.15-stable</span><br><span class="line">Git Commit: 89451f7c382ad2185987ee369f16416f89c28a7d</span><br><span class="line">Architecture: amd64</span><br><span class="line">Protocol Versions: [63 62]</span><br><span class="line">Network Id: 1</span><br><span class="line">Go Version: go1.10.4</span><br><span class="line">Operating System: linux</span><br><span class="line">GOPATH=</span><br><span class="line">GOROOT=/home/travis/.gimme/versions/go1.10.4.linux.amd64</span><br></pre></td></tr></table></figure></li><li><p>启动参数：RCP接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">API AND CONSOLE OPTIONS:</span><br><span class="line">  --rpc                  Enable the HTTP-RPC server</span><br><span class="line">  --rpcaddr value        HTTP-RPC server listening interface (default: <span class="string">"localhost"</span>)</span><br><span class="line">  --rpcport value        HTTP-RPC server listening port (default: 8545)</span><br><span class="line">  --rpcapi value         API<span class="string">'s offered over the HTTP-RPC interface "db,eth,net,web3,miner,personal"</span></span><br><span class="line"><span class="string">  --ws                   Enable the WS-RPC server</span></span><br><span class="line"><span class="string">  --wsaddr value         WS-RPC server listening interface (default: "localhost")</span></span><br><span class="line"><span class="string">  --wsport value         WS-RPC server listening port (default: 8546)</span></span><br><span class="line"><span class="string">  --wsapi value          API'</span>s offered over the WS-RPC interface</span><br><span class="line">  --wsorigins value      Origins from <span class="built_in">which</span> to accept websockets requests</span><br></pre></td></tr></table></figure></li><li><p>启动参数：全局设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ETHEREUM OPTIONS:</span><br><span class="line">  --datadir <span class="string">"/Users/zzs/Library/Ethereum"</span>  Data directory <span class="keyword">for</span> the databases and keystore</span><br><span class="line">  --syncmode <span class="string">"fast"</span>                        Blockchain sync mode (<span class="string">"fast"</span>, <span class="string">"full"</span>, or <span class="string">"light"</span>)</span><br></pre></td></tr></table></figure></li><li><p>启动参数：挖矿设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MINER OPTIONS:</span><br><span class="line">  --mine                    Enable mining</span><br></pre></td></tr></table></figure></li><li><p>启动参数：网络属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING OPTIONS:</span><br><span class="line">  --port value          Network listening port (default: 30303)</span><br></pre></td></tr></table></figure></li><li><p>启动命令，将geth运行到后台，/data/eth_data用来存放以太坊的数据；启动完毕后在/data/eth_data会产生一个geth.ipc文件，用于进程间的ipc通讯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/eth_data</span><br><span class="line">nohup geth --datadir /data/eth_data --syncmode full --rpc --rpcaddr 0.0.0.0 --rpccorsdomain <span class="string">"*"</span> --rpcapi eth,net,web3 --ws --wsaddr 0.0.0.0 --wsorigins <span class="string">"*"</span> --wsapi eth,net,web3 &amp;</span><br></pre></td></tr></table></figure></li><li><p>关闭命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者kill 进程id</span></span><br><span class="line"><span class="built_in">kill</span> geth</span><br></pre></td></tr></table></figure></li></ul><h2 id="本地API操作"><a href="#本地API操作" class="headerlink" title="本地API操作"></a>本地API操作</h2><ul><li><p>启动命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/eth_data</span><br><span class="line">geth attach geth.ipc</span><br></pre></td></tr></table></figure></li><li><p>命令行支持的API，这个可以在启动参数上设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">admin:1.0 </span><br><span class="line">debug:1.0 </span><br><span class="line">eth:1.0 </span><br><span class="line">ethash:1.0 </span><br><span class="line">miner:1.0 </span><br><span class="line">net:1.0 </span><br><span class="line">personal:1.0 </span><br><span class="line">rpc:1.0 </span><br><span class="line">txpool:1.0 </span><br><span class="line">web3:1.0</span><br></pre></td></tr></table></figure></li><li><p>查看同步进程，当eth.syncing返回false的时候表示没开始同步，或者同步已经完毕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/eth_data</span><br><span class="line">geth attach geth.ipc</span><br><span class="line"><span class="comment"># 获取区块高度</span></span><br><span class="line">&gt; eth.blockNumber</span><br><span class="line">&gt; eth.syncing</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选型&quot;&gt;&lt;a href=&quot;#选型&quot; class=&quot;headerlink&quot; title=&quot;选型&quot;&gt;&lt;/a&gt;选型&lt;/h2&gt;&lt;p&gt;目前有三类节点是使用最多的，go-ethereum(55%)、parity(22%)、ethereumjs-devp2p(15%)，go-e
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bitcoin交易网站实现</title>
    <link href="https://mybestcool.github.io/2018/08/30/bitcoin-trade/"/>
    <id>https://mybestcool.github.io/2018/08/30/bitcoin-trade/</id>
    <published>2018-08-30T06:18:47.000Z</published>
    <updated>2018-08-30T07:28:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><ul><li><p>c/c++ 语言，bitcoin最核心的版本是用c/c++实现，但由于最初版本源码结构太差，现在比以前好了很多，但还是在继续调整。由于c/c++语言本身的问题，库引入都是比较麻烦的事情。它的有点相对其他实现比较稳定</p></li><li><p>golang语言，有bitcoin的实现btcd，但最近没有更新，有些bip也没有实现；另外有开发者尝试用golang实现的例子，如<a href="https://annatarhe.github.io/" target="_blank" rel="noopener">这个</a>,<a href="https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc" target="_blank" rel="noopener">这个</a>，借鉴的内容会多一些。</p></li></ul><p>其他如js，但并不是个人擅长，也不是区块链的核心语言系列，就不考虑。上面两种选哪种都ok，看个人擅长，这边就选择使用golang。</p><p>接口选择方面，直接调用bitcoin core的rpc接口或者使用blockchain.com的api。这里选择了第一种。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>一般来说要实现交易所或者交易网站的功能，要实现三块功能：地址管理、充值、提现</p><ul><li><p>地址管理</p><ul><li>目标：<ul><li>方便管理用户的地址</li><li>保存好私钥的安全性</li></ul></li><li>实现：<ul><li>一般来说使用HD钱包的方式生成地址</li><li>地址类型一般用着两种：P2PKH和p2sh-p2wpkh，后台生成用统一用一种即可，第二种打包费用更低</li><li>公钥和私钥都使用压缩格式</li><li>私钥的存储需要隔离，有几个维度<ul><li>存储的数据库要独立</li><li>对数据库中的内容需要加密</li><li>启动的时候，从root启动，解密私钥的秘钥从环境变量读取或者从文件读取（启动完成后把文件删除）</li></ul></li></ul></li></ul></li><li><p>充值</p><ul><li>目标：<ul><li>玩家充值：玩家充值后，应立即感知到充值行为<ul><li>充值到某个帐号，就无法识别出是哪个玩家进行了充值，所以需要对每个帐号生成一个区块链地址，玩家向这个地址充值</li></ul></li><li>充值服务可随时更新</li></ul></li><li>实现：<ul><li>用一个goroutine监控交易池，一旦发现交易池中有游戏中玩家的对应地址，就记录玩家充值状态到缓存，设置超时60分钟；遍列过的交易不再重复查看</li><li>用一个goroutine监控[1,3)个确认的区块，如果发现其中有玩家的对应地址，就记录玩家充值状态到缓存，设置超时30分钟；遍列过的区块不在查看，遍列过的交易不再重复查看；防止交易池漏查、重启过程中漏查</li><li>用一个goroutine监控3个确认以上的区块，如果发现其中有玩家的对应地址，就记录玩家充值状态到数据库；并记录到扫描高度，以防止重启丢失充值记录。</li><li>注意点<ul><li>玩家的充值地址需要同步到内存中，方便快速查找；有新帐号创建的时候，要先同步过来，在创建成功</li><li>目前2018-08-30每个区块大约有100-3000个交易不等</li><li>交易池中大约有4000+的交易</li><li>提取交易信息接口getrawtransaction “txid” ( verbose “blockhash” ) ，需要在bitcoind启动的时候添加-txindex，获取所有的交易索引</li></ul></li></ul></li><li>风险控制：<ul><li>软分叉，忽略</li><li>硬分叉，使用网络接口监控异常，一旦出现警告，停止服务<ul><li>getnetworkinfo 提取warnings信息</li></ul></li></ul></li></ul></li><li><p>提现</p><ul><li>目标：<ul><li>玩家提现，将中心的对应货币转到链上，且收取一定的手续费用</li><li>将玩家的充值，全部转到某个Master帐号上</li><li>Master帐号充值后，能发现其未使用的UTXO，并录入库</li></ul></li><li>实现：<ul><li>玩家的提现<ul><li>发起请求，将玩家的提现请求录入到提现队列，如NSQ，并入库</li><li>处理请求，每一个Master帐号对应一个goroutine，每个goroutine从队列中提取请求，处理后发到链上。所有的转账处理的goroutine由Manager goroutine创建，当发现新帐号的时候，立即开启一个新的goroutine<ul><li>当账户金额不足时，告警</li><li>未确认数提现达到一定值时，此账号停止提现</li><li>可重发所有请求</li></ul></li><li>确认请求，单独起一个goroutine，监控这些提现行为，达到3个确认后，就同步入库</li></ul></li><li>玩家的充值<ul><li>单独起一个goroutine，检查充值量和充值额度，当达到一定条件，就将用户的比特币转到一个Master帐号</li></ul></li><li>录入Master帐号的UTXO<ul><li>单独起一个goroutine，检查Master帐号的充值和玩家的充值的合并，方法跟充值服务的实现差不多</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选型&quot;&gt;&lt;a href=&quot;#选型&quot; class=&quot;headerlink&quot; title=&quot;选型&quot;&gt;&lt;/a&gt;选型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;c/c++ 语言，bitcoin最核心的版本是用c/c++实现，但由于最初版本源码结构太差，现在比以前好了很多，但还是在继
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>比特币长时间不被确认的处理办法</title>
    <link href="https://mybestcool.github.io/2018/08/14/bitcoin-unconfirmed/"/>
    <id>https://mybestcool.github.io/2018/08/14/bitcoin-unconfirmed/</id>
    <published>2018-08-14T13:00:18.000Z</published>
    <updated>2018-08-14T13:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li><p>设置了LockTime，交易需要到设置高度或者设置时间才会被打包进入区块</p></li><li><p>交易费设置太低，旷工会根据交易费排序，选择交易费高的交易进行打包（老的节点可能会按时间顺序排序），所以会出现两种情况</p><ul><li>一直在交易内存池，没有旷工选择打包</li><li>交易内存池慢了，或者超时了，被删除掉了</li></ul></li></ol><p>产生上面的这些行为，我们的节点（接受RPC的节点）是无法感知到的，且交易也不会回退，我们用RPC查找的时候，会永远在交易内存池内。</p><h2 id="如何处理"><a href="#如何处理" class="headerlink" title="如何处理"></a>如何处理</h2><ol><li><p>针对1情况，就不要设置LockTime。如果需要设置，一定要核对好。</p></li><li><p>针对2情况，有以下几种办法</p><ul><li>重启自己的节点，<ul><li>简单重启，它会重新广播交易，可能再次失败</li><li>加-zapwallettxes参数，删除钱包的所有交易记录；加-rescan参数，重新扫描区块链以查找遗漏的钱包交易，获取交易前的UTXO。这个方法不一定能够成功，因为交易可能还在某些节点上。</li></ul></li><li>在btc.com上查找交易是否存在，如果不存在，则用<a href="https://btc.com/tools/tx/publish，再次广播交易，可能再次失败；也可以用别家的矿池" target="_blank" rel="noopener">https://btc.com/tools/tx/publish，再次广播交易，可能再次失败；也可以用别家的矿池</a></li><li>打开<a href="https://pushtx.btc.com/#/，提供一定的费用，让其矿池打包处理。最长需要4个小时才能进入区块。因为他家的矿池在4个小时内，挖到矿的概率是98%。可能费用比较高。" target="_blank" rel="noopener">https://pushtx.btc.com/#/，提供一定的费用，让其矿池打包处理。最长需要4个小时才能进入区块。因为他家的矿池在4个小时内，挖到矿的概率是98%。可能费用比较高。</a></li><li>发送交易的时候，将交易设置成RBF模式(Replace by Fee)，允许用高费用交易来替代掉老的交易</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置了LockTime，交易需要到设置高度或者设置时间才会被打包进入区块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交易费设置太低
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在MinGW64下编译obs-text-pango</title>
    <link href="https://mybestcool.github.io/2018/08/06/mingw-obs-pango/"/>
    <id>https://mybestcool.github.io/2018/08/06/mingw-obs-pango/</id>
    <published>2018-08-06T13:15:08.000Z</published>
    <updated>2018-08-06T13:38:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="obs-text-pango-是什么"><a href="#obs-text-pango-是什么" class="headerlink" title="obs-text-pango 是什么"></a>obs-text-pango 是什么</h2><p>首先介绍下OBS是什么，OBS - Free and open source software for live streaming and screen recording(OBS是一款开源的用于录屏直播的工具软件)。旧版的OBS只能支持Windows，目前已经停止开发。作者为了支持Windows/Mac/Linux重写了整个软件，项目地址为<a href="https://github.com/obsproject/obs-studio" target="_blank" rel="noopener">obs-studio in Github</a>。</p><p>OBS项目的语言分布：</p><ol><li>C: 57.6%</li><li>C++: 36.3%</li><li>Objective-C/Objective-C++: 4%</li><li>others: 3%</li></ol><p>OBS代码主要包含这些部分：</p><ol><li>libobs: 核心代码，定义项目框架以及核心API，主要用C语言编写。</li><li>UI: 界面代码，采用C++的QT框架，开发出适用三大平台的界面。</li><li>plugins: 插件代码，可独立编译成dll(windows平台)或so(*nix平台)，包含Source(录屏输入源)、Output、Service(各种流播服务)等全部被定义为插件。</li><li>libobs-d3d11: 基于D3D的图形子系统，主要用在Windows系统。</li><li>libobs-opengl: 基于opengl的图形子系统，主要用在*uix系统。</li></ol><p>obs-text-pango是obs的一个文本插件plugins，它与obs本身提供的obs-text插件不同之处在于，它支持emoji，且用pango排版引擎实现，项目地址为<a href="https://github.com/kkartaltepe/obs-text-pango" target="_blank" rel="noopener">obs-studio in Github</a>，forked from <a href="https://github.com/reboot/obs-text-pango" target="_blank" rel="noopener">reboot/obs-text-pango</a>, 这个项目源码需要改进，编译出来是无法使用</p><h2 id="如何编译"><a href="#如何编译" class="headerlink" title="如何编译"></a>如何编译</h2><ol><li>使用MSys2的pacman工具安装以下库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pacman -S mingw-w64-x86_64-pkg-config</span><br><span class="line">pacman -S mingw-w64-x86_64-gcc</span><br><span class="line">pacman -S mingw64/mingw-w64-x86_64-cmake</span><br><span class="line">pacman -S mingw64/mingw-w64-x86_64-make //cp mingw32-make.exe make.exe</span><br><span class="line">pacman -S mingw-w64-x86_64-qt5</span><br><span class="line">pacman -S mingw-w64-x86_64-ffmpeg</span><br><span class="line">pacman -S mingw-w64-x86_64-vlc</span><br><span class="line">pacman -S mingw-w64-x86_64-fdk-aac</span><br></pre></td></tr></table></figure><ol start="2"><li>下载obs-text-pango源码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kkartaltepe/obs-text-pango.git</span><br></pre></td></tr></table></figure><ol start="3"><li>修改CMakeList.txt</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(text-pango)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Standalone build</span></span><br><span class="line"><span class="keyword">if</span>(NOT OBS_OUTPUT_DIR)</span><br><span class="line"><span class="comment">#SET(CMAKE_FIND_LIBRARY_PREFIXES "lib" "")</span></span><br><span class="line"><span class="comment">#SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".dll.a" ".lib" ".dll")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_PREFIX <span class="string">"D:/_workdir/obs/obs-studio/vs2015/rundir/Debug"</span>)</span><br><span class="line">list(APPEND CMAKE_INCLUDE_PATH <span class="string">"D:/_workdir/obs/obs-studio/libobs"</span>)</span><br><span class="line">list(APPEND CMAKE_LIBRARY_PATH <span class="string">"D:/_workdir/obs/obs-studio/vs2015/libobs/Debug"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_MODULE_PATH <span class="variable">$&#123;CMAKE_MODULE_PATH&#125;</span> <span class="string">"$&#123;CMAKE_SOURCE_DIR&#125;/cmake/"</span>)</span><br><span class="line"><span class="keyword">include</span>(ObsHelpers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(STANDALONE_PLUGIN <span class="keyword">TRUE</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_path</span>(OBS_INCLUDE_DIRS</span><br><span class="line">        obs-module.h)</span><br><span class="line">    <span class="keyword">find_library</span>(OBS_LIBRARIES</span><br><span class="line">        NAMES libobs obs)</span><br><span class="line"><span class="comment"># Build as submodule of obs-studio</span></span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">set</span>(OBS_INCLUDE_DIRS</span><br><span class="line">../../libobs)</span><br><span class="line"><span class="keyword">set</span>(OBS_LIBRARIES</span><br><span class="line">libobs)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Pango REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Cairo REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Pangocairo REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Pangoft2 REQUIRED)</span><br><span class="line"><span class="comment">#if(WIN32)</span></span><br><span class="line"><span class="comment">#find_package(Pangowin32 REQUIRED)</span></span><br><span class="line"><span class="comment">#endif()</span></span><br><span class="line"><span class="keyword">set</span>(PANGOWIN32_LIBRARIES</span><br><span class="line"><span class="string">"C:/msys64/mingw64/lib/libpangowin32-1.0.a"</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Fontconfig REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Freetype REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line"><span class="variable">$&#123;OBS_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="variable">$&#123;PANGO_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="variable">$&#123;CAIRO_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="variable">$&#123;PANGOCAIRO_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="variable">$&#123;PANGOFT2_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="variable">$&#123;FREETYPE_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">if</span>(NOT WIN32)</span><br><span class="line"><span class="keyword">FIND_PACKAGE</span>(PkgConfig)</span><br><span class="line">PKG_CHECK_MODULES(GLIB glib-<span class="number">2.0</span> REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;GLIB_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">link_directories</span>(</span><br><span class="line"><span class="variable">$&#123;PANGO_LIBRARY_DIRS&#125;</span></span><br><span class="line"><span class="variable">$&#123;CAIRO_LIBRARY_DIRS&#125;</span></span><br><span class="line"><span class="variable">$&#123;FREETYPE_LIBRARY_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(text-pango_SOURCES</span><br><span class="line">text-pango.c</span><br><span class="line">text-pango.h</span><br><span class="line">text-utilities.h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(win32_static_LIBRARIES</span><br><span class="line">intl</span><br><span class="line">fribidi</span><br><span class="line">pixman-<span class="number">1</span></span><br><span class="line">z</span><br><span class="line">harfbuzz</span><br><span class="line">libpng16</span><br><span class="line">expat</span><br><span class="line">usp10)</span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line"><span class="keyword">set</span>(PLATFORM_LIBRARIES <span class="variable">$&#123;win32_static_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(text-pango MODULE</span><br><span class="line"><span class="variable">$&#123;text-pango_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(text-pango</span><br><span class="line"><span class="variable">$&#123;OBS_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;CAIRO_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;PANGO_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;PANGOWIN32_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;PANGOCAIRO_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;PANGOFT2_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;FREETYPE_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;FONTCONFIG_LIBRARIES&#125;</span></span><br><span class="line"><span class="variable">$&#123;PLATFORM_LIBRARIES&#125;</span>) <span class="comment"># win only currently</span></span><br><span class="line">target_compile_definitions(text-pango PRIVATE <span class="variable">$&#123;CAIRO_C_FLAGS&#125;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(STANDALONE_PLUGIN)</span><br><span class="line"><span class="keyword">if</span>(CMAKE_SIZEOF_VOID_P <span class="keyword">EQUAL</span> <span class="number">8</span>)</span><br><span class="line"><span class="keyword">set</span>(_bit_suffix <span class="string">"64bit/"</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line"><span class="keyword">set</span>(_bit_suffix <span class="string">"32bit/"</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">if</span>(APPLE)</span><br><span class="line"><span class="keyword">install</span>(TARGETS text-pango</span><br><span class="line">LIBRARY DESTINATION <span class="string">"Library/Application Support/obs-studio/plugins/libtext-pango/bin/"</span>)</span><br><span class="line"><span class="keyword">install</span>(DIRECTORY data/common/</span><br><span class="line">DESTINATION <span class="string">"Library/Application Support/obs-studio/plugins/libtext-pango/data"</span>)</span><br><span class="line"><span class="keyword">install</span>(DIRECTORY data/apple/</span><br><span class="line">DESTINATION <span class="string">"Library/Application Support/obs-studio/plugins/libtext-pango/data"</span>)</span><br><span class="line"><span class="comment"># for packaging, copy all dependencies, change dependency links</span></span><br><span class="line"><span class="comment"># run pkgbuild --identifier user.obsproject.kurufu.text-pango --root ./obs-text-pango-install/ text-pango-mac.pkg</span></span><br><span class="line"><span class="keyword">else</span>() <span class="comment"># Not apple so normal layout</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS text-pango </span><br><span class="line">LIBRARY DESTINATION <span class="string">"obs-plugins/$&#123;_bit_suffix&#125;/"</span>)</span><br><span class="line"><span class="keyword">install</span>(DIRECTORY data/common/</span><br><span class="line">DESTINATION data/obs-plugins/text-pango)</span><br><span class="line"><span class="comment"># Platform specific data, like fontconfig in win32</span></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line"><span class="comment">#install(FILES $&lt;TARGET_PDB_FILE:$&#123;PROJECT_NAME&#125;&gt;</span></span><br><span class="line"><span class="comment">#DESTINATION "obs-plugins/$&#123;_bit_suffix&#125;/" OPTIONAL)</span></span><br><span class="line"><span class="keyword">install</span>(DIRECTORY data/win32/</span><br><span class="line">DESTINATION data/obs-plugins/text-pango)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">install_obs_plugin_with_data(text-pango data/common)</span><br><span class="line"><span class="comment"># calling this twice might not work?</span></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">install_obs_plugin_with_data(text-pango data/win32)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">if</span>(APPLE)</span><br><span class="line">install_obs_plugin_with_data(text-pango data/apple)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><ol start="4"><li>使用window的cmd工具，以x64位的姿态打开，进入obs-text-pango目录，并输入以下命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir mingw64</span><br><span class="line">cd mingw64</span><br><span class="line">cmake .. -G &quot;MinGW Makefiles&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="过程中遇到的问题"><a href="#过程中遇到的问题" class="headerlink" title="过程中遇到的问题"></a>过程中遇到的问题</h2><ol><li><p>命令行使用msys2_shell.cmd，或者git-bash.exe，会遇到一个sh冲突的问题，所以只能用windows的cmd</p></li><li><p>cmake的时候使用-G “Visual Studio 14 2015 Win64”，项目能够编译过，且lib也能相互兼容，至少是c的lib，但链接的时候会有各种各样的问题，未深入去研究</p></li><li><p>cmake的时候使用-G “MSYS Makefiles”，也是各种问题，可能我安装的都是mingw64的库的原因吧</p></li><li><p>cmake的时候，想尽量静态编译，所以在CMakeLists.txt中加入以下语句，但在链接的时候提示各种各样奇怪问题，所以最后还是去掉</p></li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(CMAKE_FIND_LIBRARY_PREFIXES <span class="string">"lib"</span> <span class="string">""</span>)</span><br><span class="line"><span class="keyword">SET</span>(CMAKE_FIND_LIBRARY_SUFFIXES <span class="string">".a"</span> <span class="string">".dll.a"</span> <span class="string">".lib"</span> <span class="string">".dll"</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>纹理大小为0的时候，会导致程序崩溃，可能是obs新旧版本兼容问题</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;obs-text-pango-是什么&quot;&gt;&lt;a href=&quot;#obs-text-pango-是什么&quot; class=&quot;headerlink&quot; title=&quot;obs-text-pango 是什么&quot;&gt;&lt;/a&gt;obs-text-pango 是什么&lt;/h2&gt;&lt;p&gt;首先介绍下O
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MinGW开发环境搭建</title>
    <link href="https://mybestcool.github.io/2018/08/06/mingw-environment/"/>
    <id>https://mybestcool.github.io/2018/08/06/mingw-environment/</id>
    <published>2018-08-06T11:49:34.000Z</published>
    <updated>2018-08-06T13:09:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类MinGW环境有哪些"><a href="#类MinGW环境有哪些" class="headerlink" title="类MinGW环境有哪些"></a>类MinGW环境有哪些</h2><ol><li><p>MinGW：是Minimalist GNU for Windows的缩写，是让windows开发者可以使用GNU工具链和一些类库，同时也支持win32的api，它编译出来的程序不一定是跨平台的。它有MinGW32和MinGW64两个版本，对应开发32位和64位程序。为了更方便的使用MinGW，就产生了一个叫MSys工具，是一个类Unix命令行环境。由于MSys开发太慢，又搞了MSys2工具，同时还解决了包管理问题，方法是继承了Arch Linux的包管理系统pacman。</p></li><li><p>Cygwin：是提供了完整的类Unix环境，是让windows开发者在开发软件的时候，感觉是在Unix环境下。用它开发出来的程序既可以运行在windows也可以用在unix，但需要重新编译。在windows上运行的时候依赖cygwin1.dll库，它提供了在windows上posix接口。</p></li></ol><h2 id="安装MinGW环境"><a href="#安装MinGW环境" class="headerlink" title="安装MinGW环境"></a>安装MinGW环境</h2><ol><li><p>先安装MSys2，下载地址为<a href="http://sourceforge.net/projects/msys2，安装的时候路径不要有空格。" target="_blank" rel="noopener">http://sourceforge.net/projects/msys2，安装的时候路径不要有空格。</a></p></li><li><p>安装过程很简单，根据提示安装即可</p></li><li><p>安装完后，需要用包管理工具更新系统，首先了解下pacman的命令</p></li></ol><p>常用命令：如下。<a href="https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">更多命令</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pacman -S package_name  <span class="comment">#安装软件包</span></span><br><span class="line">pacman -R package_name  <span class="comment">#删除软件包</span></span><br><span class="line">pacman -Rs package_name <span class="comment">#顺便删除软件包相关依赖</span></span><br><span class="line">pacman -Syu             <span class="comment">#升级系统中的所有包</span></span><br><span class="line">pacman -Ss package      <span class="comment">#查询软件包</span></span><br><span class="line">pacman -Qs package      <span class="comment">#查询已安装的包</span></span><br><span class="line">pacman -Qi package      <span class="comment">#显示查找的包的信息</span></span><br><span class="line">pacman -Ql package      <span class="comment">#显示你要找的包的文件都安装的位置</span></span><br><span class="line">pacman -Sw package      <span class="comment">#下载但不安装包</span></span><br><span class="line">pacman -U /path/package.pkg.tar.gz <span class="comment">#安装本地包</span></span><br><span class="line">pacman -Scc             <span class="comment">#清理包缓存，下载的包会在/var/cache 这个目录</span></span><br><span class="line">pacman -Sf pacman       <span class="comment">#重新安装包</span></span><br></pre></td></tr></table></figure><p>更新过程：运行msys2_shell.bat，启动MSys2命令行窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级系统中的所有包</span></span><br><span class="line">pacman -Syu</span><br><span class="line"><span class="comment"># 更新核心包，更新完后执行autorebase.bat</span></span><br><span class="line">pacman -S --needed filesystem msys2-runtime bash libreadline libiconv libarchive libgpgme libcurl pacman ncurses libintl</span><br><span class="line"><span class="comment"># 再次启动msys2_shell.bat，用以下命令确认是否为最新</span></span><br><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure><p>如果更新太慢，把软件源换到国内，修改/etc/pacman.d/中有三个mirrorlist文件，分别为mingw32,mingw64以及msys的源，具体配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## MSYS2 repository mirrorlist</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Primary</span></span><br><span class="line"><span class="comment">## msys2.org</span></span><br><span class="line"><span class="comment">## 中国科学技术大学开源软件镜像</span></span><br><span class="line"><span class="attr">Server</span> = http://mirrors.ustc.edu.cn/msys2/REPOS/MSYS2/<span class="variable">$arch</span></span><br><span class="line"><span class="attr">Server</span> = http://repo.msys2.org/msys/<span class="variable">$arch</span></span><br><span class="line"><span class="attr">Server</span> = http://downloads.sourceforge.net/project/msys2/REPOS/MSYS2/<span class="variable">$arch</span></span><br><span class="line"><span class="attr">Server</span> = http://www2.futureware.at/~nickoe/msys2-mirror/msys/<span class="variable">$arch</span>/</span><br><span class="line"> </span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## 32-bit Mingw-w64 repository mirrorlist</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Primary</span></span><br><span class="line"><span class="comment">## msys2.org</span></span><br><span class="line"><span class="comment">## 中国科学技术大学开源软件镜像</span></span><br><span class="line"><span class="attr">Server</span> = http://mirrors.ustc.edu.cn/msys2/REPOS/MINGW/i686</span><br><span class="line"><span class="attr">Server</span> = http://repo.msys2.org/mingw/i686</span><br><span class="line"><span class="attr">Server</span> = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686</span><br><span class="line"><span class="attr">Server</span> = http://www2.futureware.at/~nickoe/msys2-mirror/i686/</span><br><span class="line"> </span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## 64-bit Mingw-w64 repository mirrorlist</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Primary</span></span><br><span class="line"><span class="comment">## msys2.org</span></span><br><span class="line"><span class="comment">## 中国科学技术大学开源软件镜像</span></span><br><span class="line"><span class="attr">Server</span> = http://mirrors.ustc.edu.cn/msys2/REPOS/MINGW/x<span class="number">86_64</span></span><br><span class="line"><span class="attr">Server</span> = http://repo.msys2.org/mingw/x<span class="number">86_64</span></span><br><span class="line"><span class="attr">Server</span> = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/x<span class="number">86_64</span></span><br><span class="line"><span class="attr">Server</span> = http://www2.futureware.at/~nickoe/msys2-mirror/x<span class="number">86_64</span>/</span><br></pre></td></tr></table></figure><ol start="4"><li>查看软件包：</li></ol><p>MSys2包含了哪些软件包：<a href="https://github.com/Alexpux/MSYS2-packages" target="_blank" rel="noopener">https://github.com/Alexpux/MSYS2-packages</a></p><p>MinGW-64包含了哪些软件包：<a href="https://github.com/Alexpux/MINGW-packages" target="_blank" rel="noopener">https://github.com/Alexpux/MINGW-packages</a></p><ol start="5"><li>安装一些必要的软件包，看个人需要。另外因为我用的是64位系统，且编译的程序也是64位的，所以尽量安装mingw-w64的包。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pacman -S autoconf</span><br><span class="line">pacman -S autogen</span><br><span class="line">pacman -S automake</span><br><span class="line">pacman -S vim</span><br><span class="line">pacman -S tar</span><br><span class="line">pacman -S zip</span><br><span class="line">pacman -S unzip</span><br><span class="line">pacman -S mingw-w64-x86_64-pkg-config</span><br><span class="line">pacman -S mingw-w64-x86_64-gcc</span><br><span class="line">pacman -S mingw64/mingw-w64-x86_64-cmake</span><br><span class="line"><span class="comment"># 在mingw64/bin目录下，执行cp mingw32-make.exe make.exe</span></span><br><span class="line">pacman -S mingw64/mingw-w64-x86_64-make</span><br><span class="line">pacman -S mingw-w64-x86_64-luajit</span><br><span class="line">pacman -S mingw-w64-x86_64-doxygen</span><br><span class="line">pacman -S mingw-w64-x86_64-graphviz</span><br><span class="line"><span class="comment"># qt包有1g多，看需要安装，这里安装主要是让cmake支持cmake-gui</span></span><br><span class="line">pacman -S mingw-w64-x86_64-qt5</span><br></pre></td></tr></table></figure><h2 id="使用MinGW环境"><a href="#使用MinGW环境" class="headerlink" title="使用MinGW环境"></a>使用MinGW环境</h2><ol><li><p>尽量使用MinGW工具，而不安装windows工具。如</p><ul><li>cmake</li><li>make</li><li>lua/luajit</li><li>doxygen</li><li>graphviz</li></ul></li><li><p>Git是例外，因为在git目录下，使用自己安装的MinGW显示Git状态速度特别慢，而用Git自带的MinGW则非常快。测试函数如下</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这两个是跟显示Git状态相关的脚步，具体内容google</span></span><br><span class="line"><span class="comment"># curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</span></span><br><span class="line"><span class="comment"># curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o ~/.git-prompt.sh</span></span><br><span class="line">time __git_ps1</span><br></pre></td></tr></table></figure><ol start="3"><li>所以一般情况下，不用自己安装的MinGW，而是使用Git自带的MinGW。这样一来，又解决另外一个问题<ul><li>命令行工具问题，原因是<ul><li>windows的cmd不是很好用</li><li>像cmder的工具总是有这样那样的bug</li><li>工具链够全，且容易扩展，在windows的PATH中添加“C:\msys64\mingw64\bin”目录</li></ul></li></ul></li></ol><ol start="4"><li>需要包管理的时候，还是使用msys2_shell.bat，但建议使用快捷方式，加以下参数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-use-full-path  <span class="comment"># 使用windows的PATH全路径</span></span><br><span class="line">-mingw64        <span class="comment"># 使用mingw64</span></span><br><span class="line"><span class="comment">#mingw32 : 优先使用 msys64/mingw32 下的工具;</span></span><br><span class="line"><span class="comment">#mingw64 : 优先使用 msys64/mingw64 下的工具;</span></span><br><span class="line"><span class="comment">#msys2   : 两个都不使用，只用自身 msys 的工具;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>改进Git自带的MinGW，看着更加舒适些。它是使用mintty作为终端模拟的，在“~目录”下加“.minttyrc”文件，内容如下</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BoldAsFont</span>=-<span class="number">1</span></span><br><span class="line"><span class="attr">CursorColour</span>=<span class="number">0</span>,<span class="number">255</span>,<span class="number">64</span></span><br><span class="line"><span class="attr">CursorType</span>=block</span><br><span class="line"><span class="attr">Font</span>=Consolas</span><br><span class="line"><span class="attr">FontHeight</span>=<span class="number">12</span></span><br><span class="line"><span class="attr">Locale</span>=zh_CN</span><br><span class="line"><span class="attr">Charset</span>=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">Columns</span>=<span class="number">120</span></span><br><span class="line"><span class="attr">Rows</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">Term</span>=xterm-<span class="number">256</span>color</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类MinGW环境有哪些&quot;&gt;&lt;a href=&quot;#类MinGW环境有哪些&quot; class=&quot;headerlink&quot; title=&quot;类MinGW环境有哪些&quot;&gt;&lt;/a&gt;类MinGW环境有哪些&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MinGW：是Minimalist GNU for
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>比特币全节点部署</title>
    <link href="https://mybestcool.github.io/2018/07/29/bitcoin-full-node/"/>
    <id>https://mybestcool.github.io/2018/07/29/bitcoin-full-node/</id>
    <published>2018-07-29T11:50:45.000Z</published>
    <updated>2018-07-29T13:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>比特币节点有很多实现</p><ul><li><a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="noopener">bitcoin core</a>：官方节点，c/c++实现，正式网络大多数都是用这个来运行全节点</li><li><a href="https://github.com/btcsuite/btcd" target="_blank" rel="noopener">btcd</a>：golang的实现版本，如果用golang来写一些功能，可以参考这个代码</li><li><a href="https://github.com/libbitcoin/libbitcoin" target="_blank" rel="noopener">libbitcoin</a>：c/c++实现，特点是它有较好的工具链</li><li><a href="https://github.com/paritytech/parity-bitcoin" target="_blank" rel="noopener">parity-bitcoin</a>：rust实现，是以太坊创始人之一Gavin Wood的新公司Parity Technologies下的一个产品，它同样也实现了以太坊rust版本</li></ul><p>还有很多其他实现，如java版本和js版本。如果用作商业用途，那bitcoin core必然是最稳妥的选择。所以这里选择了bitcoin core。</p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><ul><li>硬盘：500G。比特币从08年开始运行，已经积累了大量数据，区块链内容大小达210G。</li><li>内存：16G。一般来说4G就够，但如果要查历史记录，需要加载完整的交易索引表-tindex，这导致需要8G+的内存</li><li>cpu：4核。</li><li>带宽：一般就行。阿里云的一般2-3天就能同步完。</li><li>系统选择：centos 7版本</li></ul><h2 id="节点设置"><a href="#节点设置" class="headerlink" title="节点设置"></a>节点设置</h2><ul><li>下载<a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="noopener">bitcoin core</a>Linux版本bitcoin-0.16.1-x86_64-linux-gnu.tar.gz</li><li>解压到系统目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf bitcoin-0.16.1-x86_64-linux-gnu.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><ul><li>bitcoin的默认配置目录为 ~/.bitcoin/bitcoin.conf，填写以下配置，</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This config should be placed in following path:</span></span><br><span class="line"><span class="comment"># ~/.bitcoin/bitcoin.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [core]</span></span><br><span class="line"><span class="comment"># Specify a non-default location to store blockchain and other data.</span></span><br><span class="line"><span class="attr">datadir</span>=/data/btc_data</span><br><span class="line"><span class="comment"># Set database cache size in megabytes; machines sync faster with a larger cache. Recommend setting as high as possible based upon machine's available RAM.</span></span><br><span class="line"><span class="attr">dbcache</span>=<span class="number">10240</span></span><br><span class="line"><span class="comment"># Maintain a full transaction index, used by the getrawtransaction rpc call.</span></span><br><span class="line"><span class="attr">txindex</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [rpc]</span></span><br><span class="line"><span class="comment"># Enable Add Witness Address RPC</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deprecatedrpc</span>=addwitnessaddress</span><br><span class="line"></span><br><span class="line"><span class="comment"># Accept command line and JSON-RPC commands.</span></span><br><span class="line"><span class="attr">server</span>=<span class="number">1</span></span><br><span class="line"><span class="comment"># Accept public REST requests.</span></span><br><span class="line"><span class="attr">rest</span>=<span class="number">1</span></span><br><span class="line"><span class="comment"># Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times. (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)</span></span><br><span class="line"><span class="attr">rpcbind</span>=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8332</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rpcuser</span>=btcuser</span><br><span class="line"><span class="attr">rpcpassword</span>=btcpassword</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpcallowip=0.0.0.0</span></span><br></pre></td></tr></table></figure><ul><li>启动bitcoin</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -daemon</span><br></pre></td></tr></table></figure><ul><li>关闭bitcoin，一定要用以下命令，否则会有可能导致数据异常，需要重新同步数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoin-cli stop</span><br></pre></td></tr></table></figure><ul><li>一些其他命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络状态：</span></span><br><span class="line">bitcoin-cli getnetworkinfo</span><br><span class="line"><span class="comment"># 查看网络节点：</span></span><br><span class="line">bitcoin-cli getpeerinfo</span><br><span class="line"><span class="comment"># 查看区块链信息：如同步进度、</span></span><br><span class="line">bitcoin-cli getblockchaininfo</span><br><span class="line"><span class="comment"># 查看所有命令</span></span><br><span class="line">bitcoin-cli <span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>其他，确保ntp服务是开启的，大多数区块链都要求开启。</li></ul><h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><ul><li><a href="https://bitnodes.earn.com/" target="_blank" rel="noopener">比特币全球节点分布</a></li><li><a href="https://www.blockchain.com/en/explorer" target="_blank" rel="noopener">比特币浏览器</a></li><li><a href="http://chainquery.com/bitcoin-api" target="_blank" rel="noopener">比特币在线RPC接口</a></li><li><a href="https://mistydew.github.io/archive.html" target="_blank" rel="noopener">比特币RPC接口解析</a></li><li><a href="https://bitcoinfees.earn.com/" target="_blank" rel="noopener">比特币交易费查询</a></li><li><a href="https://jlopp.github.io/bitcoin-core-config-generator/" target="_blank" rel="noopener">比特币配置工具</a></li><li><a href="http://book.8btc.com/books/6/masterbitcoin2cn/_book/" target="_blank" rel="noopener">推荐书：精通比特币</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选型&quot;&gt;&lt;a href=&quot;#选型&quot; class=&quot;headerlink&quot; title=&quot;选型&quot;&gt;&lt;/a&gt;选型&lt;/h2&gt;&lt;p&gt;比特币节点有很多实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bitcoin/bitcoin&quot; t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微博爬虫技术方案</title>
    <link href="https://mybestcool.github.io/2018/07/13/crawler-weibo/"/>
    <id>https://mybestcool.github.io/2018/07/13/crawler-weibo/</id>
    <published>2018-07-13T01:48:57.000Z</published>
    <updated>2018-07-13T02:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>目的：实现爬取相关微博的评论、转发、点赞等信息</li><li>方案：<ul><li>在网上搜索了一遍后，相对觉得python比较好用。现存的解决方案多，实现爬虫开发速度快，且开源项目也多，但大多数都是娱乐性质的</li><li>又找了一遍后，觉得<a href="https://github.com/SpiderClub/weibospider" target="_blank" rel="noopener">WeiboSpider</a>这个项目相对可以商业化，就基于这个项目来实现吧</li><li>WeiboSpider使用到的工具：python3.5、mysql、redis</li></ul></li></ul><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><ul><li><p>原WeiboSpider架构，主要使用技术celery库，分成三个部分</p><ul><li>使用定时器触发事件：如每隔20小时登录一次，每隔5分钟执行一次抓取评论、抓发和点赞信息，定时器有以下2中方法<ul><li>crontab，定时调用下python脚本</li><li>使用celery功能，如”celery beat -A tasks.workers -l info”</li></ul></li><li>使用celery爬取微博：celery会把触发事件插入到redis，celery开启工作线程执行爬取<ul><li>“celery -A tasks.workers -l info”</li></ul></li><li>工作线程把爬取的内容插入到数据库，目前使用的是mysql</li></ul></li><li><p>在原来的基础上，加了两个服务</p><ul><li>爬虫前端服务：<ul><li>提供微博的实时接口，如查询等功能，这些功能因为数据量太大，就直接转向微博</li><li>定时触发事件功能</li></ul></li><li>接口服务：<ul><li>多种接入协议支持，如http，ws等</li><li>转发微博的实时接口，对接到爬虫前端服务</li><li>这层接口更加业务化，它从数据库组织数据，发送给应用端</li></ul></li></ul></li></ul><h2 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h2><ul><li>WeiboSpider中需要注意的问题<ul><li>数据库连接不支持多线程</li><li>数据库连接长时间没有操作，会失去连接</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;技术选型&quot;&gt;&lt;a href=&quot;#技术选型&quot; class=&quot;headerlink&quot; title=&quot;技术选型&quot;&gt;&lt;/a&gt;技术选型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;目的：实现爬取相关微博的评论、转发、点赞等信息&lt;/li&gt;
&lt;li&gt;方案：&lt;ul&gt;
&lt;li&gt;在网上搜索了一遍后，相
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Managing OneSelf 整理</title>
    <link href="https://mybestcool.github.io/2018/06/30/manage-oneself/"/>
    <id>https://mybestcool.github.io/2018/06/30/manage-oneself/</id>
    <published>2018-06-30T04:40:31.000Z</published>
    <updated>2018-06-30T04:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://medium.com/@leenasn/managing-oneself-book-summary-4e592909e5db" target="_blank" rel="noopener">英文版本</a></p><p><a href="http://www.luluw.com/a/6449/" target="_blank" rel="noopener">中文翻译</a></p><p><a href="https://www.jianshu.com/p/437c6dc98489" target="_blank" rel="noopener">中文总结</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《Managing Oneself》翻译成《自我管理》，是摘自德鲁克1999年出版的《21世纪的管理挑战》一书，这是此书的最后一章内容。</p><p>历史上的伟人，不但天资卓越，而且还很会管理自我，所以才取得了不同于常人的成就。</p><p>在当今的世界，由于社会的变革，更需要我们能够自我管理，即便你是有点天赋的人。</p><p>那么如何管理呢，德鲁克介绍了以下几个方面</p><ul><li>我的长处是什么？</li><li>我的工作方式是怎样的？</li><li>我的价值观是什么？</li><li>我属于何处？</li><li>我该做什么贡献？</li><li>我要如何处理人际关系？</li><li>我改如何管理后半生？</li></ul><h2 id="我的长处是什么？"><a href="#我的长处是什么？" class="headerlink" title="我的长处是什么？"></a>我的长处是什么？</h2><p>不是每个人都很清楚自己的长处是什么，即使知道，可能认识也不够清晰。但要成功，就要做自己擅长的事情。</p><p>这里有一种了解长处的方法：回馈分析法(feedback analysis)。每当要做出决定或者采取重要行动时，记录下自己对结果的预期；一段时间后，在将结果与自己的预期进行比较和分析。</p><p>当使用回馈分析法(feedback analysis)后，会发现哪些一些事情，如：</p><ul><li>专注自己的长处，把自己放到能发挥自己长处的地方去</li><li>加强自己的长处，根据回馈分析法，知道了自己的长处，但在这个长处上，还缺乏一些技能和知识，那么去填补它们</li><li>根据回馈分析法，会发现对一些事物的傲慢与偏见，去克服它们</li><li>根据回馈分析法，会发现一些阻碍自己的坏习惯，如哪些影响工作成效和表现的事情</li><li>根据回馈分析法，会发现一些社交中举止言行不得体和缺乏礼貌的地方</li><li>同样会发现自己不擅长的事情，那我们应该尽量少把精力浪费在那些不能胜任的领域上，因为“从无能到平庸”要比“从一流到卓越”需要人们付出多得多的努力</li></ul><h2 id="我的工作方式是怎样的？"><a href="#我的工作方式是怎样的？" class="headerlink" title="我的工作方式是怎样的？"></a>我的工作方式是怎样的？</h2><p>一个人的工作方式也是独一无二的——这是由人的个性所决定的。一个人的工作方式也基本固定，它可以略微有所调整，但是不可能完全改变</p><p>我属于读者型，还是听者型？</p><p>我如何学习？知行合一</p><p>一些人作为团队成员工作最出色；另一些人单独工作最出色。</p><p>一些人当教练和导师特别有天赋；另一些人却没能力做导师。</p><p>许多人做顾问时的表现会很出色，但是不能够承担决策的负担和压力。与此相反，也有许多人需要顾问来迫使他们思考，随后他们才能做出决定，接着迅速、自信和大胆地执行决定。</p><p>我是在压力下表现出色，还是适应一种按部就班、可预测的工作环境？</p><p>我是在一个大公司还是在一个小公司中工作表现最佳？</p><p>Do not try to change yourself。work to improve the way you perfrom。</p><h2 id="我的价值观是什么？"><a href="#我的价值观是什么？" class="headerlink" title="我的价值观是什么？"></a>我的价值观是什么？</h2><p>如果一个组织的价值体系不为自己所接受或者与自己的价值观不相容，人们就会备感沮丧，工作效力低下。</p><p>组织和人一样，也有价值观。为了在组织中取得成效，个人的价值观必须与这个组织的价值观相容。两者的价值观不一定要相同，但是必须相近到足以共存。</p><p>一个人的工作方式和他的长处很少发生冲突，相反，两者能产生互补。但是，一个人的价值观有时会与他的长处发生冲突。一个人做得好甚至可以说是相当好、相当成功的事情——可能与其价值体系不吻合。在这种情况下，这个人所做的工作似乎并不值得贡献毕生的精力（甚至没必要贡献太多的精力）。</p><h2 id="我属于何处？"><a href="#我属于何处？" class="headerlink" title="我属于何处？"></a>我属于何处？</h2><p>成功的事业不是预先规划的，而是在人们知道了自己的长处、工作方式和价值观后，准备把握机遇时水到渠成的。知道自己属于何处，可使一个勤奋、有能力但原本表现平平的普通人，变成出类拔萃的工作者。</p><h2 id="我该做什么贡献？"><a href="#我该做什么贡献？" class="headerlink" title="我该做什么贡献？"></a>我该做什么贡献？</h2><p>要回答这个问题，他们必须考虑三个不同的因素：</p><ul><li>what does the situation need？</li><li>from strengths、way of work、values， What is the greatest contribution i can make？</li><li>what results have to be achieved to make a difference？</li></ul><h2 id="我要如何处理人际关系？"><a href="#我要如何处理人际关系？" class="headerlink" title="我要如何处理人际关系？"></a>我要如何处理人际关系？</h2><p>每个人都会执意展现自己作为人的个性。这就是说，每个人都有自己的长处，自己的做事方式和自己的价值观。因此，要想卓有成效，你就必须知道共事者的长处、工作方式和价值观。</p><p>人际关系责任的另一方面是沟通责任。明确别人在做什么、如何做、重要性、期望结果，以及他对别人的期望是什么</p><p>组织已不再建立在强权的基础上，而是建立在信任的基础上。人与人之间相互信任，不一定意味着他们彼此喜欢对方，而是意味着彼此了解。因此，人们绝对有必要对自己的人际关系负责。这是一种义务。不管一个人是公司的一名成员，还是公司的顾问、供应商或经销商，他都需要对他的所有共事者负起这种责任。所谓共事者，是指在工作上他所依赖的同事以及依赖他的同事。</p><h2 id="我改如何管理后半生？"><a href="#我改如何管理后半生？" class="headerlink" title="我改如何管理后半生？"></a>我改如何管理后半生？</h2><p>其实说的更像是个人的规划，那为啥要规则，有几个原因：</p><ul><li>抗风险，反脆弱，我们需要有更多的选择</li><li>人都会疲倦，对原来的工作缺乏满足感</li><li>在现在社会，个人比组织更长寿，甚至比行业更长寿</li><li>我们都崇尚成功，都不想向下流动</li></ul><p>最简单的方法，是发展第二职业，有几种选择，根据自身的情况去选择：</p><ul><li>投身于新的工作</li><li>发展一个平行职业</li><li>创业</li></ul><p>管理好后半生有一个先决条件：你必须早在你进入后半生之前就开始行动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@leenasn/managing-oneself-book-sum
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>区块链跨链技术</title>
    <link href="https://mybestcool.github.io/2018/06/19/across-the-chain-tech/"/>
    <id>https://mybestcool.github.io/2018/06/19/across-the-chain-tech/</id>
    <published>2018-06-19T02:18:45.000Z</published>
    <updated>2018-06-25T02:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>无法跨链的区块链就如网站没有浏览器，互联网没有搜索引擎。</p><p>跨链技术是实现区块链价值互联的关键，它是把区块链从分散的孤岛中拯救出来的良药，是区块链向外拓展和连接的桥梁。</p><h2 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h2><p>基础的跨链满足以下5个步骤：</p><ol><li>在A链的用户A向在B链的用户B发起兑换请求</li><li>跨链协议锁定A链币</li><li>跨链协议锁定等值数量的B链币</li><li>将B链币发到用户B的钱包地址，同时拿走锁定的用户A的链币</li><li>在A链上用户A的币被转走，同时在B链上用户B得到等值的币</li></ol><p>根据这5个步骤，需要区块链5项能力</p><ol><li>便携式资产（portable assets）：资产可以多条链之间来回转移和使用</li><li>满足原子性交换（atomic swap）：跨链资产兑换是安全的而且同步发生的。（不同链上的两位用户可以发起两笔传输交易，要么在两个账本上一起执行，要么两个账本都不执行，即原子性）</li><li>带有跨链互通性，具备他链信息和事件的读取和验证能力（Cross-chain oracle issues）：在某些情况下，一个链（如A链）的智能合约执行机制可能是依赖另一个链（B链）的条件触发，所以A链要能获得B链的所有相关条件状态，即c具备他链信息和事件的读取和验证能力。</li><li>资产留置权（Asset encumbrance）：在某些情况下，相关联的两个链资产同时需要被锁定，如抵押品或者法院强制执行的扣押等。</li><li>跨链执行合约（General cross-chain contracts）：例如根据链A的股权证明在链B上分发股息等。</li></ol><h2 id="跨链技术主要有以下几种"><a href="#跨链技术主要有以下几种" class="headerlink" title="跨链技术主要有以下几种"></a>跨链技术主要有以下几种</h2><ul><li>公证人机制(notary schemes)</li><li>侧链/中继(sidechains/relays)</li><li>哈希锁定(hash-locking)</li><li>分布式私钥控制(distributed private key control)</li><li>公证人机制+侧链混合技术(notary schemes + sidechains mixing technology)</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9076397-4eaef31a4b5183aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><h2 id="公证技术：如瑞波Interledger协议-★★★"><a href="#公证技术：如瑞波Interledger协议-★★★" class="headerlink" title="公证技术：如瑞波Interledger协议 ★★★"></a>公证技术：如瑞波Interledger协议 ★★★</h2><p>在2012年，ILP由瑞波实验室提出，解决不同账本之间的协同。流程如下</p><ol><li>Alice是拥有A链的账户，Bob是拥有B链的货币，Cot是拥有A、B链的货币；Alice将向Bob进行一笔交易（如转账）</li><li>Alice通过其他通讯手段，得到Bob提供的一个“共享密码”以及Bob在ILP网络中的对应唯一地址（如bob.ripple.rHCvhtqhXuBvWt5g79gyXfpG8VcrvUm9E9）</li><li>Alice向Cot询价，Cot根据Alice的转账金额和市场行情算出总的交易额（包括交易费）</li><li>Alice根据ILP规定生成ILP包，指定目标目标地址为Cot，同时给予ILP包的私有内容和“共享密码”生成一个“条件原像”，对“条件原像”HASH生成交易托管所需要的“条件”</li><li>Alice在A链上发起一个托管交易（转账），托管条件为4所生成的条件，设置超时时间</li><li>Cot在A链上检查到一笔涉及自己的托管交易，同时收到Alice的ILP包；计算和校对需要交易的额度后，将ILP包目标地址修正为Bob，并在B链上发起一个托管操作，设定交易条件为Alice的交易条件，设定超时时间，超时时间小于5.的时间，然后将ILP包发送给Bob</li><li>Bob收到ILP包，用“公共密码”解出“条件原像”，用HASH校对“条件”；同时检测到B链上的托管交易，校对金额后，转入“条件原像”，确认收到交易的金额</li><li>Cot在B链检测到涉及自己的托管交易被确定，分析交易数据，得到“条件原像”；把“条件原像”输入到A链上，并确认交易，收到交易的金额和手续费</li><li>Alice在A链上检测到涉及自己的托管交易被确定，此次交易完成</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/9076397-967de59f70611df3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/661" alt="img"></p><h2 id="侧链技术：BTC-Relay-★★"><a href="#侧链技术：BTC-Relay-★★" class="headerlink" title="侧链技术：BTC Relay ★★"></a>侧链技术：BTC Relay ★★</h2><p>BTC Relay 是在以太坊基金会支持下诞生并成长起来的，属于早期的侧链技术。它在以太坊上建立一个bitcoin轻钱包，用于操作bitcoin，并给以太坊智能合约提供操作bitcoin的接口，这样用合约就能完成BTC和ETH的交易。是非常简单的一种跨链技术。但它的交易费用特别高。</p><p><img src="https://upload-images.jianshu.io/upload_images/9076397-06813f320701266f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><h2 id="中继技术：Polkadot-★★★★★-其他如Cosmos，tendermint团队开发"><a href="#中继技术：Polkadot-★★★★★-其他如Cosmos，tendermint团队开发" class="headerlink" title="中继技术：Polkadot ★★★★★ (其他如Cosmos，tendermint团队开发)"></a>中继技术：Polkadot ★★★★★ (其他如Cosmos，tendermint团队开发)</h2><p>Polkadot（Parity公司开发）将区块链共识分成两个部分：有效性和一致性。有效性的概念是比如我有10个比特币，我转给A是有效的，我转给B也可以是有效的。但一致性的概念就是我只能转给其中某一个人，即使我发出了两笔有效的交易，最终网络会共识出一条最长链来达成一致，另一个交易会被丢弃。更加概括性地讲就是有效性负责运算，一致性负责投票，一个是强CPU依赖的，一个是强出块权依赖的。</p><p>Polkadot 结构中核心有两个部分：中继链和平行链，中继链负责一致性，平行链负责有效性。中继链采用POS共识算法，将主要借鉴Honeybarger，还有Tendermint。平行链由很多固定身份的收集人管理，以收集交易手续费为激励，为中继链提供自己的块头和跨链交易相关的证明数据，这部分数据在Polkadot里称为平行链的候选块，将来由中继链的验证人随机选定。由于平行链也不一定真有一条链，所以这里的块也是泛指。中继链会分成两类，第一类是类似以太坊和比特币这样有自身共识系统的区块链，他们有自身的POW矿工来维持链的运转，他们不能直接作为平行链参与到Polkadot网络中来，而是需要新成立一些收集人组建转接桥系统，将以太坊区块的数据整理为中继链所需的格式，这个转接桥系统才是Polkadot的平行链。第二类是还没有出现的过的区块链系统，他们将来的出块人就是收集人，他们链区块的决定权是由中继链的验证人决定的，这类系统可能才真正是Polkadot所设想的未来链。</p><p><img src="https://upload-images.jianshu.io/upload_images/9076397-fdf5b2e40cec1720.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><h2 id="哈希锁定技术：Lighting-network-★★"><a href="#哈希锁定技术：Lighting-network-★★" class="headerlink" title="哈希锁定技术：Lighting network ★★"></a>哈希锁定技术：Lighting network ★★</h2><p>闪电网络基本原理：Alice在A链与Bob在B链进行一笔交易</p><ol><li>Alice在A链用密码H=HASH(S)锁定一笔资产，并设定时限，时限到来前，如果有人能交出S，这笔资产就转给他，否则这笔资产归还给Alice</li><li>Alice将H发给Bob</li><li>Bob在B链上用H锁定一笔资产，设定时限，小于1.的时限，时限到来前，如果有人能交出S，这笔资产就转给他，否则这笔资产归还给Bob</li><li>Alice在B链上交出S，得到Bob锁定的资产，同时B得到了S</li><li>Bob在A链上交出S，得到Alice锁定的资产</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/9076397-c921f29e7739af40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/381" alt="img"></p><h2 id="分布式私钥控制技术：FUSION-★★★-其他如国内开发的WanChain"><a href="#分布式私钥控制技术：FUSION-★★★-其他如国内开发的WanChain" class="headerlink" title="分布式私钥控制技术：FUSION ★★★ (其他如国内开发的WanChain)"></a>分布式私钥控制技术：FUSION ★★★ (其他如国内开发的WanChain)</h2><p>Fusion在原链上设立锁定帐号，作为原链上的公证人，用户向fusion发起lock-in请求，然后将原链上的通证交给锁定账户，fusion上的智能合约验证请求，确认原链上的交易后，在fusion链上创造等值原链通证的标记符号，交给用户，之后用户可以在fusion上交易其他链通证的标记符号，提现时，用户在fusion上发起lock-out请求，验证节点将提现的标记符号锁定，用对应链上的锁定账户向用户发起转账，确认转账后销毁fusion上的标记符号。</p><p>采用锁定账户作为公证人，不可避免的是锁定账户的密钥控制问题，fusion中采用的是所谓分布式密钥存储的安全方案，本质上就是秘密共享技术，具体可以参考Shamir的(k,n)门限秘密共享方案，简单的理解就类似多重签名技术，由n个验证节点分别持有一部分密钥，每个节点只能知道自己的密钥，然后锁定账户的任何操作都至少要有k个验证节点的密钥，因此只要且必须要有至少k个验证节点通过，锁定帐号才能将锁定的原链资产提现给用户。相较于中心化的交易所，n个验证节点事实上构成了一个多中心的结构，避免了单个中心被攻击的危害，同时不需要设计完全去中心化结构的技术难点。</p><p><img src="https://upload-images.jianshu.io/upload_images/9076397-d49b302a951eb099.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550" alt="img"></p><h2 id="混合技术：Ether-Universe-★★★★"><a href="#混合技术：Ether-Universe-★★★★" class="headerlink" title="混合技术：Ether Universe ★★★★"></a>混合技术：Ether Universe ★★★★</h2><p>以太宇宙分为主链和不同区块链上的子链，主链是整个生态体系中的最重要部分，其承载了整个平台交互逻辑，记录了所有交互信息，链上产生的代币用于支付每次跨链服务所消耗的 gas。子链则用于辅助主链来对其他区块链进行双向锚定。</p><p><img src="https://static.leiphone.com/uploads/new/article/740_740/201804/5ac475830d6fc.png?imageMogr2/format/jpg/quality/90" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;无法跨链的区块链就如网站没有浏览器，互联网没有搜索引擎。&lt;/p&gt;
&lt;p&gt;跨链技术是实现区块链价值互联的关键，它是把区块链从分散的孤岛中拯救出
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最近遇到的关于docker的问题</title>
    <link href="https://mybestcool.github.io/2018/06/15/problem-about-docker/"/>
    <id>https://mybestcool.github.io/2018/06/15/problem-about-docker/</id>
    <published>2018-06-15T05:29:52.000Z</published>
    <updated>2018-06-15T05:34:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题1：docker-v-与-onedrive-冲突"><a href="#问题1：docker-v-与-onedrive-冲突" class="headerlink" title="问题1：docker -v 与 onedrive 冲突"></a>问题1：docker -v 与 onedrive 冲突</h2><ul><li>问题现象</li></ul><p>在windows下docker用Ubuntu镜像生成容器，用-v映射到本地目录，如果这个目录也是onedrive包含的目录，那有可能导致onedrive一直卡在“正在更新文件”中</p><ul><li><p>解决办法</p><ul><li>停掉和删除容器</li><li>重设onedrive，键盘win+r，输入“%localappdata%\Microsoft\OneDrive\onedrive.exe /reset”</li><li>重启操作系统</li></ul></li><li><p>这种方法但失去了在容器上操作文件后能直接同步到onedrive的功能，暂时用以下办法代替</p><ul><li>目录copy一份到别的路径下，然后写一个脚本，按差异复制到onedrive目录</li></ul></li></ul><p>以下是同步脚本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> NOWDIR=%~dp0</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%NOWDIR%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> SRC=...</span><br><span class="line"><span class="built_in">set</span> DST=...</span><br><span class="line"></span><br><span class="line"><span class="built_in">xcopy</span> "<span class="variable">%SRC%</span>\server" "<span class="variable">%DST%</span>\server" /s /h /d /y /exclude:uncopy.txt</span><br></pre></td></tr></table></figure><p>以下是uncopy.txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*.so</span><br><span class="line">*.o</span><br><span class="line">*.a</span><br><span class="line">*.log</span><br><span class="line">*.dSYM</span><br><span class="line"></span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br><span class="line">*.rock</span><br><span class="line">*.rockspec</span><br><span class="line">.DS_Store</span><br><span class="line">*.pid</span><br></pre></td></tr></table></figure><ul><li>用系统的任务计划来执行脚本，把文件同步到onedrive下</li></ul><h2 id="问题2：docker-v映射目录后，容器中不生效"><a href="#问题2：docker-v映射目录后，容器中不生效" class="headerlink" title="问题2：docker -v映射目录后，容器中不生效"></a>问题2：docker -v映射目录后，容器中不生效</h2><ul><li><p>引起这个问题的原因是更新了操作系统的密码，解决办法如下</p><ul><li>打开docker设置，在sharedrives栏，reset credentials…，然后选择shared的盘符，重新输入系统密码</li><li>重新生成容器</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题1：docker-v-与-onedrive-冲突&quot;&gt;&lt;a href=&quot;#问题1：docker-v-与-onedrive-冲突&quot; class=&quot;headerlink&quot; title=&quot;问题1：docker -v 与 onedrive 冲突&quot;&gt;&lt;/a&gt;问题1：doc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>typescript_learning</title>
    <link href="https://mybestcool.github.io/2018/06/06/typescript-learning/"/>
    <id>https://mybestcool.github.io/2018/06/06/typescript-learning/</id>
    <published>2018-06-06T08:49:07.000Z</published>
    <updated>2018-06-06T08:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-转自legacy的gitbook"><a href="#TypeScript-转自legacy的gitbook" class="headerlink" title="TypeScript,转自legacy的gitbook"></a>TypeScript,转自<a href="https://ts.xcatliu.com" target="_blank" rel="noopener">legacy的gitbook</a></h1><h2 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p>tsc 对类型做静态检查，如果有错误，编译会报错，但会继续生成编译结果</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>原始数据类型</li></ol><ul><li>布尔值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li>null类型 和 undefined类型，他俩是所有类型的子类型，即可以赋值给其他类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>数值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 16 进制</span></span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> notANumber: <span class="built_in">number</span> = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> infinityNumber: <span class="built_in">number</span> = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><ul><li>字符串</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName: <span class="built_in">string</span> = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> myAge: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>.</span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123;myAge + 1&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure><ul><li>空值, 用于函数返回值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>任意类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><ul><li>联合类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>对象的类型</li></ol><ul><li>接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>可选属性，带?</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>任意属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用 [propName: string] 定义了任意属性取 string 类型的值。</p><p>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性</p><ul><li>只读属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure><p>上例中，使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。</p><p>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</p><ol start="3"><li>数组类型</li></ol><ul><li>基本数组 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><ul><li>泛型数组</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><ol start="4"><li>函数类型</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明（Function Declaration）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式（Function Expression）</span></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>类型断言</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>声明文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuery: <span class="function">(<span class="params"><span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">jQuery(<span class="string">'#foo'</span>);</span><br></pre></td></tr></table></figure><ol start="7"><li>内置对象</li></ol><ul><li><p>ECMAScript内置对象，在<a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">typescript核心库</a>中已经定义好了，还扩展了内置对象，如DOM、BOM等</p></li><li><p>其他第三方，如node，可以用npm来生成</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/node --save-dev</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ol><li>类型别名，关键词type</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串字面量类型，关键词type</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">'click'</span> | <span class="string">'scroll'</span> | <span class="string">'mousemove'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>), <span class="string">'scroll'</span>);  <span class="comment">// 没问题</span></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'world'</span>), <span class="string">'dbclick'</span>); <span class="comment">// 报错，event 不能为 'dbclick'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>元组，数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu[<span class="number">0</span>] = <span class="string">'Xcat Liu'</span>;</span><br><span class="line">xcatliu[<span class="number">1</span>] = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">xcatliu[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">xcatliu[<span class="number">1</span>].toFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>越界的元素,当赋值给越界的元素时，它类型会被限制为元组中每个类型的联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xcatliu: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">xcatliu = [<span class="string">'Xcat Liu'</span>, <span class="number">25</span>];</span><br><span class="line">xcatliu.push(<span class="string">'http://xcatliu.com/'</span>);</span><br><span class="line">xcatliu.push(<span class="literal">true</span>); <span class="comment">// 报错，不能push boolean类型</span></span><br></pre></td></tr></table></figure><ol start="4"><li>枚举，关键词enum</li></ol><ul><li>普通枚举</li></ul><p>枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sun"</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Mon"</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Tue"</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="string">"Sat"</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">0</span>] === <span class="string">"Sun"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">1</span>] === <span class="string">"Mon"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">2</span>] === <span class="string">"Tue"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Days[<span class="number">6</span>] === <span class="string">"Sat"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>常数枚举</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 外部枚举</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. 类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 属性与方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用 class 定义类，使用 constructor 定义构造函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过 new 生成新实例的时候，会自动调用构造函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> typescript</span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;this.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></span><br></pre></td></tr></table></figure><ul><li>继承</li></ul><p>使用 extends 关键字实现继承，子类中使用 super 关键字来调用父类的构造函数和方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name); <span class="comment">// 调用父类的 constructor(name)</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.sayHi(); <span class="comment">// 调用父类的 sayHi()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>); <span class="comment">// Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(c.sayHi()); <span class="comment">// Meow, My name is Tom</span></span><br></pre></td></tr></table></figure><ul><li>存取器</li></ul><p>使用 getter 和 setter 可以改变属性的赋值和读取行为：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Jack'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> name(value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'setter: '</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Kitty'</span>); <span class="comment">// setter: Kitty</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>; <span class="comment">// setter: Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure><ul><li>静态方法</li></ul><p>使用 static 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">static</span> isAnimal(a) &#123;</span><br><span class="line">        <span class="keyword">return</span> a <span class="keyword">instanceof</span> Animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line">Animal.isAnimal(a); <span class="comment">// true</span></span><br><span class="line">a.isAnimal(a); <span class="comment">// TypeError: a.isAnimal is not a function</span></span><br></pre></td></tr></table></figure><ul><li><p>public private 和 protected</p></li><li><p>抽象类</p></li></ul><p>abstract 用于定义抽象类和其中的抽象方法。</p><p>抽象类是不允许被实例化的;抽象类中的抽象方法必须被子类实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> sayHi() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Meow, My name is <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>类与接口</li></ol><ul><li>类继承接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Door &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SecurityDoor <span class="keyword">extends</span> Door <span class="keyword">implements</span> Alarm &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'SecurityDoor alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类继承多个接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Light &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm, Light &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light on'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOff() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口继承接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> LightableAlarm <span class="keyword">extends</span> Alarm &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口继承类</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>混合类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">    (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>namespace，之前叫module，内部使用export导出，引入的时候用全名或者import成别名</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TypeScript-转自legacy的gitbook&quot;&gt;&lt;a href=&quot;#TypeScript-转自legacy的gitbook&quot; class=&quot;headerlink&quot; title=&quot;TypeScript,转自legacy的gitbook&quot;&gt;&lt;/a&gt;TypeS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu命令行设置ipfs开发环境</title>
    <link href="https://mybestcool.github.io/2018/06/04/ipfs-dev-config/"/>
    <id>https://mybestcool.github.io/2018/06/04/ipfs-dev-config/</id>
    <published>2018-06-04T10:57:16.000Z</published>
    <updated>2018-06-04T11:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署一台Ubuntu服务器"><a href="#部署一台Ubuntu服务器" class="headerlink" title="部署一台Ubuntu服务器"></a>部署一台Ubuntu服务器</h2><h2 id="设置科学上网，因为ipfs已被墙"><a href="#设置科学上网，因为ipfs已被墙" class="headerlink" title="设置科学上网，因为ipfs已被墙"></a>设置科学上网，因为ipfs已被墙</h2><h3 id="购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址"><a href="#购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址" class="headerlink" title="购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址"></a>购买科学上网服务，SSR服务，如bosXXX和rixXXXX，得到一堆ssr服务地址</h3><h3 id="部署Ubuntu-SSR客户端"><a href="#部署Ubuntu-SSR客户端" class="headerlink" title="部署Ubuntu SSR客户端"></a>部署Ubuntu SSR客户端</h3><ol><li>下载ssr客户端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://onlyless.github.io/ssr</span><br><span class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 766 /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure><ol start="2"><li>配置ssr地址</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"server"</span> : <span class="string">"your serverip"</span>,</span><br><span class="line"><span class="attr">"server_port"</span> : yourport,</span><br><span class="line"><span class="attr">"password"</span> : <span class="string">"your password"</span>,</span><br><span class="line"><span class="attr">"method"</span> : <span class="string">"your method"</span>,</span><br><span class="line"><span class="attr">"protocol"</span> : <span class="string">"your protocol"</span>,</span><br><span class="line"><span class="attr">"obfs"</span> : <span class="string">"your obfs"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>重启</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssr restart</span><br></pre></td></tr></table></figure><ol start="4"><li>配置开机启动， vim /etc/rc.local</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh -e</span><br><span class="line">#</span><br><span class="line"># rc.local</span><br><span class="line">#</span><br><span class="line"># This script is executed at the end of each multiuser runlevel.</span><br><span class="line"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="line"># value on error.</span><br><span class="line">#</span><br><span class="line"># In order to enable or disable this script just change the execution</span><br><span class="line"># bits.</span><br><span class="line">#</span><br><span class="line"># By default this script does nothing.</span><br><span class="line"></span><br><span class="line">sudo ssr start</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h3 id="安装Privoxy"><a href="#安装Privoxy" class="headerlink" title="安装Privoxy"></a>安装Privoxy</h3><ol><li><p>因为ssr是sock5代理，不接受http/https流量，使用的时候需要将其转化成http/https流量</p></li><li><p>安装Privoxy</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install privoxy</span><br></pre></td></tr></table></figure><ol start="3"><li>配置Privoxy，打开其配置文件/etc/privoxy/config，修改以下几个地方</li></ol><ul><li>找到4.1. listen-address，确认privoxy监听的端口号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#  Example:</span><br><span class="line">#</span><br><span class="line">#      Suppose you are running Privoxy on a machine which has the</span><br><span class="line">#      address 192.168.0.1 on your local private network</span><br><span class="line">#      (192.168.0.0) and has another outside connection with a</span><br><span class="line">#      different address. You want it to serve requests from inside</span><br><span class="line">#      only:</span><br><span class="line">#</span><br><span class="line">#        listen-address  192.168.0.1:8118</span><br><span class="line">#</span><br><span class="line">#      Suppose you are running Privoxy on an IPv6-capable machine and</span><br><span class="line">#      you want it to listen on the IPv6 address of the loopback</span><br><span class="line">#      device:</span><br><span class="line">#</span><br><span class="line">#        listen-address [::1]:8118</span><br><span class="line">#</span><br><span class="line">listen-address  localhost:8118</span><br><span class="line">#</span><br><span class="line">#  4.2. toggle</span><br><span class="line">#  ============</span><br><span class="line">#</span><br><span class="line">#  Specifies:</span><br><span class="line">#</span><br><span class="line">#      Initial state of &quot;toggle&quot; status</span><br><span class="line">#</span><br><span class="line">#  Type of value:</span><br><span class="line">#</span><br><span class="line">#      1 or 0</span><br><span class="line">#</span><br><span class="line">#  Default value:</span><br></pre></td></tr></table></figure><ul><li>找到5.2. 设置sock5转发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#      Unencrypted connections to systems in these address ranges</span><br><span class="line">#      will be as (un)secure as the local network is, but the</span><br><span class="line">#      alternative is that you can&apos;t reach the local network through</span><br><span class="line">#      Privoxy at all. Of course this may actually be desired and</span><br><span class="line">#      there is no reason to make these exceptions if you aren&apos;t sure</span><br><span class="line">#      you need them.</span><br><span class="line">#</span><br><span class="line">#      If you also want to be able to reach servers in your local</span><br><span class="line">#      network by using their names, you will need additional</span><br><span class="line">#      exceptions that look like this:</span><br><span class="line">#</span><br><span class="line">#       forward           localhost/     .</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br><span class="line">#  5.3. forwarded-connect-retries</span><br><span class="line">#  ===============================</span><br><span class="line">#</span><br><span class="line">#  Specifies:</span><br><span class="line">#</span><br></pre></td></tr></table></figure><ol start="4"><li>重启Privoxy</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/privoxy restart</span><br></pre></td></tr></table></figure><ol start="5"><li>编写两个bash脚本，start_proxy.sh，stop_proxy.sh；用source start_proxy.sh/stop_proxy.sh 来开启和关闭代理</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start_proxy.sh</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"127.0.0.1:8118"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"127.0.0.1:8118"</span></span><br><span class="line"></span><br><span class="line">git config --global http.proxy http://127.0.0.1:8118 <span class="comment"># 可以用sock5://127.0.0.1:1008</span></span><br><span class="line">git config --global https.proxy https://127.0.0.1:8118</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stop_proxy.sh</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=</span><br><span class="line"><span class="built_in">export</span> https_proxy=</span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><ol start="6"><li>开始代理，测试是否可以穿墙</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> start_proxy.sh</span><br><span class="line">curl https://www.google.com <span class="comment"># 测试</span></span><br></pre></td></tr></table></figure><h2 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h2><ol><li>安装工具 git</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><ol start="2"><li>安装golang</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.10.2.linux-amd64.tar.gz</span><br><span class="line">tar -C /usr/<span class="built_in">local</span> -xzf go1.10.2.linux-amd64.tar.gz</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/go /usr/<span class="built_in">local</span>/go</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/gofmt /usr/<span class="built_in">local</span>/gofmt</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/godoc /usr/<span class="built_in">local</span>/godoc</span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个golang工作目录，比如~/gopath，编辑.bashrc，在文件最后添加以下内容；确保.profile 会调用.bashrc</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$HOME</span>/gopath"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><h2 id="下载编译源码"><a href="#下载编译源码" class="headerlink" title="下载编译源码"></a>下载编译源码</h2><ol><li>下载源码。虽然已经翻墙，但也不能直接编译，原因是ipfs使用的包管理工具gx不支持http代理。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u -d -v github.com/ipfs/go-ipfs</span><br></pre></td></tr></table></figure><ol start="2"><li><p>编译ipfs包管理工具GX</p><ol><li><p>下载GX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u -v -d github.com/whyrusleeping/gx</span><br><span class="line">go get -u -v -d github.com/whyrusleeping/gx-go</span><br></pre></td></tr></table></figure></li><li><p>修改 github.com/ipfs/go-ipfs-api/shell.go</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewShell</span><span class="params">(url <span class="keyword">string</span>)</span> *<span class="title">Shell</span></span> &#123;</span><br><span class="line">c := &amp;gohttp.Client&#123;</span><br><span class="line">Transport: &amp;gohttp.Transport&#123;</span><br><span class="line">Proxy: gohttp.ProxyFromEnvironment, <span class="comment">// 这里是添加的一行</span></span><br><span class="line">DisableKeepAlives: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NewShellWithClient(url, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译GX，编译完后可以在$(GOPATH)/bin目录找到gx和gx-go程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/whyrusleeping/gx</span><br><span class="line">go install github.com/whyrusleeping/gx-go</span><br></pre></td></tr></table></figure></li></ol></li><li><p>用gx下载所有的依赖包</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gx install --global</span><br></pre></td></tr></table></figure><ol start="4"><li>进入go-ipfs目录，编译ipfs，编译完后可以在$(GOPATH)/bin目录找到ipfs程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;部署一台Ubuntu服务器&quot;&gt;&lt;a href=&quot;#部署一台Ubuntu服务器&quot; class=&quot;headerlink&quot; title=&quot;部署一台Ubuntu服务器&quot;&gt;&lt;/a&gt;部署一台Ubuntu服务器&lt;/h2&gt;&lt;h2 id=&quot;设置科学上网，因为ipfs已被墙&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
</feed>
