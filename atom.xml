<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>致良知</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mybestcool.github.io/"/>
  <updated>2018-04-27T07:26:19.329Z</updated>
  <id>https://mybestcool.github.io/</id>
  
  <author>
    <name>Lucus Gu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>比特股环境部署-私链</title>
    <link href="https://mybestcool.github.io/2018/04/27/bitshares-deploy/"/>
    <id>https://mybestcool.github.io/2018/04/27/bitshares-deploy/</id>
    <published>2018-04-27T07:25:23.000Z</published>
    <updated>2018-04-27T07:26:19.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取可执行文件"><a href="#获取可执行文件" class="headerlink" title="获取可执行文件"></a><strong>获取可执行文件</strong></h2><ul><li>windows<ul><li>从<a href="https://github.com/bitshares/bitshares-core/releases" target="_blank" rel="noopener">github</a>下载可执行文件即可</li></ul></li><li>其他系统<ul><li>从<a href="https://github.com/bitshares/bitshares-core" target="_blank" rel="noopener">github</a>下载源码，根据其<a href="https://github.com/bitshares/bitshares-core/wiki" target="_blank" rel="noopener">wiki</a>的要求进行编译</li></ul></li></ul><h2 id="执行文件结构简介"><a href="#执行文件结构简介" class="headerlink" title="执行文件结构简介"></a><strong>执行文件结构简介</strong></h2><p><img src="https://steemitimages.com/DQmYMJGg6USuGY3DmMkbZT6rGwWcnBDKqLCUk7jxoec45kX/1.png" alt="image"></p><ul><li>witness_node<ul><li>通过 P2P 方式连接到 BTS 网络，从网络接收最新区块，向网络广播本地签署的交易包</li><li>通过 websocket + http rpc 的方式提供 API 供其他程序调用</li></ul></li><li>delayed_node<ul><li>通过 websocket 方式连接到 witness_node ，只包含不可回退的区块</li><li>通常情况下最新区块比 witness_node 落后一分钟，异常时可能会落后很多，但可保证不可回退</li><li>通过 websocket + http rpc 的方式提供 API 供其他程序调用，API清单与 witness_node 相同，但无法使用交易广播功能</li></ul></li><li>cli_wallet<ul><li>通过 websocket 方式连接到 witness_node 和 delayed_node 其中之一</li><li>管理钱包文件，钱包文件里包含经过加密的用户私钥，一个钱包文件可以包含多个私钥</li><li>提供交易签名功能，签名后通过 witness_node 向外广播</li><li>通过 http rpc 的方式提供 API 供其他程序调用</li><li>推荐交易所使用一个连接到 delayed_node 的 cli_wallet 来监测用户充值，使用另一个连接到 witness_node 的 cli_wallet 来处理用户提现请求</li></ul></li></ul><h2 id="私有链部署"><a href="#私有链部署" class="headerlink" title="私有链部署"></a><strong>私有链部署</strong></h2><h3 id="witness-node-部署"><a href="#witness-node-部署" class="headerlink" title="witness_node 部署"></a><strong>witness_node 部署</strong></h3><ol><li>生成创世块的json<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./witness_node --create-genesis-json &quot;my-genesis.json&quot;</span><br></pre></td></tr></table></figure></li></ol><p>工作目录下会生成一个文件：my-genesis.json</p><ol start="2"><li>启动见证人节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">witness_node -d data --genesis-json my-genesis.json</span><br></pre></td></tr></table></figure></li></ol><ul><li>工作目录下会生成一个目录：data，结构为blockchain目录、logs目录、p2p目录、config.ini配置文件。</li><li>退出程序尽量不要强制关闭，按ctrl-c，等其优雅退出。数据损坏有可能需要重建索引（启动的时候使用–replay-blockchain参与）</li></ul><ol start="3"><li>配置config.ini，以下参数也可作为见证人节点的启动参数<ul><li>–rpc-endpoint rpc监听端口，配置成”127.0.0.1:8090”（配置文件中不带引号）</li><li>–enable-stale-production 让本节点无视区块链数据的时间，无论如何都生成区块数据，配置成”true”</li><li>–witness-id（启动参数时可写作-w） 本节点控制的witness列表，(1.6.0-9)是默认的withness</li><li>–seed-nodes 要连接的peer列表(测试环境务必传此参数，不传的话会走代码里hardcode的正式网的peer列表，会导致测试节点去跟正式网络同步数据)(没有种子节点，一般用户等一年也不一定能连上网络。见证人对网络连接的要求更高，所以，必须与完整数据的种子节点相连，否则数据不完整的钱包会制造分叉)。配置成”[]”</li><li>–genesis-json 创世块的数据文件,配置成”my-genesis.json”</li><li>–track-account 参数的意思是我们只关心特别指定的账户的历史交易信息，其他账户的历史交易信息我不需要。这样就可以大大节省内存开支。</li></ul></li><li>再次启动见证人节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">witness_node -d data</span><br></pre></td></tr></table></figure></li></ol><p>参数-d data 与 –data-dir data是一样的</p><h3 id="delayed-node-部署"><a href="#delayed-node-部署" class="headerlink" title="delayed_node 部署"></a><strong>delayed_node 部署</strong></h3><ol><li>与 witness_node 雷同</li></ol><h3 id="cli-wallet-部署"><a href="#cli-wallet-部署" class="headerlink" title="cli_wallet 部署"></a><strong>cli_wallet 部署</strong></h3><ol><li>启动钱包节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cli_wallet --chain-id=&quot;97f304dce6fe30cccbdef37cd7899d349297a78ba483375adc3982016ef40c63&quot; -s ws://127.0.0.1:8090 -w my-wallet.json</span><br></pre></td></tr></table></figure></li></ol><ul><li>-s 或 –server-rpc-endpoint witness_node的地址和端口 </li><li>–chain-id 指的是服务的chain-id，可以不带此参数执行一次命令，程序的报错信息会显示这个id；witness_node启动成功后也会打印出这个id</li><li>-w 或 –wallet-file 指的是钱包文件</li></ul><ol start="2"><li>cli_wallet 钱包命令</li></ol><ul><li><p>创建钱包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new &gt;&gt;&gt; set_password 1111</span><br><span class="line">set_password 1111</span><br><span class="line">null</span><br><span class="line">locked &gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>解锁钱包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">locked &gt;&gt;&gt; unlock 1111</span><br><span class="line">unlock 1111</span><br><span class="line">null</span><br><span class="line">unlocked &gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>钱包导入用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; import_key nathan 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>nathan是在创世文件中定义的帐户名称，5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3是对应的私钥，在data目录下的config.ini中可以查到</p><ul><li>导入余额<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; import_balance nathan [&quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot;] true</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>导入的余额在创世文件中有配置，在initial_balances中，其中owner是指帐号nathan的地址。一个帐号包含三块内容，如nathan帐号{“private_key”:”5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3”,”public_key”:”BTS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV”,”address”:”BTSFAbAx7yuxt725qSZvfwWqkdCwp9ZnUama”}，而这三个由一组brain_priv_key（16个有序的英文单词）生成。</p><ul><li>查看账户信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; get_account nathan</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>查看账户余额</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; list_account_balances nathan</span><br></pre></td></tr></table></figure></li><li><p>升级会员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; upgrade_account nathan true</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>由于已知的缓存问题，您需要在这个阶段重新启动CLI，否则它将不知道nathan已经升级了。按Ctrl-C命令停止钱包，然后再次使用相同的命令之前启动它。</p></blockquote><blockquote><p>然后用get_account nathan查看，看到”membership_expiration_date”已经从”1970-01-01T00:00:00” 变成了 “1969-12-31T23:59:59”，意味着升级成功了。</p><ul><li>创建帐号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">locked &gt;&gt;&gt; suggest_brain_key</span><br><span class="line">suggest_brain_key</span><br><span class="line">&#123;</span><br><span class="line">  &quot;brain_priv_key&quot;: &quot;BECURSE VALGOID DEFROCK GODKIN SWITHER WORTH SUIFORM DAKER IPSEAND UPPERER PSALM UNCAST DOTTILY BEFRIZ SCUT BRONC&quot;,</span><br><span class="line">  &quot;wif_priv_key&quot;: &quot;5KZmzKmP8869Tw26nBTtYzGM4vW55mH9R9ZTeK9wPiTeX495rbn&quot;,</span><br><span class="line">  &quot;pub_key&quot;: &quot;BTS7KuKh66CdWb1pTRg414ocVXGDQLnrRtJDd4srevt6MRmQPd8Gg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>首先生成新账户的信息。 通过使用suggest_brain_key命令来完成它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; create_account_with_brain_key &quot;BECURSE VALGOID DEFROCK GODKIN SWITHER WORTH SUIFORM DAKER IPSEAND UPPERER PSALM UNCAST DOTTILY BEFRIZ SCUT BRONC&quot; alpha nathan nathan true</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>创建帐号的创建者有两个条件，1.必须是终生会员身份（LTM）；2.有足够的余额提供注册费用</p><ul><li>转账<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; transfer nathan alpha 2000000000 BTS &quot;here is some cash&quot; true</span><br></pre></td></tr></table></figure></li></ul></blockquote><ol start="3"><li>其他钱包<ul><li>网页钱包<ul><li>官方钱包:<a href="https://wallet.bitshares.org" target="_blank" rel="noopener">https://wallet.bitshares.org</a></li><li>Transwiser支持钱包： <a href="https://bts.transwiser.com" target="_blank" rel="noopener">https://bts.transwiser.com</a></li><li>DACPLAY支持钱包：<a href="https://bitshares.dacplay.org" target="_blank" rel="noopener">https://bitshares.dacplay.org</a></li><li>比特帝国支持钱包：<a href="https://bit.btsabc.org" target="_blank" rel="noopener">https://bit.btsabc.org</a></li><li>OpenLedger支持钱包：<a href="https://bitshares.openledger.info" target="_blank" rel="noopener">https://bitshares.openledger.info</a></li></ul></li><li>客户端钱包<ul><li>官方钱包:<a href="https://bitshares.org/download/" target="_blank" rel="noopener">https://bitshares.org/download/</a></li></ul></li><li>命令行钱包<ul><li>witness_node</li><li>curl:curl -d ‘{“jsonrpc”: “2.0”, “method”: “info”, “params”: [], “id”: 1}’ <a href="http://localhost:8090" target="_blank" rel="noopener">http://localhost:8090</a> <a href="http://127.0.0.1:8093/rpc" target="_blank" rel="noopener">http://127.0.0.1:8093/rpc</a></li></ul></li></ul></li></ol><h3 id="添加新的witness-node"><a href="#添加新的witness-node" class="headerlink" title="添加新的witness_node"></a><strong>添加新的witness_node</strong></h3><ol><li>使用get_dev_key创建见证人帐号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">programs/genesis_util/get_dev_key BTS w1</span><br></pre></td></tr></table></figure></li></ol><p>运行以上命令会生成一对秘钥对和地址</p><blockquote><p>[{“private_key”:”5JjzogP6V1TciYQHthBLPnmj5cyrYLfwfoDeY6rpG4mcNUd7hDq”,”public_key”:”BTS6WqFcNmb8DA8SG2HJDL23TzSKk67HrCf6qTeqXhbCcohi11epm”,”address”:”BTSMZq4SyNoFGraCNuV5ZjbJHMvcYBLSV3rM”},</p></blockquote><blockquote><p>如果要修改创世文件的密钥对，修改以下字段initial_accounts、initial_balances、initial_witness_candidates（见证人）、initial_committee_candidates（委员会）</p></blockquote><ol start="2"><li>使用cli_wallet创建见证人帐号</li></ol><p>使用cli_wallet创建一个帐号w2，保证其有一定余额，并将其升级成终生会员。记录公钥私钥。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">locked &gt;&gt;&gt; suggest_brain_key</span><br><span class="line">unlocked &gt;&gt;&gt; create_account_with_brain_key &quot;BECURSE VALGOID DEFROCK GODKIN SWITHER WORTH SUIFORM DAKER IPSEAND UPPERER PSALM UNCAST DOTTILY BEFRIZ SCUT BRONC&quot; w2 nathan nathan true</span><br><span class="line">unlocked &gt;&gt;&gt; transfer nathan w2 2000000000 BTS &quot;here is some cash&quot; true</span><br><span class="line">unlocked &gt;&gt;&gt; upgrade_account nathan true</span><br></pre></td></tr></table></figure></p><blockquote><p>详细见 cli_wallet 命令</p></blockquote><ol start="3"><li>成为见证人-配置创世文件（对应1）</li></ol><p>修改创世文件的对应的字段，如initial_accounts、initial_balances、initial_witness_candidates（见证人）、initial_committee_candidates（委员会）</p><ol start="4"><li>成为见证人-admin帐号使用客户端申请（对应2）<br>在cli_wallet客户端中，创建witness对象，参考<a href="https://github.com/cryptonomex/graphene/wiki/CLI-Wallet-Cookbook" target="_blank" rel="noopener">wiki</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; create_witness w2 &quot;http://url-to-proposal&quot; true //url-to-proposal可为空</span><br></pre></td></tr></table></figure></li></ol><p>在cli_wallet客户端中，用admin帐号投票<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlocked &gt;&gt;&gt; vote_for_witness admin w2 true true</span><br></pre></td></tr></table></figure></p><blockquote><p>投票成功之后，等待下次maintenance（通常是第二天0点）就可以看到我们的witness已经进入列表了，使用以下命令查询witness列表（get_global_properties）</p></blockquote><ol start="4"><li>配置和启动<ul><li>把公钥和私钥配置到data/config.ini文件中（private-key = [PublicKey, WIF private key]）</li><li>将witness-id加入config.ini(witness-id = “1.6.12”)</li><li>重启witness节点,注意seed-nodes的配置</li></ul></li></ol><h3 id="网页钱包部署"><a href="#网页钱包部署" class="headerlink" title="网页钱包部署"></a>网页钱包部署</h3><ol><li><a href="https://www.jianshu.com/p/72396c43c906" target="_blank" rel="noopener">Web钱包搭建</a></li><li><a href="https://www.jianshu.com/p/a89b3835d4e8" target="_blank" rel="noopener">水龙头服务搭建</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;获取可执行文件&quot;&gt;&lt;a href=&quot;#获取可执行文件&quot; class=&quot;headerlink&quot; title=&quot;获取可执行文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;获取可执行文件&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;windows&lt;ul&gt;
&lt;li&gt;从&lt;a href=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ethereum-theory</title>
    <link href="https://mybestcool.github.io/2018/04/19/ethereum-theory/"/>
    <id>https://mybestcool.github.io/2018/04/19/ethereum-theory/</id>
    <published>2018-04-19T14:12:27.000Z</published>
    <updated>2018-04-19T14:18:30.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区块链核心理论"><a href="#区块链核心理论" class="headerlink" title="区块链核心理论"></a>区块链核心理论</h2><ul><li><a href="https://www.youtube.com/watch?v=bBC-nXj3Ng4" target="_blank" rel="noopener">账本-信任+密码学=加密货币（视频地址）</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="noopener">区块链入门教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/01/bitcoin-tutorial.html" target="_blank" rel="noopener">比特币入门教程</a></li></ul><h3 id="账本（Ledger）"><a href="#账本（Ledger）" class="headerlink" title="账本（Ledger）"></a>账本（Ledger）</h3><ol><li>账本记录如：<ul><li>A pays B ￥40</li><li>C pays A ￥60</li><li>……</li></ul></li><li>记录可伪造，所以需要加签名<ul><li><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">非对称加密</a>：公钥（pk）和私钥（sk）</li><li>用户帐号：Acc(pk)=Account</li><li>签名：Sign(Message,sk)=Signature，将签名放到账本记录上</li><li>签名验证：Verify(Message,Signature,pk) = T/F，公钥解密签名，得到的Message HASH值并与账本记录Message做HASH比较。</li><li>签名使用AES-256</li></ul></li><li>记录可复制<ul><li>给每条记录添加一个唯一编号</li></ul></li><li>不足扣则不记录</li><li>最终账本记录如下：<ul><li><ol><li>A pays B ￥40 (A’s Signature)</li></ol></li><li><ol start="2"><li>C pays A ￥60 (C’s Signature)</li></ol></li></ul></li></ol><h3 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h3><ol><li>P2P 网络</li><li>工作量证明机制（PoW,Proof of Work）<ol><li>算法：SHA256(Message,RandomValue)=HashValue,改变Message的一小部份，则HashValue完全不一样，它具有散列性和不可预测性，且无法逆向。HashValue长度256位。</li><li>工作量：当RandomValue不同时，HashValue完全不一样，而区块链协议要求算出的区块的HashValue前30位为0（即尝试10E次），且随着时间，这个值会变大，则更加难易计算。 </li><li>P2P网络中的所有节点信任这个算法，这算法即共识算法。那么这个按此算法产生的区块整个网络都认可。</li><li>区块创建者会得到一笔奖励，起初是50，后续逐渐减半减少，减少到0为止。以BTC举例<ul><li>09.01 - 12.11     50BTC</li><li>12.11 - 16.07     25BTC</li><li>16.07 - 20.02     12.5BTC</li><li>20.02 - 23.09     6.25BTC      </li></ul></li><li>区块产生时间：<ul><li>BTC：10min</li><li>ETH：15sec</li><li>XRP：3.5sec</li><li>LTC：2.5min</li></ul></li></ol></li><li>账本一旦写入不能被修改。<ol><li>所有区块使用默克尔树连接在一起，新的区块在后面，则导致整个区块不能修改。</li></ol></li><li>当有两个或者多个节点创建出区块时，都添加到上一区块上，导致区块分叉。分叉后以区块链长的分支为准，同时取消掉其他分支。</li><li>伪造账单，会导致区块链分叉。但如果算力小于整个网络的50%，那么最终会被正确的区块链取消。</li></ol><h2 id="以太坊核心概念"><a href="#以太坊核心概念" class="headerlink" title="以太坊核心概念"></a>以太坊核心概念</h2><ul><li><a href="http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html" target="_blank" rel="noopener">以太坊开发入门</a></li><li><a href="https://www.youtube.com/watch?v=66SaEDzlmP4" target="_blank" rel="noopener">V神演讲-25分钟理解以太坊</a></li><li><a href="https://ethfans.org/posts/Ethereum-in-25-minites-vision-2017-1" target="_blank" rel="noopener">对应中文翻译-上</a></li><li><a href="https://ethfans.org/posts/25-minutes-in-Ethereum-vision-2017-2" target="_blank" rel="noopener">对应中文翻译-下</a></li><li>以太坊HASH算法：<a href="https://ethereum.stackexchange.com/questions/550/which-cryptographic-hash-function-does-ethereum-use" target="_blank" rel="noopener">KECCAK-256</a></li><li>分叉协议：GHOST协议(GHOST protocol)=(Greedy Heaviest Observed Subtree)</li></ul><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><ol><li>一个合约是一个帐号，它成为消息的目标，那么合约就会被调用。调用者可以是外部帐号，也可以是其他合约帐号。</li><li>合约代码运行在EVM上，并分布到整个网络每个节点</li><li>合约代码一旦发布，不可变，且永久存在</li><li>合约代码过程中状态的存储，是不可变的</li><li>智能合约开发语言：<ol><li><a href="https://solidity.readthedocs.io/en/latest/" target="_blank" rel="noopener">Solidity</a>,类JS语言，其开发的合约可以用<a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">Remix IDE</a>快速验证。官方推荐。</li><li>LLL，类Lisp语言，与<a href="https://github.com/ethereum/solidity" target="_blank" rel="noopener">Solidity</a>同一仓库</li><li><a href="https://github.com/ethereum/serpent/tree/develop" target="_blank" rel="noopener">Serpent</a>，类Python语言</li></ol></li><li><a href="https://github.com/ConsenSys/smart-contract-best-practices" target="_blank" rel="noopener">智能合约最佳实践</a></li></ol><h3 id="DApp"><a href="#DApp" class="headerlink" title="DApp"></a>DApp</h3><ol><li>定义：相当于C/S或B/S结构中的S端，一部分放在以太坊上，由运行于以太坊网络上一个或多个智能合约的组成；另一部分可以是我们现在意义上的服务端。</li><li>DApp并不把所有的状态都存储在区块链上，也不把所有的计算都放在区块链上，不然话费的Gas量太大。只把大家需要信任的东西放到区块链上。</li></ol><h3 id="DApp客户端"><a href="#DApp客户端" class="headerlink" title="DApp客户端"></a>DApp客户端</h3><ol><li>定义：相当于C/S或B/S结构中的C端或者B端。区别在于它们可能与区块链交互，也有可能与我们自己服务端交互。目前大多数的客户端用JS编写，因为可以运行在浏览器中。当然也可以用其他语言来编写。nodejs中有meteor工具来辅助开发。</li></ol><h3 id="DApp浏览器"><a href="#DApp浏览器" class="headerlink" title="DApp浏览器"></a>DApp浏览器</h3><ol><li>用来让DApp客户端（常常使用JS与以太坊的智能合约进行交互）的使用更加容易。</li><li>主要目的：<ol><li>提供到一个以太坊节点的连接（或者连接到一个本地节点或者远程节点），和一个方便的切换不同节点（甚至是不同的网络）。</li><li>提供一个帐户（或者一个钱包）来方便用户与DApp交互。</li></ol></li><li>目前有哪些浏览器<ol><li><a href="https://github.com/ethereum/mist" target="_blank" rel="noopener">Mist</a>是以太坊官方的DApp浏览器。一个漂亮的界面来与以太坊节点交互，与智能合约发、收交易。</li><li><a href="https://status.im/" target="_blank" rel="noopener">Status</a>是一个手机上可以使用的DApp浏览器.</li><li><a href="https://metamask.io/" target="_blank" rel="noopener">MetaMask</a>是一个Google浏览器扩展，把Chrome变成了一个DApp浏览器。它的核心特性是注入以太坊提供的js客户端库web3，到每一个界面，来让DApp连接到MetaMask提供的以太坊节点服务。不过这个Chrome扩展，可以允许你管理你的钱包，以及连接到不同的以太坊网络（译者注：包括本地的开发网络）。</li><li><a href="https://parity.io/parity.html" target="_blank" rel="noopener">Parity</a>是一个以太坊客户端（也是一个全节点的实现），集成到了Web浏览器，并使之成为一个DApp浏览器</li></ol></li></ol><h3 id="GAS"><a href="#GAS" class="headerlink" title="GAS"></a>GAS</h3><ol><li>定义：以太坊上每一次计算和存储所需要的费用，这个费用用gas来支付。它是用来衡量在一个具体计算中要求的费用单位。gas price就是你愿意在每个gas上花费Ether的数量，以“gwei”进行衡量。“Wei”是Ether的最小单位，1Ether=10^18Wei，1gwei=1,000,000,000 Wei。gas limit代表用户愿意花费在gas上费用的最大值。<br><img src="https://lilymoana.github.io/asset/eth_price.png" alt="image"></li><li>作用：<ol><li>防止死循环（因为以太坊的智能合约是图灵完备的）</li><li>防止以太坊超负荷</li><li>Gas限制是比特币上区块大小限制的对应物.目前的Gas上限是6.7百万gwei</li></ol></li></ol><h3 id="账户（对应以太坊白皮书）"><a href="#账户（对应以太坊白皮书）" class="headerlink" title="账户（对应以太坊白皮书）"></a>账户（对应以太坊白皮书）</h3><ol><li>账户分类：<ol><li>外部账户：被用户（私钥）控制的账户</li><li>合约账户：是由运行在区块链自身上的代码（合约）来控制的，即被整个区块链控制。</li></ol></li><li>账户状态：<ul><li>State consists of key value mapping addressed to account objects</li><li>Every account objest contains 4 pieces of data:<ul><li>Nonce:如果账户是一个外部拥有账户，nonce代表从此账户地址发送的交易序号。如果账户是一个合约账户，nonce代表此账户创建的合约序号</li><li>Balance:此地址拥有Wei的数量。1Ether=10^18Wei</li><li>Code hash(code = empty string for private key-controlled accounts ):此账户EVM代码的hash值。对于合约账户，就是被Hash的代码并作为codeHash保存。对于外部拥有账户，codeHash域是一个空字符串的Hash值</li><li>Storage trie root:Merkle Patricia树的根节点Hash值。Merkle树会将此账户存储内容的Hash值进行编码，默认是空值</li></ul></li></ul></li><li>账户之间的关系</li></ol><ul><li>消息由外部帐号发起，合约账户不能成为消息的发起者<br><img src="https://lilymoana.github.io/asset/eth_transationset.png" alt="image"></li></ul><h3 id="Coin和Token"><a href="#Coin和Token" class="headerlink" title="Coin和Token"></a>Coin和Token</h3><ol><li>Coin，是区块链的原生货币，有自己的区块链，如BTC、LTC</li><li>Token，特定的资产或者某种效力，通常以现有的一个区块链为基础。大多数的以太坊的ERC20/ERC23代币都是协议代币</li><li>两者都是Cryptocurrencies</li></ol><h3 id="网络，节点，区块"><a href="#网络，节点，区块" class="headerlink" title="网络，节点，区块"></a>网络，节点，区块</h3><ol><li>网络<ol><li>Mainnet-以太坊主网，通常是所有客户端的默认网络。</li><li>Ropsten - 以太坊使用工作量证明的主测试网络。这个网络，因为低的计算量，容易遭到DDOS攻击，分片，或者其它问题。垃圾邮件攻击后被暂时放弃，最近才恢复使用。</li><li>Kovan-parity客户端组成的测试网络，使用授权证明来提升对垃圾邮件攻击的抗扰度，并且持续4秒的阻塞时间。</li><li>Rinkeby-geth客户端组成的测试网络，使用集团共识，尽管计算量低，但是对恶意行为者更有弹性。</li></ol></li><li>节点<ol><li>定义：为区块链网络中的一台电脑（简单理解的话，再详细点是指那个区块链进程）存放了整个区块链的数据。节点分成全节点（有完整的数据）和轻节点。可以通过geth来运行一个全节点（官方的节点，go语言），或者parity来运行一个轻节点。</li></ol></li><li>区块<ol><li>区块包含：<ol><li>区块头<ul><li>parentHash：父区块头的Hash值（这也是使得区块变成区块链的原因）</li><li>ommerHash：当前区块ommers列表的Hash值</li><li>beneficiary：接收挖此区块费用的账户地址</li><li>stateRoot：状态树根节点的Hash值</li><li>transactionsRoot：包含此区块所有交易的Merkle树的根节点Hash值</li><li>receiptsRoot：包含此区块所有交易收据的Merkle树的根节点Hash值</li><li>logsBloom：由日志信息组成的一个Bloom过滤器 (一种数据结构)</li><li>difficulty： 此区块的难度级别</li><li>number：当前区块的计数（创世纪块的区块序号为0，对于每个后续区块，区块序号都增加1）</li><li>gasLimit：每个区块的当前gas limit</li><li>gasUsed： 此区块中交易所用的总gas量</li><li>timestamp：此区块成立时的unix的时间戳</li><li>extraData：与此区块相关的附加数据</li><li>mixHash：一个Hash值，当与nonce组合时，证明此区块已经执行了足够的计算</li><li>nonce：一个Hash值，当与mixHash组合时，证明此区块已经执行了足够的计算<br><img src="https://lilymoana.github.io/asset/eth_blockheaders.png" alt="image"></li></ul></li><li>关于包含在此区块中的交易集信息</li><li>与当前区块的ommers相关的一些列其他区块头</li></ol></li></ol></li></ol><h3 id="开发工具和开发库"><a href="#开发工具和开发库" class="headerlink" title="开发工具和开发库"></a>开发工具和开发库</h3><ol><li>发布框架<ol><li><a href="http://truffleframework.com/docs/getting_started" target="_blank" rel="noopener">Truffle框架</a> &amp; <a href="https://blog.zeppelin.solutions/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05" target="_blank" rel="noopener">Truffle教程</a></li><li><a href="https://github.com/iurimatias/embark-framework" target="_blank" rel="noopener">Embark框架</a></li></ol></li><li>去中心化的智能合约包管理资源库<ol><li><a href="https://www.ethpm.com/registry" target="_blank" rel="noopener">ETHP</a> &amp; <a href="https://github.com/ethereum/EIPs/issues/190" target="_blank" rel="noopener">使用教程</a></li></ol></li><li>反编译智能合约/Disassembly<ol><li>可以通过<a href="https://github.com/comaeio/porosity" target="_blank" rel="noopener">prosity</a>来反编译以太坊智能合约的字节码，可以使用<a href="https://github.com/Arachnid/evmdis" target="_blank" rel="noopener">evmdis</a>来Disassembly。</li></ol></li><li><a href="https://github.com/ethereum/go-ethereum/wiki/Whisper-Overview" target="_blank" rel="noopener">Whisper</a>是一个集成进以太坊的消息系统。它允许DApp发布小量的信息来进行非实时的消息通信。使用ssh协议。<a href="https://github.com/ethereum/meteor-dapp-whisper-chat-client" target="_blank" rel="noopener">一个使用Whisper协议实现一个聊天客户端的例子</a></li><li><a href="https://openzeppelin.org/" target="_blank" rel="noopener">Open Zeppelin</a>是一系列经过审查的，最佳的智能合约实践，你可以继承并应用于你自己的DApp中。<a href="https://github.com/OpenZeppelin/zeppelin-solidity" target="_blank" rel="noopener">github学习资源</a></li></ol><h3 id="应用项目"><a href="#应用项目" class="headerlink" title="应用项目"></a>应用项目</h3><ol><li><a href="https://github.com/slockit/DAO/" target="_blank" rel="noopener">去中心自动化组织</a></li><li><a href="https://aragon.one/" target="_blank" rel="noopener">Aragon</a>设计一个根据智能合约逻辑运作的公司，重点是创建一个可以接受投资，处理会计，支付雇员，分配股权，正如我们现在知道的完成每天的公司的业务。他们也实现了漂亮的DApp客户端来让他们的协议使用起来更为简单。</li><li><a href="https://ipfs.io/" target="_blank" rel="noopener">IPFS</a>（星际文件系统）是一个协议，用来分发文件。</li><li><a href="https://filecoin.io/" target="_blank" rel="noopener">FileCoin</a>是Protocol Lab为创建一个去中心化的基于IPFS的存储市场的努力结果，也就是向整个网络提供存储资源的激励层</li><li><a href="https://swap.tech/" target="_blank" rel="noopener">Swarm</a>是一个去中心化的存储网络，集成于以太坊生态系统</li><li><a href="https://augur.net/" target="_blank" rel="noopener">Augur</a>是一个去中心化的预测市场，让大家对于某个现实世界的事件进行对赌</li><li><a href="https://gnosis.pm/" target="_blank" rel="noopener">Gnosis</a>与Augur有类似的理念，也是一个去中心化的预测市场</li><li><a href="https://golem.network/" target="_blank" rel="noopener">Golem</a>是一个分布式的算力市场</li><li>0xProject创建了一个交换代币的协议，以及一个DApp来实现这个协议。<br>10.<a href="https://district0x.io/" target="_blank" rel="noopener">district0x</a>是一个更高层级的去中心化的市场和社区。 </li><li><a href="https://www.uport.me/" target="_blank" rel="noopener">uPort</a>在解决去中心化的身份识别问题。</li></ol><h3 id="一些公司"><a href="#一些公司" class="headerlink" title="一些公司"></a>一些公司</h3><ol><li>ConsenSys（有点像共识Consensus，但作为一个公司名称;它很聪明，巧妙的把u改成了s，但我一般念为“con-SEn-SIS”，避免读错）是一个“风险投资和产品工作室”。他们是一个（其实非常大）伞形组织，它赞助了一大堆项目和核心组件的开发。值得一提的是，它们资助了Truffle，Infura，MetaMask，Gnosis和uPort。</li><li>Zeppelin Solutions在上面我们有提到过，他也审查智能合约代码，提供咨询服务。他们的<a href="https://blog.zeppelin.solutions/" target="_blank" rel="noopener">博客</a>质量相当高。</li><li>Protocol Labs是一群让人印象深刻的人，致力于IPFS，FileCoin，lip2p以及IPLD等其它项目的开发。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;区块链核心理论&quot;&gt;&lt;a href=&quot;#区块链核心理论&quot; class=&quot;headerlink&quot; title=&quot;区块链核心理论&quot;&gt;&lt;/a&gt;区块链核心理论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bBC
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>以太坊白皮书学习记录</title>
    <link href="https://mybestcool.github.io/2018/04/17/ethereum-wp/"/>
    <id>https://mybestcool.github.io/2018/04/17/ethereum-wp/</id>
    <published>2018-04-17T14:26:01.000Z</published>
    <updated>2018-04-19T14:07:26.268Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太币白皮书中文文档</a></p><h2 id="比特币的核心概念"><a href="#比特币的核心概念" class="headerlink" title="比特币的核心概念"></a>比特币的核心概念</h2><h3 id="作为状态转换系统的比特币"><a href="#作为状态转换系统的比特币" class="headerlink" title="作为状态转换系统的比特币"></a>作为状态转换系统的比特币</h3><ol><li><p>转换函数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPLY(S,TX) ­&gt; S&apos; or ERROR</span><br></pre></td></tr></table></figure><ul><li>转换函数解析：<ol><li>交易的每个输入：<ul><li>如果引用的UTXO不存在于现在的状态中（S），返回错误提示</li><li>如果签名与UTXO所有者的签名不一致，返回错误提示</li></ul></li><li>如果所有的UTXO输入面值总额小于所有的UTXO输出面值总额，返回错误提示</li><li>返回新状态S’,新状态S’中移除了所有的输入UTXO，增加了所有的输出UTXO</li></ol></li></ul></li><li><p>状态结构（UTXO:未花费的交易输出，unspent transaction outputs）,包含一个面值和所有者（由20个字节的本质上是密码学公钥的地址所定义[1]）。一笔交易包括一个或多个输入和一个或多个输出。每个输入包含一个对现有UTXO的引用和由与所有者地址相对应的私钥创建的密码学签名。每个输出包含一个新的加入到状态中的UTXO。</p></li></ol><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><ol><li>区块<ol><li>网络中的节点不断尝试把交易结果打包成“区块”</li><li>区块大约每十分钟产生一块</li><li>每个区块包含：时间戳、随机数、对上一个区块的引用（即hash值）、上一区块生成以来发生的所有交易列表。核对规则如下：<ul><li>检查区块引用的上一个区块是否存在且有效</li><li>检查区块的时间戳是否晚于以前的区块的时间戳，而且早于未来2小时</li><li>检查区块的工作量证明是否有效</li><li>将上一个区块的最终状态赋于S[0]</li><li>假设TX是区块的交易列表，包含n笔交易。对于属于0……n-1的所有i,进行状态转换S[i+1] = APPLY(S[i],TX[i])。如果任何一笔交易i在状态转换中出错，退出程序，返回错误。</li><li>返回正确，状态S[n]是这一区块的最终状态</li></ul></li></ol></li><li>矿工的作用和奖励<ol><li>使用共识算法“工作量证明”，即不停的创建区块，并设置区块的随机值等随机手段，然后hash这个区块，得出hash值是否小于2^190(190是随着比特币的增长，不断变小的值)，即为创建区块成功。创建区块者可以得到25BTC的奖励</li><li>矿工将交易打包到区块链。交易中的输入往往大于输出，差额部分就作为“交易费用”付给矿工。</li></ol></li></ol><h3 id="默克尔树"><a href="#默克尔树" class="headerlink" title="默克尔树"></a>默克尔树</h3><ol><li>定义：默克尔树是一种二叉树，由一组叶节点、一组中间节点和一个根节点构成。最下面的大量的叶节点包含基础数据，每个中间节点是它的两个子节点的哈希，根节点也是由它的两个子节点的哈希，代表了默克尔树的顶部。</li><li>特点：允许区块的数据可以零散地传送。节点可以从一个源下载区块头，从另外的源下载与其有关的树的其它部分，而依然能够确认所有的数据都是正确的</li></ol><h3 id="比特币智能合约的问题"><a href="#比特币智能合约的问题" class="headerlink" title="比特币智能合约的问题"></a>比特币智能合约的问题</h3><ol><li>缺少图灵完备</li><li>价值盲</li><li>缺少状态</li><li>区块链盲</li></ol><h2 id="以太坊的核心概念"><a href="#以太坊的核心概念" class="headerlink" title="以太坊的核心概念"></a>以太坊的核心概念</h2><h3 id="以太坊账户"><a href="#以太坊账户" class="headerlink" title="以太坊账户"></a>以太坊账户</h3><ol><li>以太坊状态：是由被称为“账户”的对象和在两个帐号之间转移价值和信息的状态转换构成</li><li>以太坊账户包含四个部分：<ol><li>随机数，用于确定每笔交易只能被处理一次的计数器</li><li>账户目前的以太币余额</li><li>账户的合约代码，如果有的话</li><li>账户的存储，默认为空</li></ol></li><li>分成两类账户：外部所有账户（私钥控制）、合约账户（合约代码控制）</li></ol><h3 id="消息和交易"><a href="#消息和交易" class="headerlink" title="消息和交易"></a>消息和交易</h3><ol><li>消息，类似于比特币的交易，但有三点不同<ol><li>以太坊的消息可以由外部实体或者合约创建，然而比特币的交易只能从外部创建</li><li>以太坊消息可以选择包含数据</li><li>如果以太坊消息的接受者是合约账户，可以选择进行回应，这意味着以太坊消息也包含函数概念</li></ol></li><li>交易是指存储的从外部账户发出的消息的签名数据包，包含<ol><li>to：消息的接收者</li><li>v,r,s:用于确认发送者的签名</li><li>value:从发送者转移到接收者Wei的数量。在合约创建交易中，value作为新建合约账户的开始余额</li><li>data（可选域，只有在消息通信中存在）:消息通信中的输入数据(也就是参数)。例如，如果智能合约就是一个域名注册服务，那么调用合约可能就会期待输入参数：域名和IP地址</li><li>STARTGAS值:发送者愿意为执行交易支付gas数量的最大值。此值设置之后在任何计算完成之前就会被提前扣掉</li><li>GASPRICE值:发送者愿意支付执行交易所需的每个gas的Wei数量</li><li>nonce：发送者发送交易数的计数</li><li>init（只有在合约创建交易中存在）：用来初始化新合约账户的EVM代码片段。init值会执行一次，然后就会被丢弃。当init第一次执行的时候，它返回一个账户代码体，也就是永久与合约账户关联的一段代码。</li></ol></li><li>创建合约有单独的交易类型和相应的消息类型；合约的地址是基于账号随机数和交易数据的哈希计算出来的</li></ol><h3 id="以太坊状态转换函数"><a href="#以太坊状态转换函数" class="headerlink" title="以太坊状态转换函数"></a>以太坊状态转换函数</h3><ol><li><p>状态转换函数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPLY(S,TX) ­&gt; S&apos; or ERROR</span><br></pre></td></tr></table></figure><ul><li>转换函数解析：<ol><li>检查交易的格式是否正确（即有正确数值）、签名是否有效和随机数是否与发送者账户的随机数匹配。如否，返回错误</li><li>计算交易费用:fee=STARTGAS * GASPRICE，并从签名中确定发送者的地址。从发送者的账户中减去交易费用和增加发送者的随机数。如果账户余额不足，返回错误</li><li>设定初值GAS = STARTGAS，并根据交易中的字节数减去一定量的瓦斯值</li><li>从发送者的账户转移价值到接收者账户。如果接收账户还不存在，创建此账户。如果接收账户是一个合约，运行合约的代码，直到代码运行结束或者瓦斯用完。</li><li>如果因为发送者账户没有足够的钱或者代码执行耗尽瓦斯导致价值转移失败，恢复原来的状态，但是还需要支付交易费用，交易费用加至矿工账户。</li><li>否则，将所有剩余的瓦斯归还给发送者，消耗掉的瓦斯作为交易费用发送给矿工</li></ol></li></ul></li></ol><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><ol><li>以太坊虚拟机：EVM</li><li>可以访问三种数据空间：堆栈、内存、合约的长期存储</li></ol><h3 id="区块链和挖矿"><a href="#区块链和挖矿" class="headerlink" title="区块链和挖矿"></a>区块链和挖矿</h3><ol><li>每个区块：不仅包含交易记录和最近的状态，还包含区块序号和难度值。核对规则如下<ol><li>检查区块引用的上一个区块是否存在和有效</li><li>检查区块的时间戳是否比引用的上一个区块大，而且小于15分钟</li><li>检查区块序号、难度值、 交易根，叔根和瓦斯限额（许多以太坊特有的底层概念）是否有效</li><li>检查区块的工作量证明是否有效</li><li>将S[0]赋值为上一个区块的STATE_ROOT</li><li>将TX赋值为区块的交易列表，一共有n笔交易。对于属于0……n-1的i，进行状态转换S[i+1] = APPLY(S[i],TX[i])。如果任何一个转换发生错误，或者程序执行到此处所花费的瓦斯（gas）超过了GASLIMIT，返回错误。</li><li>用S[n]给S_FINAL赋值, 向矿工支付区块奖励</li><li>检查S_FINAL是否与STATE_ROOT相同。如果相同，区块是有效的。否则，区块是无效的</li></ol></li><li>矿工的奖励，同比特币</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li>代币系统</li><li>金融衍生品和价值稳定的货币</li><li>身份和信誉系统</li><li>去中心化存储</li><li>去中心化资质组织</li><li>其他<ol><li>储蓄钱包</li><li>作物保险</li><li>一个去中心化的数据发布器</li><li>云计算</li><li>点对点赌博</li><li>预测市场</li><li>链上去中心化市场</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6&quot; target=&quot;_
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>区块链概况</title>
    <link href="https://mybestcool.github.io/2018/04/17/blockchain/"/>
    <id>https://mybestcool.github.io/2018/04/17/blockchain/</id>
    <published>2018-04-17T14:24:38.000Z</published>
    <updated>2018-04-19T14:07:05.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区块链的一些概念"><a href="#区块链的一些概念" class="headerlink" title="区块链的一些概念"></a>区块链的一些概念</h2><h3 id="区块链三要素"><a href="#区块链三要素" class="headerlink" title="区块链三要素"></a>区块链三要素</h3><ul><li>共享帐本</li><li>共识算法<ol><li>工作量证明机制（PoW,Proof of Work）</li><li>股权证明机制（PoS，Proof of Stake）</li><li>委托股权证明机制（DPos，Delegated Proof of Stake）</li><li>瑞波共识机制(Ripple Consensus)</li><li>实用拜占庭容错算法（Practical Byzantine Fault Tolerance）</li><li>恒星共识协议(Stellar Consensus Protocol)</li></ol></li><li>P2P网络</li></ul><h3 id="区块链类型"><a href="#区块链类型" class="headerlink" title="区块链类型"></a>区块链类型</h3><ul><li>公有链</li><li>私有链</li><li>联盟链</li></ul><h3 id="区块链应用方式"><a href="#区块链应用方式" class="headerlink" title="区块链应用方式"></a>区块链应用方式</h3><ul><li>密码学货币（Crypto Currency）</li><li>分布式账本（DTL，Distributed Ledger Technology）</li><li>智能合约（Smart Contract）</li></ul><h2 id="第一代区块链技术"><a href="#第一代区块链技术" class="headerlink" title="第一代区块链技术"></a>第一代区块链技术</h2><ul><li>bitcoin（比特币）– 推荐<ul><li>功能：密码学货币、几乎没有智能合约</li><li>类型：公有链</li><li>共识算法：工作量证明机制</li><li>开发语言：c++</li><li>状态：目前应用度高、扩展性差</li></ul></li></ul><h2 id="第二代区块链技术"><a href="#第二代区块链技术" class="headerlink" title="第二代区块链技术"></a>第二代区块链技术</h2><ul><li>bitshares（比特股）<ul><li>开发者：BM</li><li>功能：分布式账本，受限的智-能合约</li><li>类型：主要是公有链</li><li>共识算法：委托授权的权益证明机制</li><li>开发语言：c++</li><li>状态：没有形成核心团队</li></ul></li><li>ripple（瑞波币）<ul><li>功能：分布式账本，目前不支持智能合约</li><li>类型：主要是公有链</li><li>共识机制：瑞波共识机制</li><li>开发语言：c++</li><li>状态：致力于与银行合作</li></ul></li><li>HyperLedger（超级账本）<ul><li>功能：分布式账本、智能合约</li><li>类型：主要是联盟链</li><li>共识机制：实用拜占庭容错算法</li><li>开发语言：go、python</li><li>状态：致力于与金融行业</li></ul></li><li>ethereum（以太坊）– 推荐<ul><li>开发者：V神</li><li>功能：分布式账本、智能合约</li><li>类型：主要是公有链</li><li>共识算法：工作量证明机制，以后改成权益证明机制</li><li>开发语言：go</li><li>状态：目前应用度高、有明确规划<ul><li>myetherwallet 钱包：<a href="https://www.myetherwallet.com" target="_blank" rel="noopener">https://www.myetherwallet.com</a></li><li>eth交易历史查询：<a href="https://etherscan.io/" target="_blank" rel="noopener">https://etherscan.io/</a></li></ul></li></ul></li></ul><h2 id="第三代区块链技术"><a href="#第三代区块链技术" class="headerlink" title="第三代区块链技术"></a>第三代区块链技术</h2><ul><li>EOS – 推荐<ul><li>开发者：BM</li><li>类型：公有链</li><li>共识算法：DPOS，百万TPS</li><li>特点：<ul><li>可以跨链、角色权限管理</li><li>交易免费、EOS代币保值（DAPP的计算资源由其拥有的EOS代币量决定）</li><li>开发dapp简易</li></ul></li><li>状态<ul><li>目前还没有开发完成，但已在以太坊发币</li><li>EOS官网：<a href="http://eos.io" target="_blank" rel="noopener">http://eos.io</a></li><li>EOS代币发行历史查看：<a href="http://eoschart.com/?lang=zh" target="_blank" rel="noopener">http://eoschart.com/?lang=zh</a></li></ul></li><li>购买方式<ol><li>在加密货币平台上，如OTCBTC上用支付宝购买一些ETH，100rmb左右</li><li>使用chrome浏览器，安装MetaMask，并注册帐号</li><li>将从OTCBTC平台上购买的货币转移到MetaMask帐号</li><li>在EOS官网众筹EOS币，到第二天取出EOS币，并转移到MetaMask帐号</li></ol></li></ul></li><li>IOTA</li><li>Cardano</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;区块链的一些概念&quot;&gt;&lt;a href=&quot;#区块链的一些概念&quot; class=&quot;headerlink&quot; title=&quot;区块链的一些概念&quot;&gt;&lt;/a&gt;区块链的一些概念&lt;/h2&gt;&lt;h3 id=&quot;区块链三要素&quot;&gt;&lt;a href=&quot;#区块链三要素&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mongodb学习总结</title>
    <link href="https://mybestcool.github.io/2018/04/03/mongodbstudy/"/>
    <id>https://mybestcool.github.io/2018/04/03/mongodbstudy/</id>
    <published>2018-04-03T10:43:09.000Z</published>
    <updated>2018-04-03T10:49:10.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><pre><code>https://www.mongodb.com/http://docs.mongoing.com/index.htmlhttp://www.mongodb.org.cn/</code></pre><h2 id="mongo的安装"><a href="#mongo的安装" class="headerlink" title="mongo的安装"></a>mongo的安装</h2><pre><code>1. 下载社区版本 https://www.mongodb.com/download-center?jmp=navcommunity2. 安装目录下有哪些程序</code></pre><table><thead><tr><th>程序</th><th>说明</th><th>使用说明</th></tr></thead><tbody><tr><td>mongo</td><td>mongo客户端</td><td>默认连接local：27017 用–help查看帮助</td></tr><tr><td>mongod</td><td>mongo服务器</td><td>要先建立dbpath才能启动，可以用命令行创建，也可以根据服务器的配置来创建（一般配置systemLog和stroage:dbPath，使用yaml格式）。用mongod –install（-f configpath）在windows下注册成服务</td></tr><tr><td>mongodump</td><td>数据库备份</td><td>mongodump -h dbhost -d dbname -o dbdirectory</td></tr><tr><td>mongorestore</td><td>数据库恢复</td><td>mongorestore -h <hostname>&lt;:port&gt; -d dbname <path></path></hostname></td></tr><tr><td>mongoexport</td><td>集合备份</td><td>mongoexport -d test -c students -o students.dat</td></tr><tr><td>mongoimport</td><td>集合恢复</td><td>mongoimport -d test -c students students.dat</td></tr><tr><td>mongofiles</td><td>存取文件</td><td>mongofiles put E:xxx.data/mongofiles get E:xxx.data</td></tr><tr><td>mongooplog</td><td>oplog重放</td><td>mongooplog –port 20001 -u* –authenticationDatabase=admin –from=172.16.201.73:27017</td></tr><tr><td>mongoperf</td><td>独立检查mongoDB的I/O性能工具</td><td></td></tr><tr><td>mongos</td><td>集群工具</td><td></td></tr><tr><td>mongostat</td><td>状态监控工具</td><td></td></tr><tr><td>mongotop</td><td>性能监控工具</td><td></td></tr></tbody></table><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><table><thead><tr><th>操作类型</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>增</td><td>insert</td><td></td></tr><tr><td>删</td><td>remove</td><td></td></tr><tr><td>查</td><td>find</td><td>更加复杂的有条件查询：比较查询操作符，逻辑查询操作符，元素查询操作符，评价查询查询操作，Geospatia查询操作符，数组查询操作符，位查询操作符</td></tr><tr><td>改</td><td>update</td><td>字段更新操作符，数组更新操作符，位更新操作符</td></tr><tr><td>聚合</td><td></td><td>group查询操作符，管道聚合阶段</td></tr></tbody></table><table><thead><tr><th>大类</th><th>说明</th></tr></thead><tbody><tr><td>Collection</td><td><a href="https://docs.mongodb.com/manual/reference/method/#collection" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/method/#collection</a></td></tr><tr><td>Replication</td><td>…</td></tr><tr><td>Cursor</td><td>…</td></tr><tr><td>Sharding</td><td>…</td></tr><tr><td>Database</td><td>…</td></tr><tr><td>Subprocess</td><td>…</td></tr><tr><td>Query Plan Cache</td><td>… </td></tr><tr><td>Constructors</td><td>…</td></tr><tr><td>Bulk Write Operation</td><td>… </td></tr><tr><td>Connection</td><td>…</td></tr><tr><td>User Management</td><td>…  </td></tr><tr><td>Native</td><td>…</td></tr><tr><td>Role Management</td><td>… </td></tr></tbody></table><h2 id="理论学习（基本概念）"><a href="#理论学习（基本概念）" class="headerlink" title="理论学习（基本概念）"></a>理论学习（基本概念）</h2><ol><li><p>基本类型</p><p> 对应bjson的格式</p></li></ol><table><thead><tr><th>类型</th><th>类型</th><th>编号</th></tr></thead><tbody><tr><td>Double</td><td>双精度</td><td>1</td></tr><tr><td>String</td><td>字符串</td><td>2</td></tr><tr><td>Object</td><td>对象</td><td>3</td></tr><tr><td>Array</td><td>数组</td><td>4</td></tr><tr><td>Binary data</td><td>二进制对象</td><td>5</td></tr><tr><td>Object id</td><td>对象id</td><td>7</td></tr><tr><td>Boolean</td><td>布尔值</td><td>8</td></tr><tr><td>Date</td><td>日期</td><td>9</td></tr><tr><td>Null</td><td>未定义</td><td>10</td></tr><tr><td>Regular Expression</td><td>正则表达式</td><td>11</td></tr><tr><td>JavaScript</td><td>JavaScript代码</td><td>13</td></tr><tr><td>Symbol</td><td>符号</td><td>14</td></tr><tr><td>JavaScript (with scope)</td><td>JavaScript代码(带范围)</td><td>15</td></tr><tr><td>32-bit integer</td><td>32 位整数</td><td>16</td></tr><tr><td>Timestamp</td><td>时间戳</td><td>17</td></tr><tr><td>64-bit integer</td><td>64 位整数</td><td>18</td></tr><tr><td>Min key</td><td>最小键</td><td>255</td></tr><tr><td>Max key</td><td>最大键</td><td>127</td></tr></tbody></table><ol start="2"><li><p>文档：是mongodb中数据的基本单元（类似于关系数据库的行，但比行要复杂），多个键及其关联的值放在一起就是文档。mongodb文件存储格式为bjson。</p><ul><li>示例{“firstName”:”egger”,”lastName”:”wong”}</li><li>文档中的健/值是有序的</li><li>文档中的值不仅可以是在双引号里的字符串，还可以是其他的类型，包括文档</li><li>mongodb区分类型和大小写</li><li>mongodb的文档不能有重复的键</li><li>文档的键是字符串，除了少数情况，键可以使用任意的utf-8字符<ul><li>键不能含有\0，这个表示键的结束</li><li>.和$有特别的意义，只能在特定的环境下使用</li><li>以下划线”_”开头的键是保留的（非严格要求）</li></ul></li><li><p>每个文档都有一个objectid，由客户端驱动生成，由”_id”表示</p><p>  ObjectId占用12字节的存储空间，每个字节两位十六进制数字，是一个24位的字符串。由“时间戳” 、“机器名”、“PID号”和“计数器”组成。使用机器名的好处是在分布式环境中能够避免单点计数的性能瓶颈。使用PID号的好处是支持同一机器内运行多个mongod实例。最终采用时间戳和计数器的组合来保证唯一性</p><ul><li>时间戳 4个字节。从标准纪元开始，单位为秒</li><li>机器名　　3个字节。所在主机的唯一标识符。通常是机器主机名的散列值，机器名通过Md5加密后取前三个字节</li><li>PID　　2个字节。为了确保在同一台机器上并发的多个进程产生的Objectld是唯一的，所以加上进程标识符(PID).注意到每次重启mongod进程后PID号通常会发生变化就可以了</li><li>计数器　　3个字节，表示的取值范围就是256<em>256</em>256=16777216。一个自动增加的计数器，确保相同进程同一秒产生的Obj ectld也是不一样的同一秒钟最多允许每个进程拥有2563 (16 777 216)不同的Objectld</li></ul></li></ul></li></ol><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>时间戳</td><td></td><td></td><td></td><td>机器名</td><td></td><td></td><td>PID</td><td></td><td>计数器</td><td></td><td></td></tr></tbody></table><ol start="3"><li><p>集合：指一组文档（类似于关系数据库的表），可以看成没有模式的表</p><ul><li>集合是无模式的，文档的格式可以不一样。如{“name”:”egger”}，{“age”:18}可以在一个集合中。一般来说，这种情况还是推荐改成多个集合<ul><li>把各种各样的模式的文档混在一起，对开发和维护都会产生麻烦</li><li>在几个查询速度上会折损</li><li>创建索引的时候，会附加结构，尤其是唯一索引，模式一样会更加高效</li></ul></li><li>命名，用utf-8字符串来表示集合，有下列要求<ul><li>集合名不能有空字符串</li><li>集合名不能含有\0，这个表示集合名的结束</li><li>集合名不能以”system.”开头，这个是为系统集合保留的前缀</li><li>用户创建的集合名不能呢个含有保留字符</li></ul></li><li><p>子集合</p><p>  组织集合的一种惯例是使用”.”字符分开的按命名空间划分的子集合。在MongoDB中使用子集合来组织数据是很好的方法。</p><p>  例如，一个个人信息可能包含两个集合，分别是person.name和person.age。这样做的目的只是为了使组织结构更好些，也就是说person这个集合（这里根本就不需要存在）及其子集合没有任何关系。把数据库的名字放到集合名前面，得到就是集合的完全限定名，称为命名空间。命名空间的长度不得超过121字节，在实际使用当中应该小于100字节。</p><p>  很多MongoDB工具中都包含子集合。</p><ul><li>GridFS是一种存储大文件的协议，使用子集合来存储文件的元数据，这样就与内容块分开了</li><li>MongoDB的Web控制台通过子集合的方式将数据组织在DBTOP部分.</li><li>绝大多数驱动程序都提供语法糖，为访问指定集合的子集合提供方便。</li></ul></li></ul></li><li><p>数据库</p><p> MongoDB中多个集合可以组成一个数据库。mongodb的单个实例可以容纳多个独立的数据库，每个都有自己的集合和权限，不同的数据库放在不同的文件中。</p><p> 数据库也通过名字来标识。为满足以下条件的utf-8字符串</p><ul><li>不能是空字符串</li><li>不得含有’ ‘（空格)、.、$、/、\和\0 (空宇符)</li><li>应全部小写</li><li><p>最多64个字节</p><p>有一些数据库名是保留的，可以直接访问这些特殊作用的数据库</p></li><li><p>admin</p><p>  从权限的角度来看，这是“root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</p></li><li><p>local</p><p>  这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</p></li><li><p>config</p><p>  当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p></li></ul></li></ol><h2 id="客户端驱动"><a href="#客户端驱动" class="headerlink" title="客户端驱动"></a>客户端驱动</h2><pre><code>待补充</code></pre><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><pre><code>http://shift-alt-ctrl.iteye.com/blog/2255580</code></pre><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><pre><code>待补充</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;https://www.mongodb.com/

http://docs.mongoing.com/ind
      
    
    </summary>
    
    
      <category term="mongodb" scheme="https://mybestcool.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mybestcool.github.io/2018/04/03/hello-world/"/>
    <id>https://mybestcool.github.io/2018/04/03/hello-world/</id>
    <published>2018-04-03T09:59:24.688Z</published>
    <updated>2018-04-03T09:59:24.688Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
